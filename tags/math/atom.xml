<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="https://storopoli.com/feed_style.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <tabi:metadata xmlns:tabi="https://github.com/welpo/tabi">
        <tabi:base_url>https:&#x2F;&#x2F;storopoli.com</tabi:base_url>
        <tabi:separator>
            •
        </tabi:separator>
        <tabi:about_feeds>This is a web feed, also known as an Atom feed. Subscribe by copying the URL from the address bar into your newsreader. Visit About Feeds to learn more and get started. It&#x27;s free.</tabi:about_feeds>
        <tabi:visit_the_site>Visit website</tabi:visit_the_site>
        <tabi:recent_posts>Recent posts</tabi:recent_posts>
        <tabi:last_updated_on>Updated on $DATE</tabi:last_updated_on>
        <tabi:default_theme></tabi:default_theme>
        <tabi:post_listing_date>date</tabi:post_listing_date>
        <tabi:current_section>math</tabi:current_section>
    </tabi:metadata><link rel="extra-stylesheet" href="https://storopoli.com/skins/teal.css?h=bd19e558a52d678a50de" /><title>Jose Storopoli, PhD - math</title>
        <subtitle>Personal website of Jose Storopoli, PhD</subtitle>
    <link href="https://storopoli.com/tags/math/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://storopoli.com/tags/math/" rel="alternate" type="text/html"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-05-24T12:57:00+00:00</updated>
    <id>https://storopoli.com/tags/math/atom.xml</id><entry xml:lang="en">
        <title>The beauty of math&#x27;s incompleteness or how self-references can beautifully screw things up</title>
        <published>2025-05-24T12:57:00+00:00</published>
        <updated>2025-05-24T12:57:00+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/beauty-of-math-incompleteness/" type="text/html"/>
        <id>https://storopoli.com/blog/beauty-of-math-incompleteness/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;beauty-of-math-incompleteness&#x2F;self-referential-blackhole.png&quot; alt=&quot;A curios mathematician seeing a blackhole of self-referential paradoxes.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Logic is the hygiene that the mathematician practises to keep his ideas healthy and strong.”&lt;&#x2F;p&gt;
&lt;p&gt;— Hermann Weyl&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I have a very special place for &lt;strong&gt;mathematics in my mind and heart&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Mathematics is above &lt;em&gt;any other science&lt;&#x2F;em&gt;.
This is because the knowledge we gather in all other sciences are never &lt;em&gt;absolutely true&lt;&#x2F;em&gt;.
All other sciences are based on observations and experiments,
and eventually evidence accrues to a threshold that we can morally declare that something is &lt;em&gt;true&lt;&#x2F;em&gt;.
Yet, it is not &lt;em&gt;mathematically true&lt;&#x2F;em&gt;, in other words, for any given pile of evidence about a given hypothesis $H$,
we have $P(H) &amp;lt; 1$.
In a pure philosophical sense, we can never be &lt;em&gt;absolutely sure&lt;&#x2F;em&gt; about scientific hypotheses.
There will always be a certain degree of uncertainty even if we have a lot of evidence in favor of a given hypothesis.
For mathematical theorems, which is the meat of mathematics, once they are proven, they are &lt;em&gt;absolutely true&lt;&#x2F;em&gt;,
i.e. $P(H) = 1$.
For example, imagine a galaxy very far away, and a million years from now, given the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Euclidean_geometry#Axioms&quot;&gt;5 axioms of Euclidian geometry&lt;&#x2F;a&gt;,
the theorem that the sum of the angles of a triangle is 180 degrees will still be true.
It will always be true (given the 5 axioms of course).&lt;&#x2F;p&gt;
&lt;p&gt;That is how mathematics won my mind.
Now, how it won my heart is a different story.
It has to do with the beauty of math’s &lt;em&gt;incompleteness&lt;&#x2F;em&gt;, &lt;em&gt;inconsistency&lt;&#x2F;em&gt;, and &lt;em&gt;undecidability&lt;&#x2F;em&gt;.
Which all stems from &lt;strong&gt;self-referential paradoxes&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cantor-and-multiple-infinities&quot;&gt;Cantor and multiple infinities&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;beauty-of-math-incompleteness&#x2F;georg-cantor.jpg&quot; alt=&quot;Georg Cantor&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let’s go back to 1874, when &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Georg_Cantor&quot;&gt;Georg Cantor&lt;&#x2F;a&gt;
proved that there are &lt;strong&gt;multiple infinities&lt;&#x2F;strong&gt;.
Yes, that sounds crazy, but it is true.&lt;&#x2F;p&gt;
&lt;p&gt;Cantor is the father of set theory.
Before him, the concept of a set was just a collection of objects and they were all finite collections.
This dates back to Aristotle, and no one imagined that there was interesting things to say about sets.
In order to put set theory on a solid footing, Cantor had to define what a set is.
For finite sets, this was kinda trivial.
However, for infinite sets, this is where things started to get interesting.&lt;&#x2F;p&gt;
&lt;p&gt;Cantor started exploring the properties of infinite sets.
First, he analyzed the properties of the set of natural numbers $\mathbb{N}$.
He then realized that the set of natural numbers is the same size
as the set of the integers $\mathbb{Z}$ and the set of the rational numbers $\mathbb{Q}$.
To show this, he had to come up with a way to compare the sizes of sets.
He did this by defining a bijection between the set of natural numbers and the set of integers.
A &lt;strong&gt;bijection&lt;&#x2F;strong&gt; is a function that is one-to-one and onto.
In other words, it is a function that maps each element of the first set to a unique element of the second set,
and each element of the second set to a unique element of the first set.&lt;&#x2F;p&gt;
&lt;p&gt;For example, the function&lt;&#x2F;p&gt;
&lt;p&gt;$$
f(n) = \begin{cases}
-\frac{n}{2} &amp;amp; \text{if } n \text{ is even} \\
\frac{n+1}{2} &amp;amp; \text{if } n \text{ is odd}
\end{cases}
$$&lt;&#x2F;p&gt;
&lt;p&gt;is a bijection between the set of natural numbers and the set of integers.&lt;&#x2F;p&gt;
&lt;p&gt;It creates a one-to-one correspondence between the set of natural numbers and the set of integers:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;$f(n)$&lt;&#x2F;th&gt;&lt;th&gt;$\mathbb{N}$&lt;&#x2F;th&gt;&lt;th&gt;$\mathbb{Z}$&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;f(0)&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(1)&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(2)&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;-1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(3)&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(4)&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;-2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(5)&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(6)&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;-3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Ok that was easy, we just proved that the &lt;strong&gt;set of natural numbers and the set of integers have the same size&lt;&#x2F;strong&gt;.
Now let’s try to prove the same for the set of rational numbers $\mathbb{Q}$.
The idea again is to find a bijection between the set of natural numbers and the set of rational numbers.
We can represent the set of rational numbers as a grid of fractions:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{array}{cccc}
\frac{1}{1} &amp;amp; \quad \frac{1}{2} &amp;amp; \quad \frac{1}{3} &amp;amp; \quad \cdots \\\\
\frac{2}{1} &amp;amp; \quad \frac{2}{2} &amp;amp; \quad \frac{2}{3} &amp;amp; \quad \cdots \\\\
\frac{3}{1} &amp;amp; \quad \frac{3}{2} &amp;amp; \quad \frac{3}{3} &amp;amp; \quad \cdots \\\\
\vdots &amp;amp; \quad \vdots &amp;amp; \quad \vdots &amp;amp; \quad \ddots \\\\
\end{array}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Now, we can’t just go row by row or column by column — that would never finish the first row!
Instead, Cantor had a brilliant idea: traverse the grid diagonally in a zigzag pattern&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-pairing-function-1&quot;&gt;&lt;a href=&quot;#fn-pairing-function&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{array}{ccccc}
\frac{1}{1} &amp;amp; \rightarrow &amp;amp; \frac{1}{2} &amp;amp; \quad &amp;amp; \frac{1}{3} &amp;amp; \rightarrow &amp;amp; \frac{1}{4} &amp;amp; \cdots \\
&amp;amp; \swarrow &amp;amp; &amp;amp; \nearrow &amp;amp; &amp;amp; \swarrow &amp;amp; \\
\frac{2}{1} &amp;amp; &amp;amp; \frac{2}{2} &amp;amp; &amp;amp; \frac{2}{3} &amp;amp; &amp;amp; \frac{2}{4} &amp;amp; \cdots \\
\downarrow &amp;amp; \nearrow &amp;amp; &amp;amp; \swarrow &amp;amp; &amp;amp; &amp;amp; \\
\frac{3}{1} &amp;amp; &amp;amp; \frac{3}{2} &amp;amp; &amp;amp; \frac{3}{3} &amp;amp; &amp;amp; \frac{3}{4} &amp;amp; \cdots \\
&amp;amp; \swarrow &amp;amp; &amp;amp; \nearrow &amp;amp; &amp;amp; &amp;amp; \\
\frac{4}{1} &amp;amp; &amp;amp; \frac{4}{2} &amp;amp; &amp;amp; \frac{4}{3} &amp;amp; &amp;amp; \frac{4}{4} &amp;amp; \cdots \\
\vdots &amp;amp; &amp;amp; \vdots &amp;amp; &amp;amp; \vdots &amp;amp; &amp;amp; \vdots &amp;amp; \ddots \\
\end{array}
$$&lt;&#x2F;p&gt;
&lt;p&gt;This gives us the sequence:
$$
\frac{1}{1}, \frac{1}{2}, \frac{2}{1}, \frac{3}{1}, \frac{2}{2}, \frac{1}{3}, \frac{1}{4}, \frac{2}{3}, \frac{3}{2}, \frac{4}{1}, \ldots
$$&lt;&#x2F;p&gt;
&lt;p&gt;But wait! We have a problem — many fractions represent the same rational number:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$\frac{2}{2} = \frac{1}{1} = 1$&lt;&#x2F;li&gt;
&lt;li&gt;$\frac{2}{4} = \frac{1}{2} = 0.5$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To create a true bijection, we need to skip these duplicates.
We only keep fractions in &lt;strong&gt;lowest terms&lt;&#x2F;strong&gt;,
where $\text{gcd}(\text{numerator}, \text{denominator}) = 1$.&lt;&#x2F;p&gt;
&lt;p&gt;After removing duplicates:
$$\frac{1}{1}, \frac{1}{2}, \frac{2}{1}, \frac{3}{1}, \frac{1}{3}, \frac{1}{4}, \frac{2}{3}, \frac{3}{2}, \frac{4}{1}, \ldots$$&lt;&#x2F;p&gt;
&lt;p&gt;Ok we’re almost there.
This is truly a bijection.
However, it is a bijection between $\mathbb{N}$ and the set of &lt;em&gt;positive rationals&lt;&#x2F;em&gt;, $\mathbb{Q}^+$.
To include all of $\mathbb{Q}$, we interleave &lt;em&gt;positive and negative rationals&lt;&#x2F;em&gt; (and zero).
I won’t give the precise mathematical formula here because it is a bit messy,
however here’s an algorithm describing the bijection:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Start with $n$&lt;&#x2F;li&gt;
&lt;li&gt;If $n = 0$, return $0$&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise:
&lt;ul&gt;
&lt;li&gt;Let $k = \frac{n+1}{2}$ if $n$ is odd, $k = \frac{n}{2}$ if $n$ is even&lt;&#x2F;li&gt;
&lt;li&gt;Find the $k$-th positive rational in our enumeration, call it $r$&lt;&#x2F;li&gt;
&lt;li&gt;If $n$ is odd, return $r$&lt;&#x2F;li&gt;
&lt;li&gt;If $n$ is even, return $-r$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This gives us the following bijection:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;$g(n)$&lt;&#x2F;th&gt;&lt;th&gt;$\mathbb{N}$&lt;&#x2F;th&gt;&lt;th&gt;$\mathbb{Q}^+$ enumeration&lt;&#x2F;th&gt;&lt;th&gt;$\mathbb{Q}$&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;g(0)&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;g(1)&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;1st positive: $\frac{1}{1}$&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;g(2)&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;1st positive: $\frac{1}{1}$&lt;&#x2F;td&gt;&lt;td&gt;-1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;g(3)&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;2nd positive: $\frac{1}{2}$&lt;&#x2F;td&gt;&lt;td&gt;$\frac{1}{2}$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;g(4)&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;2nd positive: $\frac{1}{2}$&lt;&#x2F;td&gt;&lt;td&gt;$-\frac{1}{2}$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;g(5)&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;3rd positive: $\frac{2}{1}$&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;g(6)&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;3rd positive: $\frac{2}{1}$&lt;&#x2F;td&gt;&lt;td&gt;-2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Q.E.D.! We have a &lt;strong&gt;bijection between $\mathbb{N}$ and $\mathbb{Q}$&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I went over all of these details because this diagonalization argument is a very important insight.
Any set that can be put in a one-to-one correspondence with the set of natural numbers is called &lt;strong&gt;countable&lt;&#x2F;strong&gt;.
Cantor showed that the set of rational numbers is countable.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see what happens when we try to apply the same argument to the set of real numbers $\mathbb{R}$.
For the sake of simplicity, let’s consider the set of real numbers between 0 and 1, $\mathbb{R}_{(0,1)}$.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s assume that we have a bijection $f$ between $\mathbb{N}$ and $\mathbb{R}_{(0,1)}$.
This would give us the following table:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;$f(n)$&lt;&#x2F;th&gt;&lt;th&gt;$\mathbb{N}$&lt;&#x2F;th&gt;&lt;th&gt;$\mathbb{R}_{(0,1)}$&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;f(0)&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0.011…&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(1)&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;0.111…&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(2)&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;0.112…&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;…&lt;&#x2F;td&gt;&lt;td&gt;…&lt;&#x2F;td&gt;&lt;td&gt;…&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Note that the real number $f(n)$ is the $n$-th real number in the list.&lt;&#x2F;p&gt;
&lt;p&gt;Now, let’s construct a new real number $x$ that is not in the list.
We will do this by constructing a real number that is different from the $n$-th real number in the list for all $n$.
We just add 1 to the $n$-th digit of the $n$-th real number in the list.
For example, for the first real number in the list, we add 1 to the first digit,
for the second real number in the list, we add 1 to the second digit,
and so on.&lt;&#x2F;p&gt;
&lt;p&gt;This gives us the following real number: $0.123\ldots$
By construction, this real number is not in the list,
since it differs from the first real number in the list by 1 in the first digit,
from the second real number in the list by 1 in the second digit,
and so on.&lt;&#x2F;p&gt;
&lt;p&gt;This is a &lt;strong&gt;contradiction&lt;&#x2F;strong&gt;, since we assumed that $f$ was a bijection.&lt;&#x2F;p&gt;
&lt;p&gt;Now, this is where &lt;strong&gt;self-reference&lt;&#x2F;strong&gt; strikes first in this post,
and probably in the history of mathematics.
When we construct the &lt;em&gt;diagonal number&lt;&#x2F;em&gt; $x$, we’re creating something that:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Refers to the entire supposed list of real numbers.&lt;&#x2F;li&gt;
&lt;li&gt;Defines itself in opposition to that list — “I differ from the 1st number at position 1, from the 2nd at position 2…”.&lt;&#x2F;li&gt;
&lt;li&gt;Uses the list to prove the list is incomplete.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Ultimately, this is where Cantor found the first example of a set that is &lt;strong&gt;not countable&lt;&#x2F;strong&gt;.
There’s no way to pair the set of natural numbers with the set of real numbers between 0 and 1.
Therefore, the set of real numbers between 0 and 1 is &lt;strong&gt;not countable&lt;&#x2F;strong&gt;.
This is called the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cantor%27s_diagonal_argument&quot;&gt;Cantor’s diagonal argument&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is a very important insight.
It shows that there are &lt;strong&gt;different sizes of infinity&lt;&#x2F;strong&gt;.
Yes, that is mind-blowing and paradoxically beautiful.&lt;&#x2F;p&gt;
&lt;p&gt;Cantor called the size of the set of natural numbers $\aleph_0$,
and conjectured that the set of real numbers is $\aleph_1$.
This is called the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Continuum_hypothesis&quot;&gt;&lt;strong&gt;continuum hypothesis&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (CH).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;russell-and-the-barber-paradox&quot;&gt;Russell and the barber paradox&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;beauty-of-math-incompleteness&#x2F;bertrand-russell.jpg&quot; alt=&quot;Bertrand Russell&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now let’s fast forward to 1901.
Set theory was still in its infancy,
yet it was starting to be accepted by the mathematical community.
This is where &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bertrand_Russell&quot;&gt;Bertrand Russell&lt;&#x2F;a&gt;
after attending the first &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;World_Congress_of_Philosophy&quot;&gt;World Congress of Philosophy&lt;&#x2F;a&gt; in Paris in 1900,
was impressed by the work of Peano who was using set theory to formalize mathematics.&lt;&#x2F;p&gt;
&lt;p&gt;He embarked on a journey to &lt;strong&gt;formalize mathematics using set theory&lt;&#x2F;strong&gt;.
However, he stumbled upon a &lt;strong&gt;paradox&lt;&#x2F;strong&gt;.
Set theory is very lenient with the definition of sets.
For example, we can define the set of all sets that are &lt;strong&gt;not members of themselves&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;$$
R = \{ x \mid x \notin x \}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Now what happens if we ask the question: &lt;strong&gt;is $R$ a member of itself?&lt;&#x2F;strong&gt;
If $R$ is a member of itself, then it is &lt;em&gt;not&lt;&#x2F;em&gt; a member of itself.
If $R$ is &lt;em&gt;not&lt;&#x2F;em&gt; a member of itself, then it is a member of itself.&lt;&#x2F;p&gt;
&lt;p&gt;To put more simply, Russell gave the simple analogy:
imagine a barber who shaves all men who do not shave themselves.
Now, the question is: &lt;strong&gt;does the barber shave himself?&lt;&#x2F;strong&gt;
If he does, then he does &lt;em&gt;not&lt;&#x2F;em&gt; shave himself.
If he does &lt;em&gt;not&lt;&#x2F;em&gt; shave himself, then he does shave himself.&lt;&#x2F;p&gt;
&lt;p&gt;I can even given an even more simple example: the statement “this statement is false” is a paradox.
If it is true, then it is false.
If it is false, then it is true.&lt;&#x2F;p&gt;
&lt;p&gt;Or suppose that I go out and shout out loud: “I am lying”.
If I am lying, then I am &lt;em&gt;not&lt;&#x2F;em&gt; lying.
If I am &lt;em&gt;not&lt;&#x2F;em&gt; lying, then I am lying.&lt;&#x2F;p&gt;
&lt;p&gt;All of these examples boil down to the same thing:
we cannot have a set of all sets that are &lt;strong&gt;not members of themselves&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is called the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Russell%27s_paradox&quot;&gt;&lt;strong&gt;Russell’s paradox&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
And yet again, we have &lt;strong&gt;self-reference&lt;&#x2F;strong&gt; creating a paradox.
Personally, I find Cantor’s multiple infinities more beautiful than Russell’s paradox.
But I acknowledge that Russell’s paradox is way simpler and more accessible to the general public.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;godel-and-the-incompleteness-theorem&quot;&gt;Gödel and the incompleteness theorem&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;beauty-of-math-incompleteness&#x2F;kurt-godel.jpg&quot; alt=&quot;Kurt Gödel&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Fasten your seatbelts, this is going to be a wild ride.
But first, a little bit of history.&lt;&#x2F;p&gt;
&lt;p&gt;In 1900,
during the second &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;International_Congress_of_Mathematicians&quot;&gt;International Congress of Mathematicians&lt;&#x2F;a&gt; in Paris,
David Hilbert,
arguably the most important mathematician of the 20th century,
gave a list of 23 problems that he thought would be the most important to solve in the century.
These became known as the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hilbert%27s_problems&quot;&gt;Hilbert’s problems&lt;&#x2F;a&gt;.
Right there in the second problem, Hilbert posed the following problem:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The compatibility of the arithmetical axioms.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Later, Hilbert recasted his “Second Problem” at the eighth &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;International_Congress_of_Mathematicians&quot;&gt;International Congress of Mathematicians&lt;&#x2F;a&gt; in Bologna.
He posed three questions:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Was mathematics complete?&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Was mathematics consistent?&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Was mathematics decidable?&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Hilbert believed that mathematics could be put on a completely secure foundation by answering these questions.
Gödel would shatter the dream of a &lt;strong&gt;complete and consistent mathematics&lt;&#x2F;strong&gt;.
And later, Turing would show that mathematics is &lt;strong&gt;not decidable&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Gödel’s incompleteness theorems&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-godel-incompleteness-1&quot;&gt;&lt;a href=&quot;#fn-godel-incompleteness&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; are composed of two theorems.
Let’s start with the first incompleteness theorem, which Gödel proved in 1931
in front of an audience that comprised of no one other than &lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;von-neumann&#x2F;&quot;&gt;Von Neumann&lt;&#x2F;a&gt;,
who allegedly was so impressed by Gödel’s work that he remarked:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s all over.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;the-first-incompleteness-theorem&quot;&gt;The first incompleteness theorem&lt;&#x2F;h3&gt;
&lt;p&gt;The First Incompleteness Theorem states:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;For any consistent formal system $F$ that is powerful enough to express basic arithmetic&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-peano-1&quot;&gt;&lt;a href=&quot;#fn-peano&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, there exists a statement $G$ in the language of $F$ such that:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$G$ is true (when interpreted as a statement about natural numbers)&lt;&#x2F;li&gt;
&lt;li&gt;$G$ cannot be proven within $F$&lt;&#x2F;li&gt;
&lt;li&gt;$\neg G$ (not $G$) cannot be proven within $F$ either&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In other words: &lt;strong&gt;truth and provability are not the same thing&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Gödel’s genius was realizing he could make mathematical statements talk about mathematical statements.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-1-godel-numbering-the-encoding-trick&quot;&gt;Step 1: Gödel numbering — the encoding trick&lt;&#x2F;h4&gt;
&lt;p&gt;Gödel assigned a unique natural number to every mathematical symbol, expression, and proof.
Think of it like ASCII encoding for math:&lt;&#x2F;p&gt;
&lt;p&gt;Basic symbols get prime numbers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;&#x2F;code&gt; → 2&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;=&lt;&#x2F;code&gt; → 3&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;+&lt;&#x2F;code&gt; → 5&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;(&lt;&#x2F;code&gt; → 7&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;)&lt;&#x2F;code&gt; → 11&lt;&#x2F;li&gt;
&lt;li&gt;etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Gödel used a system based on prime factorization.
He first assigned a unique natural number to each basic symbol in the formal language of arithmetic with which he was dealing.&lt;&#x2F;p&gt;
&lt;p&gt;To encode an entire formula, which is a sequence of symbols, Gödel used the following system.
Given a sequence $(x_{1},x_{2},x_{3},…,x_{n})$ of positive integers,
the Gödel encoding of the sequence is the product of the first $n$ primes raised to their corresponding values in the sequence
For example, the formula $0 = 0$ might become:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;&#x2F;code&gt; → 2&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;=&lt;&#x2F;code&gt; → 3&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;0&lt;&#x2F;code&gt; → 2&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Gödel number = $2^2 \times 3^3 \times 5^2 = 4 \times 27 \times 25 = 2,700$&lt;&#x2F;p&gt;
&lt;p&gt;This is called the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;G%C3%B6del_numbering&quot;&gt;&lt;strong&gt;Gödel numbering&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
The key insight is that now &lt;strong&gt;statements about formulas become statements about numbers&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-2-the-predicate-proves-x-y&quot;&gt;Step 2: the predicate “proves(x, y)”&lt;&#x2F;h4&gt;
&lt;p&gt;Using Gödel numbering, we can write an arithmetic predicate that means:
“$x$ is the Gödel number of a proof of the statement with Gödel number $y$”&lt;&#x2F;p&gt;
&lt;p&gt;This is purely mechanical — checking if $x$ represents a valid sequence of logical steps ending in $y$.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-3-the-diagonal-lemma-the-self-reference-trick&quot;&gt;Step 3: the diagonal lemma — the self-reference trick&lt;&#x2F;h4&gt;
&lt;p&gt;This is where it gets mind-blowing.
Gödel proved:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;For any arithmetic property $P(x)$, we can construct a statement $S$ that says:
“$P$ holds for my own Gödel number”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It’s like writing a sentence that says “This sentence has 25 letters” — but in arithmetic!&lt;&#x2F;p&gt;
&lt;p&gt;How the &lt;strong&gt;diagonal lemma&lt;&#x2F;strong&gt; works:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Define a function $\text{sub}(n, m) =$ “the result of substituting $m$ into formula $n$”.&lt;&#x2F;li&gt;
&lt;li&gt;Consider the property: “The formula with Gödel number $x$, when $x$ substituted into it, has property $P$”.&lt;&#x2F;li&gt;
&lt;li&gt;Let this property have Gödel number $d$.&lt;&#x2F;li&gt;
&lt;li&gt;Now look at $\text{sub}(d, d)$ — this is $d$ applied to itself.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This creates a &lt;strong&gt;fixed point&lt;&#x2F;strong&gt; — a statement that successfully refers to itself.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-4-constructing-g-the-godel-sentence&quot;&gt;Step 4: constructing $G$ — the Gödel sentence&lt;&#x2F;h4&gt;
&lt;p&gt;Using the diagonal lemma with the property “is not provable”, Gödel constructs $G$ such that:&lt;&#x2F;p&gt;
&lt;p&gt;$G \iff$ “The statement with Gödel number $g$ is not provable”&lt;&#x2F;p&gt;
&lt;p&gt;But $g$ is the Gödel number of $G$ itself! So:&lt;&#x2F;p&gt;
&lt;p&gt;$G \iff \text{“$G$ is not provable”}$&lt;&#x2F;p&gt;
&lt;p&gt;Now we reason:&lt;&#x2F;p&gt;
&lt;p&gt;Case 1: Suppose G is provable:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Then G is false (since G says “G is not provable”)&lt;&#x2F;li&gt;
&lt;li&gt;So our system proves a false statement&lt;&#x2F;li&gt;
&lt;li&gt;The system is inconsistent! ❌&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Case 2: Suppose $\neg G$ is provable:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Then G is true (G really isn’t provable)&lt;&#x2F;li&gt;
&lt;li&gt;So $\neg G$ is false&lt;&#x2F;li&gt;
&lt;li&gt;Again, the system proves something false&lt;&#x2F;li&gt;
&lt;li&gt;Inconsistent! ❌&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Conclusion: If the system is consistent:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Neither $G$ nor $\neg G$ is provable&lt;&#x2F;li&gt;
&lt;li&gt;But $G$ is true (it correctly states its own &lt;em&gt;unprovability&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;We have a true but unprovable statement! ✅&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is the &lt;strong&gt;self-reference that Gödel uses to prove his first incompleteness theorem&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The deepest insight is that &lt;strong&gt;self-reference is unavoidable in any system strong enough to do arithmetic&lt;&#x2F;strong&gt;.
Once you can:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Encode statements as numbers&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Talk about properties of those numbers&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Use diagonalization&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You automatically get statements that assert their own &lt;em&gt;unprovability&lt;&#x2F;em&gt;.
Mathematics contains the &lt;strong&gt;seeds of its own incompleteness&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-second-incompleteness-theorem&quot;&gt;The second incompleteness theorem&lt;&#x2F;h3&gt;
&lt;p&gt;The Second Incompleteness Theorem states:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If $F$ is a consistent formal system capable of proving basic arithmetic facts, then $F$ cannot prove its own consistency.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This means &lt;strong&gt;arithmetic cannot prove that arithmetic doesn’t contradict itself&lt;&#x2F;strong&gt;!
It’s like a judge who can’t certify their own sanity — the very act of self-certification is suspect.&lt;&#x2F;p&gt;
&lt;p&gt;The Second Theorem is actually a clever consequence of the First.
Here’s the brilliant insight:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-1-formalizing-consistency&quot;&gt;Step 1: formalizing “consistency”&lt;&#x2F;h4&gt;
&lt;p&gt;First, we need to express “$F$ is consistent” in the language of arithmetic.
Gödel realized:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“$F$ is consistent” $\iff$ “$F$ does not prove both a statement and its negation”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Using Gödel numbering, this becomes:
$\text{Consistency}(F)$ = “There is no statement $A$ such that $F$ proves both $A$ and $\neg A$”&lt;&#x2F;p&gt;
&lt;p&gt;Or equivalently:
$\text{Consistency}(F)$ = “$F$ does not prove $0=1$” (since from a contradiction, you can prove anything)&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-2-the-key-connection&quot;&gt;Step 2: the key connection&lt;&#x2F;h4&gt;
&lt;p&gt;Remember our Gödel sentence $G$ from the First Theorem:&lt;&#x2F;p&gt;
&lt;p&gt;$G \iff \text{“$G$ is not provable in $F$”}$&lt;&#x2F;p&gt;
&lt;p&gt;Now here’s the brilliant move.
Gödel proved that within $F$ itself:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;$F$ can prove: “If $F$ is consistent, then $G$ is not provable”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Now comes the devastating logic:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Assume $F$ can prove its own consistency: $F \vdash \text{Con}(F)$&lt;&#x2F;li&gt;
&lt;li&gt;We know $F$ can prove: $\text{Con}(F) \rightarrow G$&lt;&#x2F;li&gt;
&lt;li&gt;By deduction: $F \vdash G$&lt;&#x2F;li&gt;
&lt;li&gt;But this means $G$ is provable!&lt;&#x2F;li&gt;
&lt;li&gt;Since $G$ says “$G$ is not provable”, $G$ must be false&lt;&#x2F;li&gt;
&lt;li&gt;So $F$ proves a false statement - $F$ is inconsistent!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We’ve shown: &lt;strong&gt;If $F$ can prove its own consistency, then $F$ is inconsistent&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Therefore: &lt;strong&gt;If $F$ is consistent, it cannot prove its own consistency&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;That’s a lot to digest.
This is a very deep result that is still being studied today.
I find this result to be on par with Cantor’s multiple infinities in beauty.
However, Gödel’s incompleteness theorems are a much more outstanding and impressive result.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;turing-and-the-halting-problem&quot;&gt;Turing and the halting problem&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;beauty-of-math-incompleteness&#x2F;alan-turing.jpg&quot; alt=&quot;Alan Turing&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Hilbert, after being aware of Gödel’s incompleteness theorems,
was devastated.
His beautiful dream of a complete and consistent mathematics was &lt;strong&gt;shattered&lt;&#x2F;strong&gt;.
But there were still hope in the idea of mathematics being decidable.&lt;&#x2F;p&gt;
&lt;p&gt;Alan Turing, in 1936, while still an undergraduate at King’s College, Cambridge,
published a paper entitled “On Computable Numbers, with an Application to the Entscheidungsproblem”.
That mouthful word, &lt;em&gt;Entscheidungsproblem&lt;&#x2F;em&gt;, is the German for what has become known as the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Halting_problem&quot;&gt;“&lt;strong&gt;halting problem&lt;&#x2F;strong&gt;”&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The halting problem is the &lt;strong&gt;problem of determining whether a program will halt or run forever&lt;&#x2F;strong&gt;.
Turing showed that the halting problem is &lt;strong&gt;undecidable&lt;&#x2F;strong&gt;,
thus shattering the last bastion of hope for a complete, consistent, and decidable mathematics.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-turing-machine&quot;&gt;The Turing machine&lt;&#x2F;h3&gt;
&lt;p&gt;To tackle the halting problem,
Turing introduced the concept of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Turing_machine&quot;&gt;&lt;strong&gt;Turing machine&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
A Turing machine is a mathematical model of a computer that can be used to compute anything.
It is comprised of a &lt;strong&gt;tape&lt;&#x2F;strong&gt;, a &lt;strong&gt;head&lt;&#x2F;strong&gt;, and a set of &lt;strong&gt;rules&lt;&#x2F;strong&gt;.
The tape is infinite in both directions, and is divided into cells.
The head can read and write symbols on the tape.
The rules are a set of instructions that the head can follow.
He showed that any &lt;strong&gt;computable function&lt;&#x2F;strong&gt; can be computed by a Turing machine.
I won’t go into much details here,
since if you are reading this through the internet,
holding on your hands or standing in front of a “Turing machine”,
is proof enough that Turing machines can compute stuff.&lt;&#x2F;p&gt;
&lt;p&gt;Using the newfound concept of the Turing machine,
Turing then redefined the concept of the &lt;strong&gt;halting problem&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a Turing machine $M$ and input $I$, will $M$ eventually halt (stop) on input $I$, or will it run forever?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To answer this question,
suppose that you have a function that detects if a Turing machine halts on a given input.
Here’s how the function signature looks like in Haskell notation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;halts&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;TuringMachine&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Input&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Bool&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This function takes a Turing machine and an input,
and returns a boolean value indicating whether the Turing machine halts on the input.&lt;&#x2F;p&gt;
&lt;p&gt;Now, let’s say that you have a Turing machine $M$ that uses the &lt;code&gt;halts&lt;&#x2F;code&gt; function to detect whether a Turing machine halts on a given input.
However, this machine loops forever if the &lt;code&gt;halts&lt;&#x2F;code&gt; function returns &lt;code&gt;True&lt;&#x2F;code&gt;,
or halts if the &lt;code&gt;halts&lt;&#x2F;code&gt; function returns &lt;code&gt;False&lt;&#x2F;code&gt;.
This could be expressed in Haskell as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;M&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;TuringMachine&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Input&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-unit z-haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;M&lt;&#x2F;span&gt; m i &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;if&lt;&#x2F;span&gt; halts m i &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;then&lt;&#x2F;span&gt; loop &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-unit z-haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, the question is:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Does $M$ halt on input $M$?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If $M$ halts on input $M$,
then $M$ loops forever.
If $M$ loops forever,
then $M$ halts on input $M$.&lt;&#x2F;p&gt;
&lt;p&gt;We have arrived at a &lt;strong&gt;contradiction&lt;&#x2F;strong&gt; and the final &lt;strong&gt;self-referential paradox&lt;&#x2F;strong&gt; in this blog post.&lt;&#x2F;p&gt;
&lt;p&gt;That’s how Turing, at the young age of 24,
proved that &lt;strong&gt;mathematics is &lt;em&gt;not&lt;&#x2F;em&gt; decidable&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;agda-proof-that-the-set-of-real-numbers-is-uncountable&quot;&gt;Agda proof that the set of real numbers is uncountable&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;agda.readthedocs.io&#x2F;&quot;&gt;&lt;strong&gt;Agda&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is a dependently typed programming language.
It is often used to prove mathematical theorems.
But you can also compile it to Haskell using GHC or to JavaScript using a native compiler.
It is like Haskell on steroids,
some call it &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;OSDgVxdP20g&quot;&gt;“&lt;strong&gt;Super Haskell&lt;&#x2F;strong&gt;”&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It follows very closely the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Curry%E2%80%93Howard_correspondence&quot;&gt;&lt;strong&gt;Curry-Howard correspondence&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
which is a &lt;strong&gt;magnificent connection between logic and programming&lt;&#x2F;strong&gt;.
People also called it “&lt;strong&gt;proof-as-program&lt;&#x2F;strong&gt;” or “&lt;strong&gt;programs-as-proofs&lt;&#x2F;strong&gt;”,
since it is a one-to-one correspondence between programs and proofs.
The basic idea is that you can write a program that proves a theorem,
and the program will type-check if the theorem is true.
This is done by having a very powerful and expressive type system,
that allows you to express the properties of the objects you are working with.
If a type is “inhabited”, it means that there exists a term&#x2F;value of that type,
which under Curry-Howard corresponds to having a proof of the proposition that the type represents.&lt;&#x2F;p&gt;
&lt;p&gt;So when a type is “&lt;em&gt;inhabited&lt;&#x2F;em&gt;” in Agda, it means:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You can construct a value of that type — there exists some term &lt;code&gt;t : T&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The corresponding logical proposition is true&#x2F;provable.&lt;&#x2F;li&gt;
&lt;li&gt;You have evidence&#x2F;proof of that proposition.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here are some Agda types and their corresponding logical propositions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;⊥&lt;&#x2F;code&gt; (bottom type) is uninhabited — corresponds to &lt;code&gt;False&lt;&#x2F;code&gt; (no proof possible).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;⊤&lt;&#x2F;code&gt; (unit type) is inhabited by &lt;code&gt;tt&lt;&#x2F;code&gt; — corresponds to trivially &lt;code&gt;True&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;A → B&lt;&#x2F;code&gt; (implication type) is inhabited by a function — corresponds to &lt;code&gt;A&lt;&#x2F;code&gt; implies &lt;code&gt;B&lt;&#x2F;code&gt; being provable.
This is called the &lt;a href=&quot;https:&#x2F;&#x2F;agda.readthedocs.io&#x2F;en&#x2F;stable&#x2F;language&#x2F;function-types.html&quot;&gt;Function type&lt;&#x2F;a&gt;
in Agda.
For example, the type of the addition function for natural numbers is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;Nat &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Nat &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Nat
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;A × B&lt;&#x2F;code&gt; (product type) is inhabited by a pair &lt;code&gt;a , b&lt;&#x2F;code&gt; — corresponds to &lt;code&gt;A&lt;&#x2F;code&gt; and &lt;code&gt;B&lt;&#x2F;code&gt; both being true.
For example, the type of a pair of natural numbers is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;Nat × Nat
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;A ⊎ B&lt;&#x2F;code&gt; (sum type) is inhabited by &lt;code&gt;inj₁ a&lt;&#x2F;code&gt; or &lt;code&gt;inj₂ b&lt;&#x2F;code&gt; — corresponds to &lt;code&gt;A&lt;&#x2F;code&gt; or &lt;code&gt;B&lt;&#x2F;code&gt; being true.
Note that &lt;code&gt;⊎&lt;&#x2F;code&gt; is the symbol for disjunction.
For example, the type of a natural number or a boolean is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;Nat ⊎ Bool
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Σ[ x ∈ A ] B x&lt;&#x2F;code&gt; (dependent sum type) is inhabited by a pair &lt;code&gt;a , b&lt;&#x2F;code&gt; — corresponds to “there exists &lt;code&gt;x : A&lt;&#x2F;code&gt; such that &lt;code&gt;B x&lt;&#x2F;code&gt; is true”.
Note that &lt;a href=&quot;https:&#x2F;&#x2F;agda.readthedocs.io&#x2F;en&#x2F;stable&#x2F;language&#x2F;built-ins.html#the-type&quot;&gt;&lt;code&gt;Σ&lt;&#x2F;code&gt; type&lt;&#x2F;a&gt; is the same as the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dependent_type&quot;&gt;dependent pair type&lt;&#x2F;a&gt; in type theory.
This is more tricky than the product type, because the type of the second component depends on the value of the first component.&lt;&#x2F;p&gt;
&lt;p&gt;For example, consider a pair where the first component is a boolean and the second component’s type depends on that boolean:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;BoolDependent&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; Bool &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-agda&quot;&gt;Set&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;BoolDependent true  &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; ℕ      &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- If true, second component is a natural number&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;BoolDependent false &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; String &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- If false, second component is a string&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- The dependent sum type:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;BoolDependentPair&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-agda&quot;&gt;Set&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;BoolDependentPair &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; Σ[ b ∈ Bool ] BoolDependent b
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A value of this type could be &lt;code&gt;true , 42&lt;&#x2F;code&gt; (boolean true paired with natural number 42) or &lt;code&gt;false , &quot;hello&quot;&lt;&#x2F;code&gt; (boolean false paired with string “hello”).
The type of the second component depends on the value of the first component.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;A ≡ B&lt;&#x2F;code&gt; (equality type) is inhabited by a proof of &lt;code&gt;A&lt;&#x2F;code&gt; being equal to &lt;code&gt;B&lt;&#x2F;code&gt; — corresponds to &lt;code&gt;A&lt;&#x2F;code&gt; and &lt;code&gt;B&lt;&#x2F;code&gt; being the same.
Note that &lt;code&gt;≡&lt;&#x2F;code&gt; is the symbol for equality.&lt;&#x2F;p&gt;
&lt;p&gt;For example, we can prove that &lt;code&gt;2 + 2 ≡ 4&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;proof-2+2=4&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-agda&quot;&gt;2&lt;&#x2F;span&gt; + &lt;span class=&quot;z-constant z-numeric z-agda&quot;&gt;2&lt;&#x2F;span&gt; ≡ &lt;span class=&quot;z-constant z-numeric z-agda&quot;&gt;4&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;proof-2+2=4 &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; refl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code&gt;refl&lt;&#x2F;code&gt; (reflexivity) is the constructor that proves any term is equal to itself.
Since &lt;code&gt;2 + 2&lt;&#x2F;code&gt; evaluates to &lt;code&gt;4&lt;&#x2F;code&gt; definitionally in Agda,
we can use &lt;code&gt;refl&lt;&#x2F;code&gt; to prove they are equal. The type &lt;code&gt;2 + 2 ≡ 4&lt;&#x2F;code&gt; is inhabited by the proof &lt;code&gt;refl&lt;&#x2F;code&gt;,
which serves as evidence that this equality holds.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To learn Agda, a really nice resource is not only the &lt;a href=&quot;https:&#x2F;&#x2F;agda.readthedocs.io&#x2F;&quot;&gt;&lt;strong&gt;Agda documentation&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
but also the &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;certainty-by-construction&quot;&gt;&lt;strong&gt;Certainty by Construction: Software and Mathematics in Agda&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
book by Sandy Maguire.&lt;&#x2F;p&gt;
&lt;p&gt;I also suggest this quick introduction to Agda:&lt;&#x2F;p&gt;
&lt;style&gt;
  .embed-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    max-width: 100%;
  }
  .embed-container iframe,
  .embed-container object,
  .embed-container embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
&lt;&#x2F;style&gt;
&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe
    src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;OSDgVxdP20g&quot;
    frameborder=&quot;0&quot;
    allowfullscreen
  &gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Now, let’s prove that the &lt;strong&gt;set of real numbers is &lt;em&gt;uncountable&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;.
I’m gonna dump the whole Agda code here,
then explain the parts that are not obvious.
To run the code (which is the same as proving the code or theorem, since the code is the theorem, a.k.a Curry-Howard correspondence),
dump the code into a file named &lt;code&gt;CantorDiagonalReals.agda&lt;&#x2F;code&gt;.
You can run the code by installing Agda and running &lt;code&gt;agda CantorDiagonalReals.agda&lt;&#x2F;code&gt;.
Agda will silently compile the code and if nothing is printed,
it means the code (and the theorem) is correct (or true).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;module&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-agda&quot;&gt;CantorDiagonalReals&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;where&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;open import&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-agda&quot;&gt;Data.Nat&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;using&lt;&#x2F;span&gt; (ℕ; zero; suc)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;open import&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-agda&quot;&gt;Data.Bool&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;using&lt;&#x2F;span&gt; (Bool; true; false)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;open import&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-agda&quot;&gt;Data.Empty&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;using&lt;&#x2F;span&gt; (⊥)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;open import&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-agda&quot;&gt;Data.Product&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;using&lt;&#x2F;span&gt; (Σ; _,_; _×_; Σ-&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;syntax&lt;&#x2F;span&gt;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;open import&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-agda&quot;&gt;Relation.Binary.PropositionalEquality&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;using&lt;&#x2F;span&gt; (_≡_; refl; cong; trans)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;open import&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-agda&quot;&gt;Relation.Nullary&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;using&lt;&#x2F;span&gt; (¬_)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- A real number in (0,1) represented as an infinite sequence of binary digits&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;Real&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-agda&quot;&gt;Set&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;Real &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; ℕ &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Bool  &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- Each position has a digit 0 or 1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- Abbreviation for inequality&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;_≢_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; {A &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-agda&quot;&gt;Set&lt;&#x2F;span&gt;} &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; A &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; A &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-agda&quot;&gt;Set&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;x ≢ y &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; ¬ (x ≡ y)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- Helper to flip a bit&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;flip&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; Bool &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Bool
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip true &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; false
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip false &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; true
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- Proof that flip always changes the bit&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;flip-changes&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; (b &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; Bool) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; b ≢ flip b
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip-changes true ()
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip-changes false ()
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- The diagonal argument: no enumeration of reals in (0,1) exists&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;no-enumeration&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; (f &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ℕ &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Real) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Σ[ r ∈ Real ] ((n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ℕ) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; f n ≢ r)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;no-enumeration f &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; diagonal , proof
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;where&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- Construct the diagonal number by flipping the nth digit of the nth number&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;diagonal&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; Real
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;    diagonal n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; flip (f n n)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- Proof that diagonal differs from every f n&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;proof&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; (n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ℕ) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; f n ≢ diagonal
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;    proof n eq &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; contradiction
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;      &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;where&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- If f n = diagonal, then at position n:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- (f n n) = (diagonal n) = flip (f n n)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;same-at-n&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; f n n ≡ diagonal n
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        same-at-n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; cong (&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;λ&lt;&#x2F;span&gt; r &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; r n) eq
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- But diagonal n = flip (f n n) by definition&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;diagonal-def&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; diagonal n ≡ flip (f n n)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        diagonal-def &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; refl
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- So f n n = flip (f n n)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;self-eq-flip&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; f n n ≡ flip (f n n)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        self-eq-flip &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; trans same-at-n diagonal-def
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- This contradicts the fact that flip always changes the bit&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;contradiction&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ⊥
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        contradiction &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; flip-changes (f n n) self-eq-flip
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s break down this proof step by step:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-real-number-representation&quot;&gt;1. Real number representation&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;Real&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-agda&quot;&gt;Set&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;Real &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; ℕ &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Bool  &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- Each position has a digit 0 or 1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We represent real numbers in the interval $(0,1)$ as infinite sequences of binary digits.
This will make the proof easier to follow without losing any generality.
A real number is a function from natural numbers to booleans, where each position gives us a binary digit.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-the-flip-function&quot;&gt;2. The flip function&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;flip&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; Bool &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Bool
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip true &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; false
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip false &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; true
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;flip-changes&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; (b &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; Bool) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; b ≢ flip b
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip-changes true ()
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip-changes false ()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;flip&lt;&#x2F;code&gt; function switches &lt;code&gt;true&lt;&#x2F;code&gt; to &lt;code&gt;false&lt;&#x2F;code&gt; and vice versa.
The &lt;code&gt;flip-changes&lt;&#x2F;code&gt; proof shows that flipping a boolean always produces a different boolean.
The &lt;code&gt;()&lt;&#x2F;code&gt; pattern means “impossible case” — there’s no way &lt;code&gt;true ≡ false&lt;&#x2F;code&gt; or &lt;code&gt;false ≡ true&lt;&#x2F;code&gt;.
It is called the &lt;a href=&quot;https:&#x2F;&#x2F;agda.readthedocs.io&#x2F;en&#x2F;stable&#x2F;language&#x2F;function-definitions.html#absurd-patterns&quot;&gt;&lt;strong&gt;absurd pattern&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-the-main-theorem&quot;&gt;3. The main theorem&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;no-enumeration&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; (f &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ℕ &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Real) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Σ[ r ∈ Real ] ((n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ℕ) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; f n ≢ r)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This says: “For any supposed enumeration &lt;code&gt;f&lt;&#x2F;code&gt; of real numbers, there exists a real number &lt;code&gt;r&lt;&#x2F;code&gt; that differs from every number in the enumeration.”
This is exactly Cantor’s &lt;strong&gt;diagonalization argument&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-the-diagonal-construction&quot;&gt;4. The diagonal construction&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;diagonal&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; Real
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;diagonal n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; flip (f n n)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We construct our diagonal number by taking the $n$-th digit of the $n$-th number in the enumeration and flipping it.
So &lt;code&gt;diagonal 0 = flip (f 0 0)&lt;&#x2F;code&gt;, &lt;code&gt;diagonal 1 = flip (f 1 1)&lt;&#x2F;code&gt;, etc.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-the-proof-of-difference&quot;&gt;5. The proof of difference&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;proof&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; (n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ℕ) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; f n ≢ diagonal
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;proof n eq &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; contradiction
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For any number &lt;code&gt;f n&lt;&#x2F;code&gt; in our enumeration, we prove it cannot be equal to our diagonal number.
If they were equal (&lt;code&gt;eq : f n ≡ diagonal&lt;&#x2F;code&gt;), we derive a contradiction.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-the-contradiction&quot;&gt;6. The contradiction&lt;&#x2F;h3&gt;
&lt;p&gt;Now let’s examine the contradiction step by step.
We assume we have an equality &lt;code&gt;eq : f n ≡ diagonal&lt;&#x2F;code&gt; and derive a contradiction:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;same-at-n&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; f n n ≡ diagonal n
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;same-at-n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; cong (&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;λ&lt;&#x2F;span&gt; r &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; r n) eq
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This uses &lt;strong&gt;congruence&lt;&#x2F;strong&gt; (&lt;code&gt;cong&lt;&#x2F;code&gt;) to say: if two functions are equal (&lt;code&gt;f n ≡ diagonal&lt;&#x2F;code&gt;),
then applying them to the same argument (&lt;code&gt;n&lt;&#x2F;code&gt;) gives equal results.
So &lt;code&gt;f n n ≡ diagonal n&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;λ r → r n&lt;&#x2F;code&gt; is a &lt;strong&gt;lambda function&lt;&#x2F;strong&gt; (anonymous function) that takes a function &lt;code&gt;r&lt;&#x2F;code&gt; and applies it to the argument &lt;code&gt;n&lt;&#x2F;code&gt;.
It’s like saying “given any function &lt;code&gt;r&lt;&#x2F;code&gt;, apply it to &lt;code&gt;n&lt;&#x2F;code&gt;”.
So &lt;code&gt;cong (λ r → r n) eq&lt;&#x2F;code&gt; means: “if &lt;code&gt;f n ≡ diagonal&lt;&#x2F;code&gt;,
then applying the operation “apply to &lt;code&gt;n&lt;&#x2F;code&gt;” to both sides gives &lt;code&gt;f n n ≡ diagonal n&lt;&#x2F;code&gt;“.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;diagonal-def&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; diagonal n ≡ flip (f n n)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;diagonal-def &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; refl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is just the definition of our diagonal function unfolding.
Since &lt;code&gt;diagonal n = flip (f n n)&lt;&#x2F;code&gt; by definition,
we can prove this equality with &lt;code&gt;refl&lt;&#x2F;code&gt; (reflexivity).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;self-eq-flip&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; f n n ≡ flip (f n n)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;self-eq-flip &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; trans same-at-n diagonal-def
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we chain the equalities using &lt;strong&gt;transitivity&lt;&#x2F;strong&gt; (&lt;code&gt;trans&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We know &lt;code&gt;f n n ≡ diagonal n&lt;&#x2F;code&gt; (from &lt;code&gt;same-at-n&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;We know &lt;code&gt;diagonal n ≡ flip (f n n)&lt;&#x2F;code&gt; (from &lt;code&gt;diagonal-def&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Therefore &lt;code&gt;f n n ≡ flip (f n n)&lt;&#x2F;code&gt; (by transitivity)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But this is &lt;strong&gt;impossible&lt;&#x2F;strong&gt;!
We’re saying a boolean equals its own flip.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;contradiction&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ⊥
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;contradiction &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; flip-changes (f n n) self-eq-flip
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, we use our &lt;code&gt;flip-changes&lt;&#x2F;code&gt; lemma,
which proves that &lt;code&gt;(b : Bool) → b ≢ flip b&lt;&#x2F;code&gt;.
Since we have a proof that &lt;code&gt;f n n ≡ flip (f n n)&lt;&#x2F;code&gt; (which contradicts &lt;code&gt;flip-changes&lt;&#x2F;code&gt;),
we can derive the bottom type &lt;code&gt;⊥&lt;&#x2F;code&gt;
(which is uninhabited, so it is false&#x2F;contradiction).&lt;&#x2F;p&gt;
&lt;p&gt;This elegant proof captures the essence of Cantor’s diagonalization:
&lt;strong&gt;we construct a number that systematically differs from every number in any proposed enumeration,
proving that &lt;em&gt;no such enumeration can exist&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I hope you enjoyed this journey into the beauty of mathematics.
These self-referential paradoxes underlie the
absurd dichotomy of truth and provability,
while also revealing the profound beauty of mathematics’ uncomprehensiveness.&lt;&#x2F;p&gt;
&lt;p&gt;I often think that mathematics is the language of the universe.
Yet, given the incompleteness of mathematics,
will it ever be able to describe the universe?
Or will the universe be engulfed by a mist of forever unknowable mysteries?&lt;&#x2F;p&gt;
&lt;p&gt;Like Hilbert, I am left yelling at the void:
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ignoramus_et_ignorabimus&quot;&gt;“Wir müssen wissen, wir werden wissen.”&lt;&#x2F;a&gt;,
which translates to “We must know, we will know.”&lt;&#x2F;p&gt;
&lt;footer class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-pairing-function&quot;&gt;
&lt;p&gt;This is called a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pairing_function&quot;&gt;&lt;strong&gt;pairing function&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, and specifically the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cantor_pairing_function&quot;&gt;&lt;strong&gt;Cantor pairing function&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. &lt;a href=&quot;#fr-pairing-function-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-godel-incompleteness&quot;&gt;
&lt;p&gt;If you really want to dive deep into the details of Gödel’s incompleteness theorem, check out &lt;a href=&quot;https:&#x2F;&#x2F;www.logicmatters.net&#x2F;igt&quot;&gt;&lt;strong&gt;Gödel Without (Too Many) Tears&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; by the logician Peter Smith. &lt;a href=&quot;#fr-godel-incompleteness-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-peano&quot;&gt;
&lt;p&gt;Another rabbit hole to dive: &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Peano_arithmetic&quot;&gt;&lt;strong&gt;Peano’s arithmetic&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. &lt;a href=&quot;#fr-peano-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;footer&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Randomness in computation: sprinkle a little bit of randomness, and voilà!</title>
        <published>2025-04-07T06:57:00+00:00</published>
        <updated>2025-04-07T06:57:00+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/randomness/" type="text/html"/>
        <id>https://storopoli.com/blog/randomness/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;randomness&#x2F;randomness-meme.jpg&quot; alt=&quot;Just sprinkle a little bit of randomness, and voilà!&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes when you deal with complicated computations,
either because of the input size or the complexity of the computation,
you cannot get an answer in any feasible amount of time,
no matter how much computational power you have.&lt;&#x2F;p&gt;
&lt;p&gt;When the limits of tractability are reached,
we can give up deterministic computation and embrace &lt;strong&gt;randomness&lt;&#x2F;strong&gt;
to get an answer in a much more reasonable time.&lt;&#x2F;p&gt;
&lt;p&gt;This is the case of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Monte_Carlo_method&quot;&gt;Monte Carlo methods&lt;&#x2F;a&gt;,
which are a class of algorithms that use &lt;strong&gt;random sampling&lt;&#x2F;strong&gt;
to solve mathematical problems.
And, of course, like everything nice in math and computer science,
it has the &lt;strong&gt;Von Neumann’s fingerprints&lt;&#x2F;strong&gt; all over it.
Alas, that is a story for another post, that I already covered in
&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;von-neumann&#x2F;&quot;&gt;“Von Neumann: the Sharpest Mind of the 20th Century”&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I was recently skimming over a textbook that I used to use
in my undergraduate course on probability theory (Mitzenmacher and Upfal’s
“Probability and Computing”&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-pdf-1&quot;&gt;&lt;a href=&quot;#fn-pdf&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, see references below),
and I stumbled upon a very interesting algorithm for calculating the &lt;strong&gt;median&lt;&#x2F;strong&gt; of a list.&lt;&#x2F;p&gt;
&lt;p&gt;By the way, this textbook has one of the &lt;strong&gt;best covers&lt;&#x2F;strong&gt; in math textbooks.
It is Alice in Wonderland dealing with a combinatorial explosion,
see it below:&lt;&#x2F;p&gt;


&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;storopoli.com&amp;#x2F;processed_images&amp;#x2F;probability-and-computing.c46dbbb24f491e7b.jpg&quot; alt=&quot;Probability and Computing: Randomization and Probabilistic Techniques in Algorithms and Data Analysis 2nd Edition&quot; &#x2F;&gt;
&lt;p&gt;The algorithm uses sampling to probabilistically find the &lt;strong&gt;median&lt;&#x2F;strong&gt;,
and uses &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Chebyshev&amp;#x27;s_inequality&quot;&gt;Chebyshev’s inequality&lt;&#x2F;a&gt;,
an upper bound on the probability of deviation of a random variable from its mean.
Since it is a probabilistic algorithm,
it finds the median in $O(n)$ (linear time) with probability
$1 - n^{-\frac{1}{4}}$ (close to $1$ for large $n$).
Note that for any deterministic algorithm to find the median,
it needs to sort the list, which takes $O(n \log n)$ (linearithmic time)
on average or $O(n^2)$ (quadratic time) in the worst case&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-quicksort-1&quot;&gt;&lt;a href=&quot;#fn-quicksort&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
You can always iterate and run the algorithm until you get a result,
but now the runtime is &lt;strong&gt;non-deterministic&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The nice thing about the algorithm is that Chebyshev’s inequality
does not makes assumptions about the distribution of the variable,
just that it has a &lt;strong&gt;finite variance&lt;&#x2F;strong&gt;.
This is excellent since we can move away from the &lt;strong&gt;lala-land&lt;&#x2F;strong&gt; of
normal distributions assumptions that everything is a Gaussian bell curve&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-bayesian-1&quot;&gt;&lt;a href=&quot;#fn-bayesian&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chebyshev-s-inequality&quot;&gt;Chebyshev’s Inequality&lt;&#x2F;h2&gt;
&lt;p&gt;Chebyshev’s inequality provides an upper bound on the probability
of deviation of a random variable (with finite variance) from its mean.&lt;&#x2F;p&gt;
&lt;p&gt;The inequality is given by:&lt;&#x2F;p&gt;
&lt;p&gt;$$
P(|X - \mu| \geq k \sigma) \leq \frac{1}{k^2}
$$&lt;&#x2F;p&gt;
&lt;p&gt;where $X$ is a random variable, $\mu$ is the mean,
$\sigma$ is the standard deviation, and $k$ is a positive real number.&lt;&#x2F;p&gt;
&lt;p&gt;This is a consequence of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Markov&amp;#x27;s_inequality&quot;&gt;Markov’s inequality&lt;&#x2F;a&gt;,
and can be derived using simple algebra.
The reader that is interested in the proof or more details,
see the Wikipedia pages linked above.&lt;&#x2F;p&gt;
&lt;p&gt;Because Chebyshev’s inequality can be applied to any distribution with finite mean and variance,
it generally gives &lt;strong&gt;looser bounds&lt;&#x2F;strong&gt; compared to what we might get if we knew more about the specific distribution.
Here’s a table showing how much of the distribution’s values must lie within $k$ standard deviations of the mean:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;$k$&lt;&#x2F;th&gt;&lt;th&gt;Min. % within $k$ standard deviations&lt;&#x2F;th&gt;&lt;th&gt;Max. % beyond $k$ standard deviations&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;0%&lt;&#x2F;td&gt;&lt;td&gt;100%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;$\sqrt{2}$&lt;&#x2F;td&gt;&lt;td&gt;50%&lt;&#x2F;td&gt;&lt;td&gt;50%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;75%&lt;&#x2F;td&gt;&lt;td&gt;25%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;88.8889%&lt;&#x2F;td&gt;&lt;td&gt;11.1111%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;93.75%&lt;&#x2F;td&gt;&lt;td&gt;6.25%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;96%&lt;&#x2F;td&gt;&lt;td&gt;4%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;99%&lt;&#x2F;td&gt;&lt;td&gt;1%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;For example, while we know that for a normal distribution about 68% of values lie within one standard deviation,
Chebyshev only tells us that &lt;strong&gt;at least&lt;&#x2F;strong&gt; 0% must lie within one standard deviation!
This is the price we pay for having a bound that works on any distribution.
Yet, it is still a &lt;strong&gt;very useful bound&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;randomized-median&quot;&gt;Randomized Median&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, now let’s see in practice how this works.
Below is the algorithm for finding the median of a list,
as described in algorithm 3.1 in the “Probability and Computing” textbook:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;&#x2F;strong&gt; A set $S$ of $n$ elements over a totally ordered universe.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;&#x2F;strong&gt; The median element of $S$, denoted by $m$.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Pick a (multi-)set $R$ of $\lceil n^{\frac{3}{4}} \rceil$ elements in $S$, chosen independently and uniformly at random with replacement.&lt;&#x2F;li&gt;
&lt;li&gt;Sort the set $R$.&lt;&#x2F;li&gt;
&lt;li&gt;Let $d$ be the $\bigg(\left\lfloor \frac{1}{2}n^{\frac{3}{4}} - \sqrt{n} \right\rfloor\bigg)$th smallest element in the sorted set $R$.&lt;&#x2F;li&gt;
&lt;li&gt;Let $u$ be the $\bigg(\left\lceil \frac{1}{2}n^{\frac{3}{4}} + \sqrt{n} \right\rceil\bigg)$th smallest element in the sorted set $R$.&lt;&#x2F;li&gt;
&lt;li&gt;By comparing every element in $S$ to $d$ and $u$, compute the set $C = \big\{x \in S : d \leq x \leq u \big\}$ and the numbers $\ell_d = \bigg| \big\{x \in S : x &amp;lt; d \big\}\bigg|$ and $\ell_u = \bigg| \big\{x \in S : x &amp;gt; u \big\}\bigg|$.&lt;&#x2F;li&gt;
&lt;li&gt;If $\ell_d &amp;gt; n&#x2F;2$ or $\ell_u &amp;gt; n&#x2F;2$ then FAIL.&lt;&#x2F;li&gt;
&lt;li&gt;If $\big|C\big| \leq 4n^{\frac{3}{4}}$ then sort the set $C$, otherwise FAIL.&lt;&#x2F;li&gt;
&lt;li&gt;Output the $\big(\lfloor \frac{n}{2} \rfloor - \ell_d + 1\big)$th element in the sorted order of $C$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;As you can see, the algorithm starts by sampling a set of elements from the list,
sorting them, and then using the sorted elements to find the median.
How it finds the median is by using the set $C$,
which is the set of elements in $S$ that are between $d$ and $u$,
where $d$ is the lower bound and $u$ is the upper bound of the
sampled set $R$.&lt;&#x2F;p&gt;
&lt;p&gt;The algorithm’s brilliance lies in its &lt;strong&gt;probabilistic guarantees&lt;&#x2F;strong&gt;.
It can fail in three ways:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Too few sampled elements are less than the true median&lt;&#x2F;li&gt;
&lt;li&gt;Too few sampled elements are greater than the true median&lt;&#x2F;li&gt;
&lt;li&gt;The set $C$ becomes too large to sort efficiently&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;However, the probability of any of these failures occurring is &lt;strong&gt;remarkably small&lt;&#x2F;strong&gt;: less than $n^{-\frac{1}{4}}$.
This means that as the input size grows, the chance of failure becomes increasingly negligible:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;For n = 10,000: failure probability ≤ 0.1&lt;&#x2F;li&gt;
&lt;li&gt;For n = 1,000,000: failure probability ≤ 0.032&lt;&#x2F;li&gt;
&lt;li&gt;For n = 100,000,000: failure probability ≤ 0.01&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When the algorithm doesn’t fail (which is the vast majority of the time),
it is guaranteed to find the &lt;strong&gt;exact median&lt;&#x2F;strong&gt; in linear time.
This is achieved by carefully choosing the sample size, $n^{\frac{3}{4}}$, and
the buffer zone around the median, $\sqrt{n}$, to balance between:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Having enough samples to make failure unlikely&lt;&#x2F;li&gt;
&lt;li&gt;Keeping the set $C$ small enough to sort quickly&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The algorithm provides two important guarantees:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Correctness&lt;&#x2F;strong&gt;: The algorithm is guaranteed to either FAIL or return the true median.
This is proven using Chebyshev’s inequality in two steps.
First, we show that the true median $m$ will be in set $C$ with high probability:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Let $Y_1$ be the count of sampled elements ≤ $m$ in $R$
&lt;ul&gt;
&lt;li&gt;When $Y_1 &amp;lt; \frac{1}{2}n^{\frac{3}{4}} - \sqrt{n}$, we call this event $\mathcal{E}_1$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Let $Y_2$ be the count of sampled elements ≥ $m$ in $R$
&lt;ul&gt;
&lt;li&gt;When $Y_2 &amp;lt; \frac{1}{2}n^{\frac{3}{4}} - \sqrt{n}$, we call this event $\mathcal{E}_2$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;When $|C| &amp;gt; 4n^{\frac{3}{4}}$, we call this event $\mathcal{E}_3$&lt;&#x2F;li&gt;
&lt;li&gt;By Chebyshev’s inequality, each event has probability at most $\frac{1}{4}n^{-\frac{1}{4}}$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Second, we show that when $m$ is in $C$, we find it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$\ell_d$ counts elements &amp;lt; $d$, so there are exactly $\big\lfloor \frac{n}{2} \big\rfloor - \ell_d$ elements between $d$ and $m$&lt;&#x2F;li&gt;
&lt;li&gt;Therefore, $m$ must be the $\bigg(\big\lfloor \frac{n}{2} \big\rfloor - \ell_d + 1\bigg)$th element in the sorted $C$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Linear Time&lt;&#x2F;strong&gt;: The algorithm runs in $O(n)$ time when it succeeds because:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Sampling and sorting $R$ takes $O\left(n^\frac{3}{4} \log n\right)$ time&lt;&#x2F;li&gt;
&lt;li&gt;Comparing all elements to $d$ and $u$ takes $O(n)$ time&lt;&#x2F;li&gt;
&lt;li&gt;Sorting $C$ takes $O\left(n^\frac{3}{4} \log n\right)$ time since $|C| \leq 4n^\frac{3}{4}$&lt;&#x2F;li&gt;
&lt;li&gt;All other operations are constant time&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;why-these-guarantees-work&quot;&gt;Why These Guarantees Work&lt;&#x2F;h3&gt;
&lt;p&gt;The key to understanding why this algorithm works lies in analyzing the &lt;strong&gt;probability of failure&lt;&#x2F;strong&gt;.
Let’s look at how we bound the probability of having too few samples below the median (event $\mathcal{E}_1$):&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For each sampled element $i$, define an indicator variable $X_i$ where:
$$
X_i = 1 \text{ if the $i$th sample is } \leq \text{ median}
$$
$$
X_i = 0 \text{ otherwise}
$$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Since we sample with replacement, the $X_i$ are independent. And since there are
$\frac{n-1}{2} + 1$ elements ≤ median in $S$, we have:
$$
P(X_i = 1) = \frac{\frac{n-1}{2} + 1}{n} = \frac{1}{2} + \frac{1}{2n}
$$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Let $Y_1 = \sum_{i=1}^{n^{3&#x2F;4}} X_i$ count samples ≤ median. This is a binomial random variable with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Expected value: $E[Y_1] = n^{\frac{3}{4}}\left(\frac{1}{2} + \frac{1}{2n}\right)$&lt;&#x2F;li&gt;
&lt;li&gt;Variance: $Var[Y_1] &amp;lt; \frac{1}{4}n^{\frac{3}{4}}$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Using Chebyshev’s inequality:
$$
P \left(Y_1 &amp;lt; \frac{1}{2}n^{\frac{3}{4}} - \sqrt{n} \right) \leq \frac{Var[Y_1]}{n} &amp;lt; \frac{1}{4}n^{-\frac{1}{4}}
$$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This shows that both events $\mathcal{E}_1$ and $\mathcal{E}_2$ have probability at most $\frac{1}{4}n^{-\frac{1}{4}}$,
and also that $\mathcal{E}_3$ has probability at most $\frac{1}{4}n^{-\frac{1}{4}}$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
P(\mathcal{E}_1) \leq P(\mathcal{E}_2 + \mathcal{E}_3) \leq \frac{1}{2}n^{-\frac{1}{4}}
$$&lt;&#x2F;p&gt;
&lt;p&gt;All these events combined demonstrate that the algorithm rarely fails: the probability of having too few samples
on either side of the median decreases as $n^{-\frac{1}{4}}$, becoming negligible for large $n$.
If higher reliability is needed, you can simply run the algorithm multiple times,
as each run is independent.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;haskell-implementation&quot;&gt;Haskell Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;I implemented the algorithm in &lt;strong&gt;Haskell&lt;&#x2F;strong&gt;,
because I stare at &lt;strong&gt;Rust&lt;&#x2F;strong&gt; code 8+ hours a day,
and I want programming in a language that
“if it compiles, it is guaranteed to run”.
The only other language apart from Rust that has this property,
and some might say that it is the only language that has this property,
is Haskell.&lt;&#x2F;p&gt;
&lt;p&gt;The code can be found on GitHub at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;storopoli&#x2F;randomized-median&quot;&gt;&lt;code&gt;storopoli&#x2F;randomized-median&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So let’s first go over the vanilla, classical, deterministic median algorithm:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;median&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Ord&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Fractional&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;) &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; [&lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;] &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Maybe&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;&#x2F;span&gt;median &lt;span class=&quot;z-constant z-language z-empty-list z-haskell&quot;&gt;[]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Nothing&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;median xs &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; First convert list to array for O(1) random access
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;let&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; length xs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      arr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; listArray (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;1&lt;&#x2F;span&gt;) xs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Sort the array elements
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      sorted &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; sort (elems arr)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      sortedArr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; listArray (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;1&lt;&#x2F;span&gt;) sorted
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      mid &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-function z-infix z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-entity z-haskell&quot;&gt;`&lt;&#x2F;span&gt;div&lt;span class=&quot;z-punctuation z-definition z-entity z-haskell&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;   &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;if&lt;&#x2F;span&gt; odd n
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;then&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Just&lt;&#x2F;span&gt; (sortedArr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;!&lt;&#x2F;span&gt; mid)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Just&lt;&#x2F;span&gt; ((sortedArr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;!&lt;&#x2F;span&gt; (mid &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;1&lt;&#x2F;span&gt;) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;+&lt;&#x2F;span&gt; sortedArr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;!&lt;&#x2F;span&gt; mid) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;2&lt;&#x2F;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First we define a function signature for the median function:
it takes a list or elements of some type that is an instance of both the &lt;code&gt;Ord&lt;&#x2F;code&gt; type class,
and the &lt;code&gt;Fractional&lt;&#x2F;code&gt; type class.
This is because we must assure the Haskell compiler that the elements of the list can be
ordered and that we can perform fractional arithmetic on them.
It returns a &lt;code&gt;Maybe a&lt;&#x2F;code&gt; because the median is not defined for empty lists.
The &lt;code&gt;Maybe&lt;&#x2F;code&gt; type is an instance of the &lt;code&gt;Monad&lt;&#x2F;code&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-monad-1&quot;&gt;&lt;a href=&quot;#fn-monad&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; type class,
which allows us to use the &lt;code&gt;&amp;gt;&amp;gt;=&lt;&#x2F;code&gt; operator to chain computations that may fail.
It can take two values &lt;code&gt;Nothing&lt;&#x2F;code&gt; or &lt;code&gt;Just a&lt;&#x2F;code&gt;, where &lt;code&gt;a&lt;&#x2F;code&gt; is the type of the elements of the list.&lt;&#x2F;p&gt;
&lt;p&gt;For the case of an empty list, we return &lt;code&gt;Nothing&lt;&#x2F;code&gt;.
For the case of a non-empty list, we convert the list to an array,
sort the array, and then find the median,
returning the median as a &lt;code&gt;Just&lt;&#x2F;code&gt; value.&lt;&#x2F;p&gt;
&lt;p&gt;Now, let’s implement the randomized median algorithm:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;randomizedMedian&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Ord&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;) &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; [&lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;] &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Int&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Maybe&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;&#x2F;span&gt;randomizedMedian &lt;span class=&quot;z-constant z-language z-empty-list z-haskell&quot;&gt;[]&lt;&#x2F;span&gt; _ &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Nothing&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;randomizedMedian xs seed &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;let&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; length xs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      arr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; listArray (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;1&lt;&#x2F;span&gt;) xs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Step 1: Sample n^(3&#x2F;4) elements with replacement
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      sampleSize &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; ceiling (fromIntegral n ** (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;3&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;4&lt;&#x2F;span&gt;))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      gen &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; mkStdGen seed
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      indices &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; take sampleSize &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; randomRs (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;1&lt;&#x2F;span&gt;) gen
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Step 2: Sort the sample
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      sample &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; sort [arr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;!&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;|&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; indices]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      sampleArr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; listArray (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; length sample &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;1&lt;&#x2F;span&gt;) sample
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Step 3: Find d (the lower bound element)
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      dIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; floor (fromIntegral n ** (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;3&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;4&lt;&#x2F;span&gt;) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;2&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; sqrt (fromIntegral n))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      d &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;if&lt;&#x2F;span&gt; dIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt; &amp;amp;&amp;amp; dIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; length sample
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;          &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;then&lt;&#x2F;span&gt; sampleArr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;!&lt;&#x2F;span&gt; dIndex
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;          &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;else&lt;&#x2F;span&gt; error &lt;span class=&quot;z-string z-quoted z-double z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Invalid d index&lt;span class=&quot;z-punctuation z-definition z-string z-end z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Step 4: Find u (the upper bound element)
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      uIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; floor (fromIntegral n ** (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;3&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;4&lt;&#x2F;span&gt;) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;2&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;+&lt;&#x2F;span&gt; sqrt (fromIntegral n))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      u &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;if&lt;&#x2F;span&gt; uIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt; &amp;amp;&amp;amp; uIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; length sample
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;          &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;then&lt;&#x2F;span&gt; sampleArr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;!&lt;&#x2F;span&gt; uIndex
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;          &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;else&lt;&#x2F;span&gt; error &lt;span class=&quot;z-string z-quoted z-double z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Invalid u index&lt;span class=&quot;z-punctuation z-definition z-string z-end z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Step 5: Compute set C and counts
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      ld &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; length &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; filter (&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; d) xs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      lu &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; length &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; filter (&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; u) xs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      c &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; sort &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; filter (&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;\&lt;&#x2F;span&gt;x &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; d &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt; x &amp;amp;&amp;amp; x &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt; u) xs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Step 6 &amp;amp; 7: Check failure conditions
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      halfN &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-function z-infix z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-entity z-haskell&quot;&gt;`&lt;&#x2F;span&gt;div&lt;span class=&quot;z-punctuation z-definition z-entity z-haskell&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;   &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;in&lt;&#x2F;span&gt; ( &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;if&lt;&#x2F;span&gt; ((ld &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; halfN &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;||&lt;&#x2F;span&gt; lu &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; halfN) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;||&lt;&#x2F;span&gt; (length c &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;4&lt;&#x2F;span&gt; * sampleSize)) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;||&lt;&#x2F;span&gt; null c
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;          &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;then&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Nothing&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;          &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;else&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;            ( &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;let&lt;&#x2F;span&gt; targetIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; halfN &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; ld
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;               &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;if&lt;&#x2F;span&gt; targetIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt; &amp;amp;&amp;amp; targetIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; length c
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;                    &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;then&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;                      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Step 8: Output the median
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;                      &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Just&lt;&#x2F;span&gt; (c &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;!!&lt;&#x2F;span&gt; targetIndex)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;                    &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;else&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;                      &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Nothing&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;            )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’ve added comments to the code with respect to the algorithm steps.
First, the function signature is almost the same as the deterministic median function.
There are two differences:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The elements of the list does not need to be a &lt;code&gt;Fractional&lt;&#x2F;code&gt; type.&lt;&#x2F;li&gt;
&lt;li&gt;We now take an additional parameter, &lt;code&gt;seed&lt;&#x2F;code&gt;,
which is the seed for the random number generator.
This is needed since we are using a random number generator to sample the elements from the list.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;As before, for the case of an empty list, we return &lt;code&gt;Nothing&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For the case of a non-empty list, we first convert the list to an array,
and then sample &lt;code&gt;n^(3&#x2F;4)&lt;&#x2F;code&gt; elements from the list with replacement.
We use the &lt;a href=&quot;https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;random-1.1&#x2F;docs&#x2F;System-Random.html#v:randomR&quot;&gt;&lt;code&gt;randomRs&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
function to generate a list of random indices,
it generates an infinite list of random values within the specified range
(in this case, from &lt;code&gt;0 to n-1&lt;&#x2F;code&gt;),
hence sampling with replacement.
Then, we take the first &lt;code&gt;n^(3&#x2F;4)&lt;&#x2F;code&gt; elements from the list.
Next, we sort the sample and convert it to an array.&lt;&#x2F;p&gt;
&lt;p&gt;Next, we find the lower and upper bounds of the sample.
We do this by finding the index of the element at position &lt;code&gt;n^(3&#x2F;4)&#x2F;2 - sqrt(n)&lt;&#x2F;code&gt;
and &lt;code&gt;n^(3&#x2F;4)&#x2F;2 + sqrt(n)&lt;&#x2F;code&gt; in the sorted sample.
We then take the element at these indices as the lower and upper bounds.&lt;&#x2F;p&gt;
&lt;p&gt;Then, we compute the set $C$ and the counts $\ell_d$ and $\ell_u$.
We do this by filtering the list with the lower and upper bounds.&lt;&#x2F;p&gt;
&lt;p&gt;Next, we check if the set $C$ is too large to sort efficiently.
If it is, we return &lt;code&gt;Nothing&lt;&#x2F;code&gt;.
Otherwise, we sort the set $C$ and find the median.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;results&quot;&gt;Results&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s the result by running the algorithm against a randomly shuffled list of contiguous integers from 1 to 10,000,001
using the &lt;strong&gt;magical number 42&lt;&#x2F;strong&gt; as the seed of our random number generator.
As you can see both the exact and randomized median algorithms find the right
median value:&lt;&#x2F;p&gt;
&lt;p&gt;$$ \frac{10,000,001}{2} = 5,000,001 $$&lt;&#x2F;p&gt;
&lt;p&gt;since $10,000,001$ is odd, the median is the element at position $\frac{10,000,001}{2} = 5,000,001$.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;===========================&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Testing&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; with 10_000_001 shuffled elements&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Exact&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; median calculation:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Result:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 5000001.0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Time:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 18.906611 seconds&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Randomized&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; approximate median calculation:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Result:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 5000001.0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Time:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 1.095511 seconds&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Error&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; percentage: 0.0000&lt;span class=&quot;z-meta z-group z-expansion z-job z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-job z-shell&quot;&gt;%&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Speedup&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; factor: 17.26x&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The randomized median algorithm for the case of $n = 10,000,001$
is at least &lt;strong&gt;17x faster&lt;&#x2F;strong&gt; than the exact median calculation.
That is an &lt;strong&gt;order of magnitude improvement&lt;&#x2F;strong&gt; over the deterministic median algorithm.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I love the inequalities of the &lt;strong&gt;Russian school of probability&lt;&#x2F;strong&gt;,
Markov, Chebyshev, etc.,
since it does not depend on any underlying distributional assumptions.
Chebyshev’s inequality depends on the random variable having a finite mean and variance,
and Markov’s inequality depends on the random variable being non-negative but does not depend on finite variances.&lt;&#x2F;p&gt;
&lt;p&gt;Assuming that the underlying variable has finite variance is a reasonable assumption to make
most of the time for your data.
To be fair, there are some random variables that can have infinite variance,
such as the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cauchy_distribution&quot;&gt;Cauchy&lt;&#x2F;a&gt;
or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pareto_distribution&quot;&gt;Pareto&lt;&#x2F;a&gt; distributions,
but these are &lt;strong&gt;extremely rare&lt;&#x2F;strong&gt; for you to cross paths with.&lt;&#x2F;p&gt;
&lt;p&gt;Another thing to note is that instead of the Chebyshev’s inequality,
we could have used the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Chernoff_bound&quot;&gt;Chernoff bound&lt;&#x2F;a&gt;
to get a &lt;strong&gt;tighter bound&lt;&#x2F;strong&gt; on the probability of failure.
But that is “left as an exercise to the reader”.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, if you are intrigued to see how powerful these inequalities
can be in probability theory,
I highly recommend Nassim’s Taleb technical book
&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2001.10488&quot;&gt;“Statistical Consequences of Fat Tails: Real World Preasymptotics, Epistemology, and Applications”&lt;&#x2F;a&gt;
which is freely available on arXiv.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Michael Mitzenmacher and Eli Upfal, “Probability and Computing: Randomization and Probabilistic Techniques in Algorithms and Data Analysis 2nd Edition”, ISBN: 978-1107154889&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;footer class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-pdf&quot;&gt;
&lt;p&gt;The PDF is freely available &lt;a href=&quot;http:&#x2F;&#x2F;lib.ysu.am&#x2F;open_books&#x2F;413311.pdf&quot;&gt;here&lt;&#x2F;a&gt;. &lt;a href=&quot;#fr-pdf-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-quicksort&quot;&gt;
&lt;p&gt;Note that I am comparing against quicksort since it uses $O(\log n)$ space,
whereas merge sort would use $O(n)$ space with the worst case is $O(n)$. &lt;a href=&quot;#fr-quicksort-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-bayesian&quot;&gt;
&lt;p&gt;For my Bayesian rant,
see &lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;lindley-paradox&#x2F;&quot;&gt;“Lindley’s Paradox, or The consistency of Bayesian Thinking”&lt;&#x2F;a&gt;. &lt;a href=&quot;#fr-bayesian-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-monad&quot;&gt;
&lt;p&gt;Yes M word mentioned.
If you want a good introduction to Haskell functors, applicatives, and monads,
see &lt;a href=&quot;https:&#x2F;&#x2F;www.adit.io&#x2F;posts&#x2F;2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot;&gt;“Functors, Applicatives, And Monads In Pictures”&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-monad-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;footer&gt;
</content>
        </entry><entry xml:lang="en">
        <title>BitVM: how to bridge using 1-of-N trust assumptions</title>
        <published>2025-02-10T04:57:00+00:00</published>
        <updated>2025-02-10T04:57:00+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/bitvm/" type="text/html"/>
        <id>https://storopoli.com/blog/bitvm/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;mermaid.js.org&quot;&gt;Mermaid&lt;&#x2F;a&gt; to render flowcharts.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered flowcharts, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;div class=&quot;admonition info&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-info&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;BTC++ Talk&lt;&#x2F;strong&gt;
        &lt;p&gt;This post is the written version of my very condensed 45-minute talk
at &lt;a href=&quot;https:&#x2F;&#x2F;btcpp.dev&#x2F;conf&#x2F;floripa&quot;&gt;BTC++ 2025 Floripa&lt;&#x2F;a&gt;.
You can watch the talk &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;gHoSpAgI7Xk&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;style&gt;
  .embed-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    max-width: 100%;
  }
  .embed-container iframe,
  .embed-container object,
  .embed-container embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
&lt;&#x2F;style&gt;
&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe
    src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;gHoSpAgI7Xk&quot;
    frameborder=&quot;0&quot;
    allowfullscreen
  &gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;strong&gt;BitVM is a bridge between Bitcoin and a sidesystem&lt;&#x2F;strong&gt;.
Generally, these bridges are secured by a federated multisig,
where to bridge-out you need to have a majority of the federation.
Mathematically, this is a $(\frac{N}{2}+1)$-of-$N$ trust model.
This is not ideal since it’s a “trust me bro” situation and the “bros”
are the majority of the bridge.
BitVM is different, since it can drastically reduce the trust assumptions.
It is a &lt;strong&gt;$1$-of-$N$ trust model, in which as long as you have one live honest operator,
you can withdraw on-chain&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;bitvm.jpg&quot; alt=&quot;BitVM Meme&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I am part of the &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;alpenlabs.io&quot;&gt;Alpen Labs&lt;&#x2F;a&gt; engineering team
that is building &lt;a href=&quot;https:&#x2F;&#x2F;stratabtc.org&quot;&gt;Strata: a BitVM-based rollup on Bitcoin&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.
Strata is also part of the &lt;a href=&quot;https:&#x2F;&#x2F;bitvm.org&#x2F;&quot;&gt;BitVM Alliance&lt;&#x2F;a&gt;:
a partnership to accelerate the development and implementation of BitVM project.&lt;&#x2F;p&gt;
&lt;p&gt;This post has a lot of overlaps with my previous post on
&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;zkp&#x2F;&quot;&gt;“Some Intuitions on Zero-Knowledge Proofs”&lt;&#x2F;a&gt;.
If you want to know more about Zero-Knowledge Proofs (ZKPs),
then I’d suggest you read that post first.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition tip&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-tip&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;Links and Footnotes&lt;&#x2F;strong&gt;
        &lt;p&gt;This post is filled with external links and footnotes.
If you want to dive deeper into any topic that has one of these,
feel free to do so.
The idea was to give a general overview the concepts,
while also allowing you to tune your experience by giving you
a bunch of tangents and rabbit holes to explore if wanted.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I’m going to present BitVM in it’s main three big ideas:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Verified Computation&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Groth16 Bitcoin Script Compiler&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Emulating Covenants with Connector Outputs&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;3_big_ideas.png&quot; alt=&quot;Three Big Ideas&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The only new idea that BitVM brings to the table is the Groth16 Bitcoin script compiler.
Verified computation is the premise of ZK-SNARKs,
and emulating covenants with connector outputs was already used by the
&lt;a href=&quot;https:&#x2F;&#x2F;ark-protocol.org&#x2F;&quot;&gt;Ark protocol&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;big-idea-1-verified-computation&quot;&gt;Big Idea 1: Verified Computation&lt;&#x2F;h2&gt;
&lt;p&gt;Suppose you have a function that does some complicated stuff and performs some computation.
Then, this function can be represented as an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Arithmetic_circuit&quot;&gt;&lt;strong&gt;arithmetic circuit&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-peano-1&quot;&gt;&lt;a href=&quot;#fn-peano&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;An arithmetic circuit is a directed acyclic graph (DAG) where:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Every indegree-zero node is an input gate that represents a variable $x_i$&lt;&#x2F;li&gt;
&lt;li&gt;Every node with indegree $&amp;gt;1$ is either:
&lt;ul&gt;
&lt;li&gt;an addition gate, $+$, that represents the sum of its children&lt;&#x2F;li&gt;
&lt;li&gt;a multiplication gate, $\times$, that represents the product of its children&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example of an arithmetic circuit that represents the function&lt;&#x2F;p&gt;
&lt;p&gt;$$f(x_1, x_2) = x_1 \cdot x_2 + x_1$$&lt;&#x2F;p&gt;


&lt;noscript&gt;
    &lt;strong&gt;⚠️ JavaScript is required to render the diagram.&lt;&#x2F;strong&gt;
&lt;&#x2F;noscript&gt;
&lt;pre class=&quot;mermaid invertible-image&quot;&gt;
    flowchart TD
x1[&quot;x₁&quot;]
x2[&quot;x₂&quot;]
mul[&quot;×&quot;]
add[&quot;\+&quot;]

x1 --&gt; mul
x2 --&gt; mul
mul --&gt; add
x1 --&gt; add
&lt;&#x2F;pre&gt;
&lt;p&gt;In the circuit above, the input gates are
$x_1$ and $x_{2}$,
the product gate computes $x_1 \cdot x_2$,
and the sum gate computes the result of the product gate added to $x_1$.
All of this evaluates to $x_1 \cdot x_2 + x_1$.&lt;&#x2F;p&gt;
&lt;p&gt;This stems due to the fact that any &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;NP_(complexity)&quot;&gt;NP problem&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-np-complete-1&quot;&gt;&lt;a href=&quot;#fn-np-complete&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;
can be reduced in polynomial time by a deterministic Turing machine to
the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Boolean_satisfiability_problem&quot;&gt;Boolean satisfiability problem&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-boolean-funs-1&quot;&gt;&lt;a href=&quot;#fn-boolean-funs&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
This is known as the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cook%E2%80%93Levin_theorem&quot;&gt;Cook-Levin theorem&lt;&#x2F;a&gt;,
and it is a fundamental result in theoretical computer science.&lt;&#x2F;p&gt;
&lt;p&gt;In computer science, we have two main classes of problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$\cal{P}$ problems, which are &lt;strong&gt;easy to solve and verify&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;$\cal{NP}$ problems, which are &lt;strong&gt;hard to solve, but &lt;em&gt;easy&lt;&#x2F;em&gt; to verify&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$\cal{P}$ stems from polynomial time,
and contains all decision problems that can be solved by a deterministic Turing machine
using a polynomial amount of computation time, or polynomial time.
$\cal{NP}$ stems from non-deterministic polynomial time,
and is the set of decision problems for which the problem instances,
where the answer is “yes”, have proofs verifiable in polynomial time by
a deterministic Turing machine.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;p_np.png&quot; alt=&quot;P vs NP&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;According to the Cook-Levin theorem,
once you find an algorithm that solves one of the $\cal{NP}$ problems
in polynomial time, you can use it to solve &lt;strong&gt;&lt;em&gt;any&lt;&#x2F;em&gt; $\cal{NP}$ problem
in polynomial time&lt;&#x2F;strong&gt;.
But we haven’t yet found such algorithms for any $\cal{NP}$ problem.
Heck, we don’t even know if $\cal{P} \ne \cal{NP}$.
It is highly speculated, but yet still an open question&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-millennium-problems-1&quot;&gt;&lt;a href=&quot;#fn-millennium-problems&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Moving on, &lt;strong&gt;any (finite) arithmetic circuit can be transformed
into a big (finite) polynomial&lt;&#x2F;strong&gt;,
by using techniques such as
&lt;a href=&quot;https:&#x2F;&#x2F;alinush.github.io&#x2F;qap-r1cs&quot;&gt;Rank-1 Constraint System (R1CS), quadratic arithmetic program (QAP)&lt;&#x2F;a&gt;;
and many others.
This means that we can map any arithmetic circuit to a polynomial,
and vice-versa; and one operation in each side of the map,
can be mapped to a single operation in the other side.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, we can &lt;strong&gt;cryptographically commit to a polynomial using
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Commitment_scheme#KZG_commitment&quot;&gt;polynomial commitment schemes (PCS)&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.
This means that we &lt;strong&gt;also commit to a certain arithmetic circuit,
given that we know the unique polynomial that it represents&lt;&#x2F;strong&gt;.
This commitment allow us to create &lt;strong&gt;very succinct zero-knowledge proofs
that some computation was performed given certain inputs&lt;&#x2F;strong&gt;.
We can represent this with proof as $\pi$
which takes as public-accessible inputs $x$,
and private-accessible inputs $w$ (as in witness),
and outputs $y$:&lt;&#x2F;p&gt;
&lt;p&gt;$$\pi(x; w) = y$$&lt;&#x2F;p&gt;
&lt;p&gt;Let’s define verifier $V$ that has access to the arithmetic circuit $C$,
the inputs $x$, and the proof $\pi$.
Note that $V$ does not have access to the witness $w$, which are private inputs.
Additionally, $V$ may or may not have access to the output $y$ of the whole computation.
Also, we’ll define a prover $P$ that has access to everything $V$ has,
with the addition of the witness $w$.&lt;&#x2F;p&gt;
&lt;p&gt;This proof $\pi$ has three main properties:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Completeness&lt;&#x2F;strong&gt;: If the statement is true, the verifier will accept the proof.&lt;&#x2F;p&gt;
&lt;p&gt;$$ \Pr\big[V(\pi, x) = \text{accept} \big] = 1. $$&lt;&#x2F;p&gt;
&lt;p&gt;Here $\Pr\big[V(\pi(x)) = \text{accept} \big]$
denotes the probability that the verifier accepts the proof given
a proof $\pi$, and inputs $x$.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Soundness&lt;&#x2F;strong&gt;: If the statement is &lt;em&gt;false&lt;&#x2F;em&gt;, no cheating prover
can convince an honest verifier that it is true,
except with some negligible probability &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-negligible-1&quot;&gt;&lt;a href=&quot;#fn-negligible&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\forall A, \forall x, \forall \pi: \Pr\big[V(A, \pi, x) =
\text{accept} \big] &amp;lt; \text{negligible}.
$$&lt;&#x2F;p&gt;
&lt;p&gt;Here $\Pr\big[V(A, \pi) = \text{accept} \big]$ denotes
the probability that the verifier accepts the proof given an adversary $A$,
a proof $\pi$, and &lt;em&gt;public&lt;&#x2F;em&gt; inputs $x$.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Zero-Knowledge&lt;&#x2F;strong&gt;: If the statement is true,
the verifier learns nothing about the secret $w$.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;There are many commitment schemes,
even ones that don’t use polynomials.
But a succinct zero knowledge system also needs an
interactive oracle proof (IOP).
One of such schemes is &lt;a href=&quot;https:&#x2F;&#x2F;alinush.github.io&#x2F;groth16&quot;&gt;Groth16&lt;&#x2F;a&gt;,
named after Jens Groth,
who published the &lt;a href=&quot;https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2016&#x2F;260&quot;&gt;paper describing it in 2016&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Groth16 uses a mathematical tool called
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bilinear_map&quot;&gt;bilinear maps&lt;&#x2F;a&gt;
or &lt;a href=&quot;https:&#x2F;&#x2F;alinush.github.io&#x2F;pairings&quot;&gt;pairing functions&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.
This is generally applied to vector spaces,
but they can work in elliptic curves (EC) as well.
It allows us to have VERY succinct proofs.
I’m not gonna cover the math behind EC pairings.
Instead, suffices to know that an EC pairing,
given three groups $G_1$, $G_2$, and $G_T$ (as in target group),
is a function $e$:&lt;&#x2F;p&gt;
&lt;p&gt;$$e: G_1 \times G_2 \rightarrow G_T$$&lt;&#x2F;p&gt;
&lt;p&gt;In other words, it takes any two elements in $G_1$ and $G_2$;
and outputs a group element in $G_T$.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Groth16 proofs are very succinct&lt;&#x2F;strong&gt;.
It consists of 3 group elements
(2 from $G_1$ and 1 from $G_2$) which amounts &lt;strong&gt;from 128 to 192 bytes&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As an example suppose that I know how to calculate the 100th million digit of $\pi$.
I publicly produce a VERY big arithmetic circuit,
and cryptographically commit to it using a polynomial commitment scheme.
I proceed by performing the HUGE computation, and sending to you, the prover,
$x$ and $\pi$: the inputs to this circuit and the proof
that I’ve performed the computation correctly.
By verifying the proof, you can convince yourself that I know the
100th million digit of $\pi$ without gaining any knowledge of this digit at all.&lt;&#x2F;p&gt;
&lt;p&gt;In fact, to classify as &lt;strong&gt;succinct&lt;&#x2F;strong&gt;, this proving system must
output proofs that are &lt;strong&gt;at most poly-logarithmic&lt;&#x2F;strong&gt; in the size of the circuit $C$,
denoted as $|C|$,
that it was committed and used to perform the computation
that the prover wants to prove.
Additionally, the verification time must also be poly-logarithmic in $C$.
This means that &lt;strong&gt;both the proof size
and verification time complexity must be at most&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;$$O(\log^k |C|)$$&lt;&#x2F;p&gt;
&lt;p&gt;for some constant $k&amp;gt;1$.&lt;&#x2F;p&gt;
&lt;p&gt;Since Groth16, outputs proofs that are between 128 and 192 bytes,
and also has a &lt;strong&gt;constant-time verification&lt;&#x2F;strong&gt;,
due to the face that it is just checking 3 group elements,
irrespectively of the size of the circuit $C$,
then &lt;strong&gt;Groth16 is a succinct zero-knowledge proof system&lt;&#x2F;strong&gt;.
In fact, it is currently the most succinct one that we know so far&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-research-1&quot;&gt;&lt;a href=&quot;#fn-research&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is something quite marvelous.
Imagine that you have ANY computation whatsoever,
and I can prove to you that I’ve done it
by sending only a very succinct ~200-byte proof
and you are completely convinced that I did it.
This is called &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Verifiable_computing&quot;&gt;verifiable computing&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,
which crypto-bros call “zero-knowledge”.
We already have zero-knowledge in classical cryptography:
“Hey I know a secret key and here’s a signature to prove to you”.
But the real novelty here is that &lt;strong&gt;we can prove that I did a computation
without revealing the computation itself&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To finalize, there are some caveats in using Groth16.
Yes, we have the &lt;strong&gt;best ZK-SNARK in terms of proof size
and verification time&lt;&#x2F;strong&gt;.
However, the setup is what we call a &lt;strong&gt;“trusted setup” that is also non-universal&lt;&#x2F;strong&gt;.
This means that we need some sort of ceremony to setup the protocol,
which includes the prover and verifier keys.
This can be done in a Multi-Party Computation (MPC) style,
with several parties joining the ceremony.
Each one of these parties will contribute with some random secret data
towards the setup of the protocol.
&lt;strong&gt;As long as one of them throw away their secret data,
the protocol is secure&lt;&#x2F;strong&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-ceremony-1&quot;&gt;&lt;a href=&quot;#fn-ceremony&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
This means that no one can prove false statements
or make a proof for a computation that was not performed.
Additionally, the setup is done for a single circuit.
Hence, you can only prove stuff that was done in a simple computation context.
You can vary the inputs as much as you like, but the circuit will always be the same.
To get a different circuit using Groth16, you need to perform a new setup.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;big-idea-2-groth16-bitcoin-script-compiler&quot;&gt;Big Idea 2: Groth16 Bitcoin Script Compiler&lt;&#x2F;h2&gt;
&lt;p&gt;The second big idea is to &lt;strong&gt;overcome Bitcoin’s Script limitations
by creating a Groth16 verifier using Bitcoin Script&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Bitcoin Script&lt;&#x2F;strong&gt; is VERY limited.
It is a &lt;strong&gt;stack-based language, and it has a very limited number of opcodes
that pops and pushes values into the stack; or manipulates the stack&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Most opcodes deal with verifying signatures since that is the most
common usecase for Bitcoin Script.
However, Bitcoin Script can also do some things such as:
&lt;strong&gt;hashing values and checking equality&lt;&#x2F;strong&gt;.
Additionally, we also have an &lt;strong&gt;alternate stack, called “alt stack”,
which is kinda a buffer for storing values&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With respect to math operations we have, hold your breath,
&lt;strong&gt;&lt;em&gt;only&lt;&#x2F;em&gt; 32-bit addition and subtraction&lt;&#x2F;strong&gt;.
We don’t have multiplication and division,
modular division, or bit-rotations.
Heck, we cannot even &lt;em&gt;concatenate&lt;&#x2F;em&gt; two values into a single one.
This has some historical reasons,
and the short story is that Satoshi was scared
of people torpedoing the network by exploding the stack,
and eventually crashing nodes by using these “dark arts” arithmetic operations.
The network was in its early days,
and very fragile.
Instead of carefully setting guard-rails so that
people don’t do stupid dangerous things,
he pretty much &lt;strong&gt;disabled&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-satoshi-commit-1&quot;&gt;&lt;a href=&quot;#fn-satoshi-commit&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; all the “dark arts” arithmetic operations&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Bitcoin Script is different than Ethereum’s EVM.
In the EVM, you can do whatever you want.
It is (bounded) Turing-complete.
You just need to make sure that you have enough gas
to pay for the computation.
However in Bitcoin, the fees are calculated from the transaction size.
This is possible because of the very limited expressiveness that Bitcoin Script has.
All nodes will run your transaction’s Script and verify it
irrespectively of the size of the Script,
within the relevant size limits, of course.&lt;&#x2F;p&gt;
&lt;p&gt;Bitcoin, prior to the Taproot upgrade,
had limitations to a maximum of 1,000 stack elements,
and 201 opcodes per program.
With Taproot, we don’t have more opcodes limitations,
but the 1,000 stack elements limitation is still there.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that to &lt;strong&gt;verify a Groth16 proof we need to do some elliptic curve pairings
and check 3 group elements&lt;&#x2F;strong&gt;?
This means that, technically, we can have a Groth16 verifier in Bitcoin Script.
Just like the golden rule of JavaScript: “if something can be built using JavaScript,
it WILL be built using JavaScript”;
we can tweak it to be the &lt;strong&gt;golden rule of Bitcoin Script:
“if something can be built using Bitcoin Script,
it WILL be built using Bitcoin Script”&lt;&#x2F;strong&gt;.
To achieve a Groth16 verifier in Bitcoin Script,
we just need to be &lt;strong&gt;able to do 256-bit multiplication
using only 32-bit addition operations&lt;&#x2F;strong&gt;.
And without the 201-opcodes limitation,
that Taproot upgrade, &lt;strong&gt;we can have a Groth16 verifier in Bitcoin Script&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It turns out that this Script is kinda big.
&lt;strong&gt;If you put it in a single transaction,
it will be around 1GB&lt;&#x2F;strong&gt;.
Not cool! Even if we are BFF with some miners,
to not be limited by the transaction standardness requirements&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-transaction-standardness-1&quot;&gt;&lt;a href=&quot;#fn-transaction-standardness&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;,
we can’t propagate this transaction since it will never fit a block
which must be at most 4MB.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;groth16_block_size.jpg&quot; alt=&quot;Groth16 Bitcoin Script&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The next step stems from the insight that &lt;strong&gt;to find a fault in a Groth16 proof,
we need to find at least one step of the proof verification execution that it fails&lt;&#x2F;strong&gt;.
If we find none, then we can be sure that the proof is valid.
Maybe we could somehow &lt;strong&gt;split this 1GB huge Bitcoin Script into smaller scripts&lt;&#x2F;strong&gt;,
that could be &lt;strong&gt;published in a block&lt;&#x2F;strong&gt; or even &lt;strong&gt;relayed by nodes&lt;&#x2F;strong&gt; if we can get
it to fit the standardness requirements&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-transaction-standardness-2&quot;&gt;&lt;a href=&quot;#fn-transaction-standardness&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We have merkle trees in the Taproot upgrade,
so what if we could split the Groth16 proof verification into a bunch of
script spending paths (leaves in the Taproot Merkle tree),
then we just need to find at least one leaf that the proof fails.
If we cannot find any, then we can be sure that the proof is valid.&lt;&#x2F;p&gt;
&lt;p&gt;But, wait! Bitcoin Script is stateless!
We cannot pass state from one transaction to the next transaction.
Is it? Well, this is the final trick needed to fit
the 1GB Groth16 verifier Bitcoin Script into a bunch of
standard&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-transaction-standardness-3&quot;&gt;&lt;a href=&quot;#fn-transaction-standardness&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; transactions.
We know that Bitcoin Script, despite its limitations, can hash stuff and verify equality.
Hence, we need to find a primitive that can carry data with some sort of authentication;
and uses exclusively hash functions.&lt;&#x2F;p&gt;
&lt;p&gt;This is where &lt;strong&gt;hash-based one-time signatures (OTS)&lt;&#x2F;strong&gt; comes into play.
The first, and most famous, OTS is
the &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lamport_signature&quot;&gt;Lamport signature&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,
which was invented by &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Leslie_Lamport&quot;&gt;Leslie Lamport&lt;&#x2F;a&gt;
in 1979.
Suppose that what you’re signing is a 256-bit hash $H(m)$ of a message $m$.
The way Lamport signatures work is that your public key is
the 256 pairs of hashes: 512 in total.
The first pair represents all possible &lt;code&gt;0&lt;&#x2F;code&gt;s that a 256-bit hash can have;
and the second pair the same for all possible &lt;code&gt;1&lt;&#x2F;code&gt;s.
To sign $H(m)$, you just reveal a preimage for each pair
depending on the bit of the $H(m)$.
Remember that a bit can be only 0 or 1 (a single pair).
If your bit index &lt;code&gt;i&lt;&#x2F;code&gt; is &lt;code&gt;0&lt;&#x2F;code&gt; you reveal the preimage for
the public key’s first pair at index &lt;code&gt;i&lt;&#x2F;code&gt;, that represents &lt;code&gt;0&lt;&#x2F;code&gt;s;
if it’s &lt;code&gt;1&lt;&#x2F;code&gt;, you reveal the preimage for
the second pair at index &lt;code&gt;i&lt;&#x2F;code&gt;.
This is a one-time signature, since you literally reveal a good chunk
of your private key while signing.&lt;&#x2F;p&gt;
&lt;p&gt;Below is a visual representation of the Lamport signature.
Everything is represented as bits, being either &lt;code&gt;0&lt;&#x2F;code&gt; or &lt;code&gt;1&lt;&#x2F;code&gt;.
As you can see, in the top, we have the pair of hashes as public keys,
&lt;code&gt;PK1&lt;&#x2F;code&gt; and &lt;code&gt;PK2&lt;&#x2F;code&gt;.
In the middle, we have the message that we are signing.
Finally, at the bottom, we have the signature which reveals
the preimages for the public keys depending on what value of the message
for each bit in the message.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;lamport_sigs.png&quot; alt=&quot;Lamport Signature&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Since the Groth16 proof is based mostly on 256-bit group elements,
we can &lt;strong&gt;pass the state from one script to the next script
by hashing the final state of the computation and continuing
in the next script with the hash as the input&lt;&#x2F;strong&gt;.
We can avoid tampering since these hashes (the message)
are signed.
Also, we only need one Lamport public key since it is fine to reuse
mostly because the whole batch of transactions will be in the same
Taproot Merkle Tree of Scripts.
This technique is called &lt;strong&gt;bitcommitments&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The image below shows a P2TR address with a Groth16 verifier in it.
All of the scripts inside the Merkle tree of script spending paths
are below 400kb, and have a 1,000 stack elements limit.
So they adhere to standardness requirements&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-transaction-standardness-4&quot;&gt;&lt;a href=&quot;#fn-transaction-standardness&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
The first script is the &lt;code&gt;Init&lt;&#x2F;code&gt;: it grabs some inputs from the witness,
and performs some computations and results in an output
that will be used in the &lt;code&gt;Z_1&lt;&#x2F;code&gt; script.
How we pass the state from the &lt;code&gt;Init&lt;&#x2F;code&gt; script to the &lt;code&gt;Z_1&lt;&#x2F;code&gt; script
is by using Lamport signatures&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-winternitz-1&quot;&gt;&lt;a href=&quot;#fn-winternitz&quot;&gt;10&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
From there we keep performing computations and passing the state
from &lt;code&gt;Z_2&lt;&#x2F;code&gt; until &lt;code&gt;Z_N&lt;&#x2F;code&gt;.
If we get to the last script &lt;code&gt;Z_N&lt;&#x2F;code&gt;, then we just lock it with
the prover’s public key so that only him can spend this P2TR address.
Each &lt;code&gt;Z_k&lt;&#x2F;code&gt; for any &lt;code&gt;k &amp;lt;= N&lt;&#x2F;code&gt; that uses previous outputs as inputs
have a Lamport signature verification procedure in Bitcoin script
that if fails will make the script spendable by anyone.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;bitvm_p2tr.svg&quot; alt=&quot;Groth16 Verifier in a P2TR Address&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Remember that all of these scripts are inside a P2TR Merkle tree.
Hence unlocking only one of them suffices to spend the whole P2TR UTXO.
&lt;strong&gt;If the prover is honest and has a valid proof, then only he can spend the UTXO.
However, if the prover is dishonest and has a invalid proof,
then anyone can spend the UTXO by simply finding at least one
leaf script that the Lamport signature verification fails&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I am not putting the specific opcodes here,
because the goal is to give a high-level overview of
how we can insert a Groth16 verifier in Bitcoin Script.
If you want to learn more about how a ZK-SNARK verifier can be included
in a Taproot address,
check the &lt;a href=&quot;https:&#x2F;&#x2F;bitvm.org&#x2F;bitvm_bridge.pdf&quot;&gt;BitVM2 paper&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;big-idea-3-emulating-covenants-with-connector-outputs&quot;&gt;Big Idea 3: Emulating Covenants with Connector Outputs&lt;&#x2F;h2&gt;
&lt;p&gt;The next big idea is to &lt;strong&gt;emulate covenants with connector outputs
and pre-signed transactions (and timelocks)&lt;&#x2F;strong&gt;.
This is not new since the &lt;a href=&quot;https:&#x2F;&#x2F;ark-protocol.org&#x2F;intro&#x2F;connectors&#x2F;index.html&quot;&gt;Ark protocol already used connectors&lt;&#x2F;a&gt;
to emulate covenants.&lt;&#x2F;p&gt;
&lt;p&gt;First let’s tackle what are covenants.
&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bitcoinops.org&#x2F;en&#x2F;topics&#x2F;covenants&#x2F;&quot;&gt;Covenants&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;
are a category of proposed changes to Bitcoin’s consensus rules that would allow
a script to prevent an authorized spender from spending to certain other scripts&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-timelocks-1&quot;&gt;&lt;a href=&quot;#fn-timelocks&quot;&gt;11&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
A very useful example is the &lt;a href=&quot;https:&#x2F;&#x2F;jameso.be&#x2F;vaults.pdf&quot;&gt;&lt;code&gt;OP_VAULT&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
that allows an UTXO to be only spent to a specific destination.
There are many other proposals like this.&lt;&#x2F;p&gt;
&lt;p&gt;Ok, but we don’t have covenants in Bitcoin.
Hence, we need to &lt;strong&gt;emulate some sort of transaction introspection&lt;&#x2F;strong&gt;.
This is where the BitVM bridge comes in:
the part of the protocol that creates a &lt;strong&gt;transaction graph made of pre-signed transactions&lt;&#x2F;strong&gt;.
These pre-signed transactions are signed by &lt;strong&gt;every operator in the $N$ operators bridge
in a way that every operator has his own pre-signed version of the transaction graph
by all other operators&lt;&#x2F;strong&gt;.
This is important since it allows the &lt;strong&gt;1-of-$N$ trust assumption&lt;&#x2F;strong&gt;,
because any operator can use its pre-signed transaction graph to perform
a withdraw from the BitVM bridge into Bitcoin.&lt;&#x2F;p&gt;
&lt;p&gt;However, only having pre-signed transactions is not enough to emulate covenants.
We also need &lt;strong&gt;connector outputs,
which are ways to restrict the flow of funds and information in a transaction graph&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To illustrate this, let’s consider a simple toy transaction graph example.
In the figure below, we have a transaction graph that has six transactions:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Claim&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Payout Optimistic&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Challenge&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Assert&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Payout&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Disprove&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;tx-graph.svg&quot; alt=&quot;Transaction Graph&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This represents a “contract” between two parties, Alice, the verifier, and Bob, the prover.
Alice wants Bob to calculate the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pi#Modern_quest_for_more_digits&quot;&gt;three-quadrillionth digit of $\pi$&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-pi-1&quot;&gt;&lt;a href=&quot;#fn-pi&quot;&gt;12&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
This can be any computation, but let’s go with a nerdy example,
since these are always good mind seeds to sow over the internet.
And she’s willing to pay $10$ BTC to Bob if he completes the task,
hence she deposits $10$ BTC into a P2TR address.
This P2TR address, all the transactions that stems from it,
are checked and pre-signed by both Alice and Bob.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s follow the flow of transactions.
The BTC denomitations are either $10$ BTC to demonstrate the flow of capital,
and $\emptyset$ to demonstrate the flow of information.
Bob, once ready, can spend Alice’s $10$ BTC using the pre-signed Claim transaction.
It has two outputs:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A timelocked $10$ BTC output that can be spent using the Payout Optimistic transaction.&lt;&#x2F;li&gt;
&lt;li&gt;An empty output $\emptyset$ that can be spent using either the Payout Optimistic transaction
or the Challenge transaction.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Notice that if Bob is honest and has produced a valid proof,
he can just spend both outputs using the Payout Optimistic transaction
and wait the timelock to get his $10$ BTC.
However, if Bob is dishonest by providing an invalid proof,
or even no proof at all, and by trying the Payout Optimistic transaction path,
Alice can say “fuck you” and spend the empty output $\emptyset$ using the Challenge transaction.
Now the Payout Optimistic transaction is invalid because one of the inputs was spent
and no miner would be able to include it in a block.&lt;&#x2F;p&gt;
&lt;p&gt;By challenging Bob,
Alice also needs to provide funds to cover for the cost of
asserting his proof on-chain; say $0.1$ BTC,
which is the cost of broadcasting the Assert transaction.
Now that Bob was challenged, the only viable path is to
assert his proof on-chain using the Assert followed by the Payout path.
The Assert transaction carries the $10$ BTC,
and inside it we have our Groth16 verifier, denoted as $G16$.
$G16$ will verify the proof provided by Bob,
using native Bitcoin Script and the big P2TR Merkle tree
that we’ve discussed above in &lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;#big-idea-2-groth16-bitcoin-script-compiler&quot;&gt;Big Idea 2&lt;&#x2F;a&gt;.
If the proof is valid, then Bob can spend the $10$ BTC
using the Payout transaction that gives him the $10$ BTC back.
This has also a timelock to allow Alice to disprove Bob’s proof.
If Alice cannot disprove Bob, he will eventually get his $10$ BTC back
by the Payout transaction.&lt;&#x2F;p&gt;
&lt;p&gt;However, if at least one of the leaves in the big P2TR Merkle tree inside the $G16$ is invalid,
then Alice can again say “fuck you” and spend the $10$ BTC
using the Disprove transaction that gives her the $10$ BTC back.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;This is a very clever way to emulate covenant-like behavior using
a pre-signed transaction graph that has connector outputs
that control the flows of both money and information&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The reader can note that it is trivial to extend this
idea to any verified computation,
such as “I’ve got the proof that this withdrawal is valid because of some funds in a sidesystem that were burned”.
And if the proof is valid, then the operator can have the withdrawal money back to
pay the user&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-withdrawal-1&quot;&gt;&lt;a href=&quot;#fn-withdrawal&quot;&gt;13&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
And &lt;strong&gt;if the proof is invalid, the operator then can have
some sort of collateral BTC slashed&lt;&#x2F;strong&gt; with some small part being burned
and the &lt;strong&gt;remainder being given to the challenger&lt;&#x2F;strong&gt;.
Hence, we have &lt;strong&gt;economic incentives&lt;&#x2F;strong&gt; to make sure that &lt;strong&gt;operators behave&lt;&#x2F;strong&gt;
and, not only produce valid proofs, but also &lt;strong&gt;challenge invalid ones&lt;&#x2F;strong&gt;.
The whole system also allows for &lt;strong&gt;operators to charge withdrawal fees&lt;&#x2F;strong&gt;
from the sidesystem’s users during the withdrawal process.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-can-covenants-bring-to-bitvm&quot;&gt;What can covenants bring to BitVM?&lt;&#x2F;h2&gt;
&lt;p&gt;As I’ve said above, we don’t have covenants yet in Bitcoin&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-timelocks-2&quot;&gt;&lt;a href=&quot;#fn-timelocks&quot;&gt;11&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
Nevertheless, the future is yet to be written
and one day we &lt;strong&gt;might have covenants in Bitcoin&lt;&#x2F;strong&gt;.
If, and that’s a big if, we have covenants in Bitcoin, they can bring several benefits to BitVM:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The BitVM bridge becomes a &lt;a href=&quot;https:&#x2F;&#x2F;petertodd.org&#x2F;2024&#x2F;covenant-dependent-layer-2-review&quot;&gt;defacto Layer 2&lt;&#x2F;a&gt;
for Bitcoin by supporting unilateral trustless withdraws&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;The Groth16 verifier might not need to be chunked and split into multiple transactions or locking scripts,
and could fit a single transaction&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;The sidesystem could be a true ZK-validity rollup, and not a ZK-optimistic rollup&lt;&#x2F;strong&gt;.
This allows a much stricter security model for the sidesystem.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let’s dive into the details of how covenants can enhance BitVM.&lt;&#x2F;p&gt;
&lt;p&gt;First, with something like &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bitcoinops.org&#x2F;en&#x2F;topics&#x2F;op_cat&#x2F;&quot;&gt;&lt;code&gt;OP_CAT&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;
and &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bitcoinops.org&#x2F;en&#x2F;topics&#x2F;op_checktemplateverify&#x2F;&quot;&gt;&lt;code&gt;OP_CHECKTEMPLATEVERIFY&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;;
also known as &lt;code&gt;OP_CTV&lt;&#x2F;code&gt;,
we don’t need to have the whole transaction graph pre-signed by every operator.
We just need to use &lt;code&gt;OP_CTV&lt;&#x2F;code&gt; with some concatenation using &lt;code&gt;OP_CAT&lt;&#x2F;code&gt;
in the transactions to verify important parts of the transactions
that guarantee the integrity of the transaction with respect to the BitVM bridge.
Then, anyone can do a &lt;strong&gt;unilateral trustless withdraw&lt;&#x2F;strong&gt;, not only a single BitVM operator.
This will &lt;strong&gt;turn the BitVM bridge into a
&lt;a href=&quot;https:&#x2F;&#x2F;petertodd.org&#x2F;2024&#x2F;covenant-dependent-layer-2-review&quot;&gt;fully trustless Bitcoin Layer 2&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Second, using the &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;brink.dev&#x2F;blog&#x2F;2024&#x2F;08&#x2F;22&#x2F;eng-call-great-script-restoration&#x2F;&quot;&gt;Great Script Restoration (GSR)&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,
which is a proposal to &lt;strong&gt;bring back all the “dark arts” arithmetic operations as 64-bit arithmetic operations&lt;&#x2F;strong&gt;,
like multiplication (&lt;code&gt;OP_MUL&lt;&#x2F;code&gt;), division (&lt;code&gt;OP_DIV&lt;&#x2F;code&gt;), left shift (&lt;code&gt;OP_LSHIFT&lt;&#x2F;code&gt;), and right shift (&lt;code&gt;OP_RSHIFT&lt;&#x2F;code&gt;);
we can hugely improve the efficiency of BitVM’s Bitcoin Script-native Groth16 verifier.
It may even &lt;strong&gt;fit into a single standard&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-transaction-standardness-5&quot;&gt;&lt;a href=&quot;#fn-transaction-standardness&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; transaction&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, using &lt;strong&gt;both GSR and &lt;code&gt;OP_CAT&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;, we can make the BitVM sidesystem;
the thing that we are using the bridge to bridge into from Bitcoin,
to &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ethereum.org&#x2F;en&#x2F;developers&#x2F;docs&#x2F;scaling&#x2F;zk-rollups&#x2F;&quot;&gt;become a ZK-validity rollup&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.
This will hugely improve the security model of the BitVM sidesystem,
which now, not only inherits the reorg resistance of the Layer 1 blocks,
since any rollup derives (and writes) its state into the Layer 1,
but also inherits the consensus model of the Layer 1.
You cannot &lt;em&gt;opportunistically&lt;&#x2F;em&gt; write the rollup state into Layer 1.
It is now fully verified by the Layer 1 consensus.
Hence, you don’t need constant “eyes” on the rollup writes in Layer 1
to find frauds, as &lt;strong&gt;the Layer 1 consensus guarantees the validity of the rollup state&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The focus of this post is to give a high-level overview of BitVM,
and building intuitions on how it works.
By using the 3 big ideas
we can create a very interesting 1-of-$N$ Bitcoin bridge,
instead of having to resort to outdated majority federated multisig bridges:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Verified Computation&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Groth16 Bitcoin Script Compiler&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Emulating Covenants with Connector Outputs&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;This allows all kinds of exciting stuff to be built on top of Bitcoin&lt;&#x2F;strong&gt;.
Bitcoin is already the &lt;strong&gt;best money in the world&lt;&#x2F;strong&gt;,
being the only &lt;a href=&quot;https:&#x2F;&#x2F;bitcoinmagazine.com&#x2F;culture&#x2F;history-bitcoin-sound-money-helps-society&quot;&gt;“sound money”&lt;&#x2F;a&gt;.
However, due to its limited scalability,
it is not suitable for wide adoption without
either resorting to Layer 2 solutions,
or by losing it’s sound money properties by reducing the decentralization&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-decentralization-1&quot;&gt;&lt;a href=&quot;#fn-decentralization&quot;&gt;14&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
Additionally, Bitcoin is &lt;em&gt;not&lt;&#x2F;em&gt; expressive enough to build interest applications.
Things like prediction markets, decentralized exchanges,
yield farming, Bitcoin-backed loans,
and more have been brought to Bitcoin and left deep traumas.
This is due to the fact that, while being possible to build smart contracts
that are transparent and can be audited in Ethereum &amp;amp; Co.,
in Bitcoin they came as a “trust me bro” solutions.
All of these usecases cannot be expressed using Bitcoin Script.
Hence, you need to fallback to losing custody of funds
to use these solutions.
Of course, shit hit the fan, and tons of people and companies lost A LOT of money
as these “trust me bro” solutions either were hacked or went belly up.
This might be a new dawn of BiFi (Bitcoin Finance, and fuck DeFi).&lt;&#x2F;p&gt;
&lt;p&gt;Of course, you need a LOT of engineering to implement BitVM.
If you are curious about the details, you can check out the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BitVM&#x2F;BitVM&quot;&gt;BitVM repo&lt;&#x2F;a&gt; for the Groth16 compiler,
the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alpenlabs&#x2F;strata-bridge&quot;&gt;&lt;code&gt;strata-bridge&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; repo
for the whole BitVM bridge transaction graph;
and finally, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alpenlabs&#x2F;strata&quot;&gt;&lt;code&gt;strata&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; repo
for the Strata rollup (the BitVM sidesystem).&lt;&#x2F;p&gt;
&lt;footer class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-peano&quot;&gt;
&lt;p&gt;If you want to dig yourself into a very nice rabbit hole,
check &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Peano_axioms&quot;&gt;Peano arithmetic&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Turing_completeness&quot;&gt;Turing-completeness relations&lt;&#x2F;a&gt;. &lt;a href=&quot;#fr-peano-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-np-complete&quot;&gt;
&lt;p&gt;Actually, it is any NP-complete problem, but without loss of generality, we’ll focus on NP. &lt;a href=&quot;#fr-np-complete-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-boolean-funs&quot;&gt;
&lt;p&gt;Note that you can represent addition and multiplication as Boolean functions. &lt;a href=&quot;#fr-boolean-funs-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-millennium-problems&quot;&gt;
&lt;p&gt;If you solve this conjecture either by proving it or disproving it,
you’ll be up for a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Millennium_Prize_Problems&quot;&gt;1 million USD prize&lt;&#x2F;a&gt;.
I like to say that it is the hardest way to
earn 1 million USD. &lt;a href=&quot;#fr-millennium-problems-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-negligible&quot;&gt;
&lt;p&gt;A function $f$ is negligible if for every polynomial $p$,
there exists an $N$ such that for all $n &amp;gt; N$,
$$ f(n) &amp;lt; \frac{1}{p(n)}. $$
If you want to learn more about negligible functions,
read Chapter 3, Section 3.1 of the book &lt;a href=&quot;https:&#x2F;&#x2F;doi.org&#x2F;10.1201&#x2F;9781420010756&quot;&gt;Introduction to Modern Cryptography&lt;&#x2F;a&gt; by Katz &amp;amp; Lindell. &lt;a href=&quot;#fr-negligible-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-research&quot;&gt;
&lt;p&gt;Note that ZK-SNARKs and succinct proving systems in general are a very hot research topic.
We might find succincter systems in the future. &lt;a href=&quot;#fr-research-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-ceremony&quot;&gt;
&lt;p&gt;In the infamous Zcash setup ceremony, Peter Todd,
one of the participants, “ran all of his computations on a laptop encased
in a tin foil-lined cardboard box, while driving across Canada.
He then burned his compute node to a crisp with a propane torch”.
&lt;a href=&quot;https:&#x2F;&#x2F;spectrum.ieee.org&#x2F;the-crazy-security-behind-the-birth-of-zcash&quot;&gt;Source&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-ceremony-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-satoshi-commit&quot;&gt;
&lt;p&gt;Check L94-L109 in &lt;code&gt;script.cpp&lt;&#x2F;code&gt; in this
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitcoin&#x2F;bitcoin&#x2F;commit&#x2F;4bd188c4383d6e614e18f79dc337fbabe8464c82&quot;&gt;2010 commit&lt;&#x2F;a&gt; from Satoshi. &lt;a href=&quot;#fr-satoshi-commit-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-transaction-standardness&quot;&gt;
&lt;p&gt;Transaction standardness means that a transaction will be accepted by every node in the network.
This requires that the transaction is at most 400kvb (that’s kilo “virtual” bytes),
and has only one &lt;code&gt;OP_RETURN&lt;&#x2F;code&gt; output with at most 80-bytes of data.
If you want to do crazy stuff, like &lt;code&gt;&amp;gt;400kvb&lt;&#x2F;code&gt; or more than one &lt;code&gt;OP_RETURN&lt;&#x2F;code&gt; output,
you need to call your friendly neighborhood miner and ask them to include directly into their next block,
without having to relay through the Bitcoin network (since no node will accept it). &lt;a href=&quot;#fr-transaction-standardness-1&quot;&gt;↩&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-transaction-standardness-2&quot;&gt;↩2&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-transaction-standardness-3&quot;&gt;↩3&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-transaction-standardness-4&quot;&gt;↩4&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-transaction-standardness-5&quot;&gt;↩5&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-winternitz&quot;&gt;
&lt;p&gt;Lamport signatures are very inefficient.
Teams building BitVM-based bridge generally use &lt;a href=&quot;https:&#x2F;&#x2F;asecuritysite.com&#x2F;encryption&#x2F;wint&quot;&gt;Winternitz signatures&lt;&#x2F;a&gt; instead. &lt;a href=&quot;#fr-winternitz-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-timelocks&quot;&gt;
&lt;p&gt;In a sense absolute and relative timelocks are a sort of covenant.
Hence, Bitcoin already has at least one kind of covenant: timelocks. &lt;a href=&quot;#fr-timelocks-1&quot;&gt;↩&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-timelocks-2&quot;&gt;↩2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-pi&quot;&gt;
&lt;p&gt;Currently, the record stands at the two-quadrillionth digit. &lt;a href=&quot;#fr-pi-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-withdrawal&quot;&gt;
&lt;p&gt;In the actual BitVM bridge protocol,
the operator outfront the withdrawal money to the user
with some fee for the service,
and then asks for the BitVM bridge for a refund. &lt;a href=&quot;#fr-withdrawal-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-decentralization&quot;&gt;
&lt;p&gt;Decentralization is a key property of Bitcoin, and reducing it would compromise its sound money properties.
This is due to the fact that any average Joe can run a node,
since the requirements for running a node are minimal: 4MB every 10 minutes.
If we increase the block size, or block time, we would increase the cost of running a node,
which would reduce decentralization. &lt;a href=&quot;#fr-decentralization-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;footer&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Merkle trees and the Taproot protocol</title>
        <published>2024-11-15T08:44:46+00:00</published>
        <updated>2024-11-15T08:44:46+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/taproot/" type="text/html"/>
        <id>https://storopoli.com/blog/taproot/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;mermaid.js.org&quot;&gt;Mermaid&lt;&#x2F;a&gt; to render flowcharts.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered flowcharts, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;div class=&quot;admonition info&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-info&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;INFO&lt;&#x2F;strong&gt;
        &lt;p&gt;Dedicated to John Peter, since I was tired of having
to explain this to him every time we met.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This post gives an intuition to the &lt;strong&gt;Taproot protocol&lt;&#x2F;strong&gt; in Bitcoin,
specifically how &lt;strong&gt;Merkle trees&lt;&#x2F;strong&gt; are used to hide the complexity of
several possible spending conditions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;taproot&quot;&gt;Taproot&lt;&#x2F;h2&gt;
&lt;p&gt;Taproot was activated as a soft fork in the Bitcoin network
on &lt;strong&gt;November 2021&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;design goals of Taproot&lt;&#x2F;strong&gt; are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Increase privacy&lt;&#x2F;strong&gt;: hide the spending conditions
and also hide the fact that you are using a multisig.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Reduce the amount of data on-chain&lt;&#x2F;strong&gt;:
you only need to commit to the root of a Merkle tree,
and not the leaves.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Use Schnorr&lt;&#x2F;strong&gt;: Schnorr signatures are more efficient
and allow for signature aggregation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;My focus is on the middle point: how to use Merkle trees to hide the
complexity of the spending conditions.
I’m not gonna cover Schnorr signatures here, but you can check
&lt;a href=&quot;https:&#x2F;&#x2F;conduition.io&#x2F;cryptography&#x2F;schnorr&#x2F;&quot;&gt;conduition’s excellent post on Schnorr signatures&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So let’s start with Merkle trees.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;merkle-trees&quot;&gt;Merkle Trees&lt;&#x2F;h2&gt;
&lt;p&gt;A
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Merkle_tree&quot;&gt;&lt;strong&gt;Merkle tree&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
is a binary tree where the leaves are the data
and the internal nodes are the hash of their children.
The root of the tree is called the &lt;strong&gt;Merkle root&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;


&lt;noscript&gt;
    &lt;strong&gt;⚠️ JavaScript is required to render the diagram.&lt;&#x2F;strong&gt;
&lt;&#x2F;noscript&gt;
&lt;pre class=&quot;mermaid invertible-image&quot;&gt;
    flowchart TD
root[&quot;root&quot;]
h01[&quot;H(0 | 1)&quot;]
h23[&quot;H(2 | 3)&quot;]
leaf0[&quot;0&quot;]
leaf1[&quot;1&quot;]
leaf2[&quot;2&quot;]
leaf3[&quot;3&quot;]

root --- h01
root --- h23
h01 --- leaf0
h01 --- leaf1
h23 --- leaf2
h23 --- leaf3
&lt;&#x2F;pre&gt;
&lt;p&gt;In the picture above, the leaves are the numbers 0, 1, 2, and 3.
Consider these as data that you want to commit to.
We construct the tree by hashing
(applying the hash function $H$)
the leaves and then concatenating the hashes,
and hashing the result until we reach the root.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;merkle-trees-as-commitment-schemes&quot;&gt;Merkle Trees as Commitment Schemes&lt;&#x2F;h3&gt;
&lt;p&gt;In cryptography, we have something called a
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Commitment_scheme&quot;&gt;&lt;strong&gt;commitment scheme&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A commitment scheme allows you to commit to a value without revealing it.
This property is called &lt;strong&gt;hiding&lt;&#x2F;strong&gt;.
Commitment schemes are designed so that a party cannot change the value
or statement after they have committed to it.
This property is called &lt;strong&gt;binding&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The classical example is a &lt;strong&gt;hash function&lt;&#x2F;strong&gt;.
Say you have a value $x$ and you want to commit to it.
You can hash $x$ and send the hash to the other party.
In the future, you can reveal $x$ and the other party can hash it
and check if it matches the hash you sent.&lt;&#x2F;p&gt;
&lt;p&gt;This is a commitment scheme because you cannot know the value of $x$
by looking at the hash.
Hence, it is hiding.
And you cannot change the value of $x$ without changing the hash,
hence it is binding.&lt;&#x2F;p&gt;
&lt;p&gt;However, this is a commitment scheme for a single value.
What if you have multiple values you want to commit to?
This is where Merkle trees come in.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Merkle trees are commitment schemes&lt;&#x2F;strong&gt;.
You commit to the root of the tree,
and you can prove that a leaf is in the tree
by revealing the path from the leaf to the root.&lt;&#x2F;p&gt;
&lt;p&gt;It is hiding because you cannot know the value of a leaf by looking at the root.
And it is binding because you cannot change the value of a leaf
without changing the root.&lt;&#x2F;p&gt;
&lt;p&gt;Note that the inclusion proof is logarithmic in the number of leaves,
hence the complexity of the inclusion proof is $O(\log n)$,
where $n$ is the number of leaves,
or the depth of the desired leaf in the tree.
This makes Merkle trees a very efficient commitment scheme.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;taproot-and-merkle-trees&quot;&gt;Taproot and Merkle Trees&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we understand Merkle trees, let’s see how they are used in Taproot.
The anatomy of a &lt;strong&gt;Pay-to-Taproot (P2TR) address&lt;&#x2F;strong&gt;
is as follows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Internal key&lt;&#x2F;strong&gt;: the public key of the owner.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Merkle root&lt;&#x2F;strong&gt;: the root of the Merkle tree of spending conditions.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;These are also called the &lt;strong&gt;key path&lt;&#x2F;strong&gt; and the &lt;strong&gt;script path&lt;&#x2F;strong&gt;, respectively.
You can find more about the Taproot soft fork in the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitcoin&#x2F;bips&#x2F;blob&#x2F;master&#x2F;bip-0341.mediawiki&quot;&gt;BIP 341&lt;&#x2F;a&gt;
that describes Taproot spending rules.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition info&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-info&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;INFO&lt;&#x2F;strong&gt;
        &lt;p&gt;Note that there are ways to tweak the internal key
that I will not cover here for simplicity.
They are mainly used to disable the key path
in a verifiable way and force the spending
to only use script path conditions.
Again, check
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitcoin&#x2F;bips&#x2F;blob&#x2F;master&#x2F;bip-0341.mediawiki&quot;&gt;BIP 341&lt;&#x2F;a&gt;
for more details.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Here’s an example of a Taproot address:&lt;&#x2F;p&gt;


&lt;noscript&gt;
    &lt;strong&gt;⚠️ JavaScript is required to render the diagram.&lt;&#x2F;strong&gt;
&lt;&#x2F;noscript&gt;
&lt;pre class=&quot;mermaid invertible-image&quot;&gt;
    flowchart TD
p2tr[&quot;P2TR&quot;]
internal[&quot;Internal Key&quot;]
merkle[&quot;Root of the Merkle Tree&quot;]
s1[&quot;S1&quot;]
node[&quot;Node&quot;]
s2[&quot;S2&quot;]
s3[&quot;S3&quot;]

p2tr --- internal
p2tr --- merkle
merkle --- s1
merkle --- node
node --- s2
node --- s3
&lt;&#x2F;pre&gt;
&lt;p&gt;Here we can see that we have the internal key and the root of the Merkle tree.
The internal key is the key path, and the Merkle tree is the script path.
If you want to spend from this address, you can either use the internal key
or any of the spending conditions $S_n$ that are leaves in the Merkle tree.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s focus in the spending conditions $S_n$.
We have 3 conditions in the example above.
These are vanilla Pay-to-(Witness)-Script-Hash P2SH scripts,
so you can have multisig, timelocks,
etc. in these conditions.
P2SH scripts are not immediately revealed on-chain,
you just commit to the hash of the script.
They are only revealed when you spend from the address,
where you need to reveal the script and Bitcoin
consensus will not only check if the script is correct,
but also that it matches the hash committed.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition info&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-info&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;INFO&lt;&#x2F;strong&gt;
        &lt;p&gt;Yes, P2SH is a commitment scheme.
It is hiding because you cannot know the script by looking at the hash.
And it is binding because you cannot change the script without changing the hash.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In a Merkle tree,
it takes $O(\log n)$ space to prove inclusion,
where $n$ is the depth of the leaf that we want to prove,
we order the leaves in the tree in such a way that the most likely
conditions are closer to the root.&lt;&#x2F;p&gt;
&lt;p&gt;In this case we have $S_1$ as the most likely condition,
and $S_2$ and $S_3$ as less likely conditions.&lt;&#x2F;p&gt;
&lt;p&gt;Suppose you want to spend from the address using $S_2$.
How would you prove that $S_2$ is in the tree?
Well, you need to reveal the path from $S_2$ to the root.
This entails revealing the hash of the sibling of $S_2$,
that is the hash of $S_3$,
Ok now we got the “Node” in the picture above,
but we still need to reveal the hash of the sibling of “Node”,
that is $S_1$.
This is enough to prove that $S_2$ is in the tree.
See that we had to reveal the hashes of $S_1$ and $S_3$,
since $S_2$ has depth $n = 3$ in the tree it took $\lceil O(\log 3) \rceil = 2$
steps to prove inclusion.&lt;&#x2F;p&gt;
&lt;p&gt;Now, suppose you want to spend from the address using $S_1$.
Same thing, you need to reveal the path from $S_1$ to the root.
This is easily done with just revealing the hash of “Node”.
So a single operation is enough to prove inclusion.
This is due to the fact that $S_1$ has depth $n = 2$ in the tree,
hence it took $\lceil O(\log 2) \rceil = 1$ step to prove inclusion.&lt;&#x2F;p&gt;
&lt;p&gt;This is the beauty of Merkle trees.&lt;&#x2F;p&gt;
&lt;p&gt;Contrast this with other script addresses formats such as P2SH.
In P2SH, you are only tied to a single script.
You could have a bunch of nested IFs in the script,
to emulate the same behavior as the Merkle tree,
but good luck paying the fees for that monstrous script
when you want to spend from the address.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-is-this-useful&quot;&gt;Why is this useful?&lt;&#x2F;h2&gt;
&lt;p&gt;I work at &lt;a href=&quot;https:&#x2F;&#x2F;alpenlabs.io&#x2F;&quot;&gt;Alpen Labs&lt;&#x2F;a&gt;,
where we are developing &lt;a href=&quot;https:&#x2F;&#x2F;stratabtc.org&quot;&gt;Strata&lt;&#x2F;a&gt;,
a &lt;a href=&quot;https:&#x2F;&#x2F;bitvm.org&#x2F;&quot;&gt;BitVM&lt;&#x2F;a&gt;-based bridge for Bitcoin.
To put it simply, BitVM is a computing paradigm to express
Turing-complete Bitcoin contracts.&lt;&#x2F;p&gt;
&lt;p&gt;BitVM was only possible due to the Taproot soft fork.
Before we dive into details, just one minor detail
about Merkle trees in Taproot:
they can have a maximum depth of 128.
This means that you can have up to $2^{128}$ spending conditions.
And each of this spending conditions is a script that follows
the Bitcoin consensus rules.
Mostly important of these is that the transaction size
must be less than 4MB.
So, you can have a Taproot address
that encodes a Turing-complete contract with up to $2^{128}$ clauses.
And each of these clauses can be a complex script up to 4MB in size.
Hence, we can hide the complexity of a Turing-complete contract
in a single Taproot address.
This allows us to encode $2^{128} \cdot 4\text{MB}$ of data
which is more than the &lt;strong&gt;estimated data content of the surface web&lt;&#x2F;strong&gt;,
according to &lt;a href=&quot;https:&#x2F;&#x2F;www.wolframalpha.com&#x2F;input?i=2%5E128+*+4mb&quot;&gt;wolframalpha&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;More specifically, we can encode a gigabyte-sized
&lt;a href=&quot;https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2016&#x2F;260&quot;&gt;Groth16&lt;&#x2F;a&gt; verifier in
Bitcoin script as a Taproot address
by splitting the execution of the verifier
into 4MB chunks and encoding each chunk as a spending condition
as a leaf in a Taproot Merkle tree.
And we can pass state between these chunks by using one-time signatures,
such as &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lamport_signature&quot;&gt;Lamport Signatures&lt;&#x2F;a&gt;.
This involves encoding all the elliptic curve operations and pairings
required by the Groth16 verifier
along with a way to express Lamport signature verification in Bitcoin script.
But this is a topic for a future post.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;taproot&#x2F;$block.attrs(&amp;#x27;info&amp;#x27;)&quot;&gt;&lt;&#x2F;a&gt;
If you want to know more about how to encode a Groth16 verifier
using Bitcoin script, check the
&lt;a href=&quot;https:&#x2F;&#x2F;www.alpenlabs.io&#x2F;blog&#x2F;state-of-snark-verification-with-bitvm2&quot;&gt;Alpen Labs blog&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;&#x2F;h2&gt;
&lt;p&gt;The idea behind this post is to give an intuition to the Taproot protocol
and how Merkle trees are used to hide the complexity of the spending conditions.
There is a bunch of technical details that I left out for simplicity.
Please go over the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitcoin&#x2F;bips&#x2F;blob&#x2F;master&#x2F;bip-0341.mediawiki&quot;&gt;BIP 341&lt;&#x2F;a&gt;
to check all the technicalities of Taproot,
such as the different ways to tweak the internal key,
tagged hashes, and Taproot annexes.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition info&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-info&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;INFO&lt;&#x2F;strong&gt;
        &lt;p&gt;I would also recommend &lt;a href=&quot;https:&#x2F;&#x2F;base58.school&#x2F;classes&#x2F;taproot&quot;&gt;base58’s workshop on Taproot&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Merkle trees were introduced by Ralph Merkle in 1979.
If you want to know more about Merkle trees, check
&lt;a href=&quot;https:&#x2F;&#x2F;toc.cryptobook.us&#x2F;&quot;&gt;Section 8.9 of Dan Boneh’s textbook “A Graduate Course in Applied Cryptography”&lt;&#x2F;a&gt;.
They are used in many applications in computer science,
for example file systems use Merkle trees to verify the integrity of files.
Another example is the Nix package manager,
which uses Merkle trees to ensure reproducibility of builds.&lt;&#x2F;p&gt;
&lt;p&gt;There are many variations of Merkle trees,
for example Etereum uses a Patricia Merkle tree,
a combination of a Merkle tree
and a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Patricia_trie&quot;&gt;Patricia trie&lt;&#x2F;a&gt;,
which is a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Trie&quot;&gt;“Merkle” trie&lt;&#x2F;a&gt;
where the keys are hashed.&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Von Neumann: the sharpest mind of the 20th century</title>
        <published>2024-06-22T05:54:46+00:00</published>
        <updated>2024-06-22T05:54:46+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/von-neumann/" type="text/html"/>
        <id>https://storopoli.com/blog/von-neumann/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;von-neumann&#x2F;von_neumann.jpg&quot; alt=&quot;Von Neumann’s wartime Los Alamos ID badge photo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;John von Neumann was a Hungarian-American mathematician.
But to define him as a simple mathematician would be an understatement.
He is a &lt;strong&gt;fucking legend&lt;&#x2F;strong&gt; and one of my heroes!
He single-handedly:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;proposed an axiomatization of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Von_Neumann%E2%80%93Bernays%E2%80%93G%C3%B6del_set_theory&quot;&gt;set theory&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;
along with a definition of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Von_Neumann_cardinal_assignment&quot;&gt;cardinality&lt;&#x2F;a&gt;
that remains the standard one in mathematics today.
Funny enough he started working on solving the paradoxes
of set theory while he was only 11 years old!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;laid the mathematical foundations of quantum mechanics&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;made the atomic bomb possible&lt;&#x2F;strong&gt; by conceptualizing and designing
the explosive lenses that were needed to compress the plutonium core
of the Fat Man weapon that was later dropped on Nagasaki.
He also invented the term “kiloton” of TNT as a unit of energy
released in a nuclear explosion.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;invented the modern computer&lt;&#x2F;strong&gt;. Yes, I know, Alan Turing came up with
the idea while trying to solve the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Halting_problem&quot;&gt;halting problem&lt;&#x2F;a&gt;,
but it was von Neumann that recognized the true potential of
computing machines and designed the first computers.
We even have the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Von_Neumann_architecture&quot;&gt;von Neumann architecture&lt;&#x2F;a&gt; that pretty much underlies in every working
universal Turing machine in the world.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;created the field of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Game_theory&quot;&gt;game theory&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,
along with the most important game theory’s theorem: the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Minimax_theorem&quot;&gt;minimax theorem&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;co-invented the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Monte_Carlo_method&quot;&gt;Monte Carlo method&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;
while trying to solve the problem of neutron diffusion.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;created the field of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cellular_automaton&quot;&gt;cellular automata&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;
and paved the way for the discovery of DNA.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The list above is just a quick summary of his achievements.
Everywhere you look in mathematics, physics, computer science, and even biology and economics,
you’ll find von Neumann’s fingerprints.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-sharpest-mind-of-the-20th-century&quot;&gt;The Sharpest Mind of the 20th Century&lt;&#x2F;h2&gt;
&lt;p&gt;Von Neumann was recognized by his peers as one of the most intelligent people
to have ever lived.
Johnny, as he was known to his friends, was a prodigy since early childhood.
Some sources suggest that he could multiply two 8-digit numbers together in his head when he was six.
As a child, von Neumann absorbed Ancient Greek and Latin, and spoke French, German and English as well as his native Hungarian.
He devoured a forty-five-volume history of the world and was able to recite whole chapters verbatim decades later.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some quotes from his contemporaries:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Enrico_Fermi&quot;&gt;Enrico Fermi&lt;&#x2F;a&gt; (Nobel Prize winner)&lt;&#x2F;strong&gt; while talking to &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Herbert_L._Anderson&quot;&gt;Herbert Anderson&lt;&#x2F;a&gt;:
“You know, Herb, Johnny can do calculations in his head ten times as fast as I can! And I can do them ten times as fast as you can, Herb, so you can see how impressive Johnny is!”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;George_P%C3%B3lya&quot;&gt;George Pólya&lt;&#x2F;a&gt; (mathematician, and whose lectures von Neumann attended as a student)&lt;&#x2F;strong&gt;:
“Johnny was the only student I was ever afraid of. If in the course of a lecture I stated an unsolved problem, the chances were he’d come to me at the end of the lecture with the complete solution scribbled on a slip of paper.”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Edward_Teller&quot;&gt;Edward Teller&lt;&#x2F;a&gt; (father of the hydrogen bomb)&lt;&#x2F;strong&gt;:
“Von Neumann would carry on a conversation with my 3-year-old son, and the two of them would talk as equals, and I sometimes wondered if he used the same principle when he talked to the rest of us.”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hans_Bethe&quot;&gt;Hans Bethe&lt;&#x2F;a&gt; (Nobel Prize winner)&lt;&#x2F;strong&gt;:
“I have sometimes wondered whether a brain like von Neumann’s does not indicate a species superior to that of man.”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Stanislaw_Ulam&quot;&gt;Stanislaw Ulam&lt;&#x2F;a&gt; (co-inventor of the Monte Carlo method)&lt;&#x2F;strong&gt;:
“I have had a brain, and von Neumann had a computer.”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Claude_Shannon&quot;&gt;Claude Shannon&lt;&#x2F;a&gt; (father of information theory)&lt;&#x2F;strong&gt;:
“the smartest person I’ve ever met.”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Marina_von_Neumann_Whitman&quot;&gt;Marina von Neumann Whitman&lt;&#x2F;a&gt; (his daughter)&lt;&#x2F;strong&gt;:
“Although he genuinely adored my mother, my father’s first love in life was thinking, a pursuit that occupied most of his waking hours.”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;von-neumann&#x2F;von_neumann_oppenheimer.jpeg&quot; alt=&quot;Von Neumann and Oppenheimer together in-front of one of the computing machines used on the hydrogen bomb project. Von Neumann could do calculations in his head faster than these early computers and would sometimes face off against them in competitions meant to entertain the other people in the labs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you want to know more about von Neumann, I recommend his biography:
&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;61089520-the-man-from-the-future&quot;&gt;The Man from the Future: The Visionary Life of John von Neumann&lt;&#x2F;a&gt;
by Ananyo Bhattacharya.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-fly-puzzle&quot;&gt;The Fly Puzzle&lt;&#x2F;h2&gt;
&lt;p&gt;One of the most famous stories about von Neumann is the fly puzzle.
This was reported by &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Eugene_Wigner&quot;&gt;Eugene Wigner&lt;&#x2F;a&gt;
in the 1966 documentary on Von Neumann.
Below is the exact part where Wigner tells the story:&lt;&#x2F;p&gt;
&lt;style&gt;
  .embed-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    max-width: 100%;
  }
  .embed-container iframe,
  .embed-container object,
  .embed-container embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
&lt;&#x2F;style&gt;
&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe
    src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;HpJgBcE-cFQ?start=184&quot;
    frameborder=&quot;0&quot;
    allowfullscreen
  &gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The tale takes place in Los Alamos during the Manhattan Project.
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Max_Born&quot;&gt;Max Born (Nobel Prize winner)&lt;&#x2F;a&gt;
told von Neumann’s the following puzzle:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Two bicycles begin 20 miles apart,
and each travels toward the other at 10 miles per hour until they collide;
meanwhile, a fly travels continuously back and forth between the bicycles
at 15 miles per hour until it is squashed in the collision.
How far does the fly travel in total?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;One can solve this rather easily by not paying attention to the inherent infinite geometric series that the fly travels.
Instead, focus on the fact that the fly is squashed when the bicycles collide,
and that the two bicycles will collide in one hour.
Thus, the fly travels 15 miles in total.&lt;&#x2F;p&gt;
&lt;p&gt;By the time Born had finished the question, von Neumann had already solved it.
He said “Why? 15 miles, of course.”
Born was surprise and said that Johnny was “one of my first scientist friends that saw the solution immediately.”
Johnny then replied “I can’t understand that. It is a simple infinite geometrical series.”&lt;&#x2F;p&gt;
&lt;p&gt;Now, to understand how fast von Neumann’s mind was, let’s solve the problem the way he did.
Note that the fly reaches the second bicycle when&lt;&#x2F;p&gt;
&lt;p&gt;$$ 15t = 20 - 10t,$$&lt;&#x2F;p&gt;
&lt;p&gt;where $t$ is the time in hours.
Note that $t_1$ is&lt;&#x2F;p&gt;
&lt;p&gt;$$ t_1 = \frac{20}{25} = \frac{4}{5}.$$&lt;&#x2F;p&gt;
&lt;p&gt;This means that the total time it takes for the fly to reach the second bicycle for the first time
is $\frac{4}{5}$ hours and the total distance traveled by the fly is
$d_1 = 15 \times \frac{4}{5} = 12$ miles.
It then turns around and reaches the first bicycle when&lt;&#x2F;p&gt;
&lt;p&gt;$$ 12 - 15t = 8 + 10t.$$&lt;&#x2F;p&gt;
&lt;p&gt;Solving for $t_2$ we get&lt;&#x2F;p&gt;
&lt;p&gt;$$ t_2 = \frac{4}{25}.$$&lt;&#x2F;p&gt;
&lt;p&gt;Continuing, the total distance traveled by the fly is given by summing the series&lt;&#x2F;p&gt;
&lt;p&gt;$$ 15 \sum_{n=1}^{\infty} \frac{4}{5^n} = 15.$$&lt;&#x2F;p&gt;
&lt;p&gt;This is a classical &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Geometric_series&quot;&gt;geometric series&lt;&#x2F;a&gt;.
In general, a geometric series is written as $a + ar + ar^{2} + ar^{3} + \ldots$,
where a $a$ is the coefficient of each term and $r$ is the common ratio between adjacent terms.&lt;&#x2F;p&gt;
&lt;p&gt;Here we have $a = 12$ and $r = \frac{4}{5}$,
and we know it converges to $\frac{a}{1-r} = 15$ when $r &amp;lt; 1$.&lt;&#x2F;p&gt;
&lt;p&gt;That’s how von Neumann solved the problem in his head in a matter of seconds.&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Lindley&#x27;s paradox, or the consistency of Bayesian thinking</title>
        <published>2023-11-22T07:06:59+00:00</published>
        <updated>2023-11-22T07:06:59+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/lindley-paradox/" type="text/html"/>
        <id>https://storopoli.com/blog/lindley-paradox/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;lindley-paradox&#x2F;lindley.jpg&quot; alt=&quot;Dennis Lindley&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dennis_Lindley&quot;&gt;Dennis Lindley&lt;&#x2F;a&gt;,
one of my many heroes,
was an English statistician,
decision theorist and leading advocate of Bayesian statistics.
He published a pivotal book,
&lt;a href=&quot;https:&#x2F;&#x2F;onlinelibrary.wiley.com&#x2F;doi&#x2F;book&#x2F;10.1002&#x2F;9781118650158&quot;&gt;Understanding Uncertainty&lt;&#x2F;a&gt;,
that changed my view on what is and how to handle uncertainty in a
coherent way.
He is responsible for one of my favorites quotes:
“Inside every non-Bayesian there is a Bayesian struggling to get out”;
and one of my favorite heuristics around prior probabilities:
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cromwell%27s_rule&quot;&gt;Cromwell’s Rule&lt;&#x2F;a&gt;.
Lindley predicted in 1975 that “Bayesian methods will indeed become pervasive,
enabled by the development of powerful computing facilities” (Lindley, 1975).
You can find more about all of Lindley’s achievements in his &lt;a href=&quot;https:&#x2F;&#x2F;www.theguardian.com&#x2F;science&#x2F;2014&#x2F;mar&#x2F;16&#x2F;dennis-lindley&quot;&gt;obituary&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lindley-s-paradox&quot;&gt;Lindley’s Paradox&lt;&#x2F;h2&gt;
&lt;p&gt;Lindley’s paradox is a counterintuitive situation in statistics
in which the Bayesian and frequentist approaches to a hypothesis testing problem
give different results for certain choices of the prior distribution.&lt;&#x2F;p&gt;
&lt;p&gt;More formally, the paradox is as follows.
We have some parameter $\theta$ that we are interested in.
Then, we proceed with an experiment to test two competing hypotheses:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$H_0$ (also known as &lt;em&gt;null hypothesis&lt;&#x2F;em&gt;):
there is no “effect”, or, more specifically,
$\theta = 0$.&lt;&#x2F;li&gt;
&lt;li&gt;$H_a$ (also known as &lt;em&gt;alternative hypothesis&lt;&#x2F;em&gt;):
there is an “effect”, or, more specifically,
$\theta \ne 0$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The paradox occurs when two conditions are met:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The result of the experiment is &lt;em&gt;significant&lt;&#x2F;em&gt; by a frequentist test of $H_0$,
which indicates sufficient evidence to reject $H_0$, at a certain threshold of
probability.&lt;&#x2F;li&gt;
&lt;li&gt;The posterior probability (Bayesian approach) of $H_0 \mid \theta$
(null hypothesis given $\theta$) is high,
which indicates strong evidence that $H_0$ should be favored over $H_a$,
that is, to &lt;em&gt;not&lt;&#x2F;em&gt; reject $H_0$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;These results can occur at the same time when $H_0$ is very specific,
$H_a$ more diffuse,
and the prior distribution does not strongly favor one or the other.
These conditions are pervasive across science
and common in traditional null-hypothesis significance testing approaches.&lt;&#x2F;p&gt;
&lt;p&gt;This is a duel of frequentist versus Bayesian approaches,
and one of the many in which Bayesian emerges as the most coherent.
Let’s give a example and go over the analytical result with a ton of math,
but also a computational result with &lt;a href=&quot;https:&#x2F;&#x2F;julialang.org&quot;&gt;Julia&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example&quot;&gt;Example&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s the setup for the example.
In a certain city 49,581 boys and 48,870 girls have been
born over a certain time period.
The observed proportion of male births is thus
$\frac{49,581}{98,451} \approx 0.5036$.&lt;&#x2F;p&gt;
&lt;p&gt;We assume that the birth of a child is independent with a certain probability
$\theta$.
Since our data is a sequence of $n$ independent &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bernoulli_trial&quot;&gt;Bernoulli trials&lt;&#x2F;a&gt;,
i.e., $n$ independent random experiments with exactly two possible outcomes:
“success” and “failure”,
in which the probability of success is the same every time the
experiment is conducted.
We can safely assume that it follows a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Binomial_distribution&quot;&gt;binomial distribution&lt;&#x2F;a&gt;
with parameters:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$n$: the number of “trials” (or the total number of births).&lt;&#x2F;li&gt;
&lt;li&gt;$\theta$: the probability of male births.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We then set up our two competing hypotheses:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$H_0$: $\theta = 0.5$.&lt;&#x2F;li&gt;
&lt;li&gt;$H_a$: $\theta \ne 0.5$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;analytical-solution&quot;&gt;Analytical Solution&lt;&#x2F;h3&gt;
&lt;p&gt;This is a toy-problem and, like most toy problems,
we can solve it analytically for both the frequentist and the Bayesian approaches.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;analytical-solutions-frequentist-approach&quot;&gt;Analytical Solutions – Frequentist Approach&lt;&#x2F;h4&gt;
&lt;p&gt;The frequentist approach to testing $H_0$ is to compute a $p$-value,
the probability of observing births of boys at least as large as 49,581
assuming $H_0$ is true.
Because the number of births is very large,
we can use a normal approximation for the
binomial-distributed number of male births.
Let’s define $X$ as the total number of male births,
then $X$ follows a normal distribution:&lt;&#x2F;p&gt;
&lt;p&gt;$$X \sim \text{Normal}(\mu, \sigma)$$&lt;&#x2F;p&gt;
&lt;p&gt;where $\mu$ is the mean parameter,
$n \theta$ in our case,
and $\sigma$ is the standard deviation parameter,
$\sqrt{n \theta (1 - \theta)}$.
We need to calculate the conditional probability of
$X \geq \frac{49,581}{98,451} \approx 0.5036$
given $\mu = n \theta = 98,451 \cdot \frac{1}{2} = 49,225.5$
and&lt;&#x2F;p&gt;
&lt;p&gt;$\sigma = \sqrt{n \theta (1 - \theta)} =
\sqrt{98,451 \cdot \frac{1}{2} \cdot (1 - \frac{1}{2})}$:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(X \ge 0.5036 \mid \mu = 49,225.5, \sigma = \sqrt{24.612.75})$$&lt;&#x2F;p&gt;
&lt;p&gt;This is basically a
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cumulative_distribution_function&quot;&gt;cumulative distribution function (CDF)&lt;&#x2F;a&gt;
of $X$ on the interval $[49,225.5; 98,451]$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\int_{49,225.5}^{98,451} \frac{1}{\sqrt{2 \pi \sigma^2}}
e^{- \frac{\left( \frac{x - \mu}{\sigma} \right)^2}{2}} dx
$$&lt;&#x2F;p&gt;
&lt;p&gt;After inserting the values and doing some arithmetic,
our answer is approximately $0.0117$.
Note that this is a one-sided test,
since it is symmetrical,
the two-sided test would be
$0.0117 \cdot 2 = 0.0235$.
Since we don’t deviate from the Fisher’s canon,
this is well below the 5% threshold.
Hooray! We rejected the null hypothesis!
Quick! Grab a frequentist celebratory cigar!
But, wait. Let’s check the Bayesian approach.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;analytical-solutions-bayesian-approach&quot;&gt;Analytical Solutions – Bayesian Approach&lt;&#x2F;h4&gt;
&lt;p&gt;For the Bayesian approach, we need to set prior probabilities on both hypotheses.
Since we do not favor one from another, let’s set equal prior probabilities:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(H_0) = P(H_a) = \frac{1}{2}$$&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, all parameters of interest need a prior distribution.
So, let’s put a prior distribution on $\theta$.
We could be fancy here, but let’s not.
We’ll use a uniform distribution on $[0, 1]$.&lt;&#x2F;p&gt;
&lt;p&gt;We have everything we need to compute the posterior probability of $H_0$ given
$\theta$.
For this, we’ll use &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bayes%27_theorem&quot;&gt;Bayes theorem&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(A \mid B) = \frac{P(B \mid A) P(A)}{P(B)}$$&lt;&#x2F;p&gt;
&lt;p&gt;Now again let’s plug in all the values:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(H_0 \mid \theta) = \frac{P(\theta \mid H_0) P(H_0)}{P(\theta)}$$&lt;&#x2F;p&gt;
&lt;p&gt;Note that by the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Probability_axioms&quot;&gt;axioms of probability&lt;&#x2F;a&gt;
and by the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Chain_rule_(probability)&quot;&gt;product rule of probability&lt;&#x2F;a&gt;
we can decompose $P(\theta)$ into:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(\theta) = P(\theta \mid H_0) P(H_0) + P(\theta \mid H_a) P(H_a)$$&lt;&#x2F;p&gt;
&lt;p&gt;Again, we’ll use the normal approximation:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
&amp;amp;P \left( \theta = 0.5 \mid \mu = 49,225.5, \sigma = \sqrt{24.612.75} \right) \\
&amp;amp;= \frac{
\frac{1}{
\sqrt{2 \pi \sigma^2}
}
e^{- \left( \frac{(\mu - \mu \cdot 0.5)}{2 \sigma} \right)^2} \cdot 0.5
}
{
\frac{1}{\sqrt{2 \pi \sigma^2}}
e^{ \left( -\frac{(\mu - \mu \cdot 0.5)}{2 \sigma} \right)^2} \cdot 0.5 +
\int_0^1 \frac {1}{\sqrt{2 \pi \sigma^2} }
e^{- \left( \frac{\mu - \mu \cdot \theta)}{2 \sigma} \right)^2}
d \theta \cdot 0.5
} \\
&amp;amp;= 0.9505
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;The likelihood of the alternative hypothesis,
$P(\theta \mid H_a)$,
is just the CDF of all possible values of $\theta \ne 0.5$.&lt;&#x2F;p&gt;
&lt;p&gt;$$
P(H_0 \mid \text{data}) = P \left( \theta = 0.5 \mid \mu = 49,225.5,
sigma = \sqrt{24.612.75} \right) &amp;gt; 0.95
$$&lt;&#x2F;p&gt;
&lt;p&gt;And we fail to reject the null hypothesis, in frequentist terms.
However, we can also say in Bayesian terms, that we strongly favor $H_0$
over $H_a$.&lt;&#x2F;p&gt;
&lt;p&gt;Quick! Grab the Bayesian celebratory cigar!
The null is back on the game!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;computational-solutional&quot;&gt;Computational Solutional&lt;&#x2F;h3&gt;
&lt;p&gt;For the computational solution, we’ll use &lt;a href=&quot;https:&#x2F;&#x2F;julialang.org&quot;&gt;Julia&lt;&#x2F;a&gt;
and the following packages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JuliaStats&#x2F;HypothesisTests.jl&quot;&gt;&lt;code&gt;HypothesisTest.jl&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;turinglang.org&#x2F;&quot;&gt;&lt;code&gt;Turing.jl&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;computational-solutions-frequentist-approach&quot;&gt;Computational Solutions – Frequentist Approach&lt;&#x2F;h4&gt;
&lt;p&gt;We can perform a &lt;a href=&quot;https:&#x2F;&#x2F;juliastats.org&#x2F;HypothesisTests.jl&#x2F;stable&#x2F;nonparametric&#x2F;#Binomial-test&quot;&gt;&lt;code&gt;BinomialTest&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
with &lt;code&gt;HypothesisTest.jl&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-julia&quot;&gt;using&lt;&#x2F;span&gt; HypothesisTests
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; BinomialTest&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;49_225&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;98_451&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.5036&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Binomial test
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Population details&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    parameter of interest&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;   Probability of success
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    value under h_&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;:&lt;&#x2F;span&gt;         &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.5036&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    point estimate&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;          &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.499995&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;95&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt; confidence interval&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.4969&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.5031&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Test summary&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    outcome with &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;95&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt; confidence&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt; reject h_&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    two&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;sided p&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;value&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;           &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.0239&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Details&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    number of observations&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;98451&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    number of successes&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;49225&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is the two-sided test,
and I had to round $49,225.5$ to $49,225$
since &lt;code&gt;BinomialTest&lt;&#x2F;code&gt; do not support real numbers.
But the results match with the analytical solution,
we still reject the null.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;computational-solutions-bayesian-approach&quot;&gt;Computational Solutions – Bayesian Approach&lt;&#x2F;h4&gt;
&lt;p&gt;Now, for the Bayesian computational approach,
I’m going to use a generative modeling approach,
and one of my favorites probabilistic programming languages,
&lt;code&gt;Turing.jl&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-julia&quot;&gt;using&lt;&#x2F;span&gt; Turing
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-macro z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-macro z-julia&quot;&gt;@&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-macro z-julia&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-julia&quot;&gt;model&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-julia&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-function z-julia&quot;&gt;function&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-julia&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-julia&quot;&gt;birth_rate&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;           θ &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;~&lt;&#x2F;span&gt; Uniform&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;           total_births &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;98_451&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;           male_births &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;~&lt;&#x2F;span&gt; Binomial&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;total_births, θ&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;       &lt;span class=&quot;z-keyword z-other z-julia&quot;&gt;end&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; model &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; birth_rate&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;; male_births &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;49_225&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; chain &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; sample&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;model, NUTS&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1_000&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, MCMCThreads&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1_000&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Chains MCMC chain &lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;×&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;13&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;×&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;4&lt;&#x2F;span&gt; Array{Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;3&lt;&#x2F;span&gt;}&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Iterations        &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1001&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;2000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Number of chains  &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;4&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Samples per chain &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Wall duration     &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.2&lt;&#x2F;span&gt; seconds
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Compute duration  &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.19&lt;&#x2F;span&gt; seconds
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;parameters        &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; θ
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;internals         &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Summary Statistics
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;  parameters      mean       std      mcse    ess_bulk    ess_tail      rhat   ess_per_sec
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;      Symbol   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;     Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;     Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;       Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;           θ    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.4999&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.0016&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.0000&lt;&#x2F;span&gt;   &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1422.2028&lt;&#x2F;span&gt;   &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;2198.1987&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1.0057&lt;&#x2F;span&gt;     &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;7368.9267&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Quantiles
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;  parameters      &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;2.5&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt;     &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;25.0&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt;     &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;50.0&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt;     &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;75.0&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt;     &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;97.5&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;      Symbol   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;           θ    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.4969&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.4988&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.4999&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.5011&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.5031&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see from the output of the quantiles that the 95% quantile for $\theta$ is
the interval $(0.4969, 0.5031)$.
Although it overlaps zero, that is not the equivalent of a hypothesis test.
For that, we’ll use the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;highest_posterior_density_interval&quot;&gt;highest posterior density interval (HPDI)&lt;&#x2F;a&gt;,
which is defined as “choosing the narrowest interval” that
captures a certain posterior density threshold value.
In this case, we’ll use a threshold interval of 95%,
i.e. an $\alpha = 0.05$:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; hpd&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;chain; alpha&lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;HPD
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;  parameters     lower     upper
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;      Symbol   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;           θ    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.4970&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.5031&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We see that we fail to reject the null,
$\theta = 0.5$ at $\alpha = 0.05$ which is in accordance with the analytical
solution.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-the-frequentist-and-bayesian-approaches-disagree&quot;&gt;Why the Frequentist and Bayesian Approaches Disagree&lt;&#x2F;h2&gt;
&lt;p&gt;Why do the approaches disagree?
What is going on under the hood?&lt;&#x2F;p&gt;
&lt;p&gt;The answer is disappointing.
The main problem is that the frequentist approach only allows fixed significance
levels with respect to sample size.
Whereas the Bayesian approach is consistent and robust to sample size variations.&lt;&#x2F;p&gt;
&lt;p&gt;Taken to extreme, in some cases, due to huge sample sizes,
the $p$-value is pretty much a &lt;em&gt;proxy&lt;&#x2F;em&gt; for sample size
and have little to no utility on hypothesis testing.
This is known as $p$-hacking.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;div class=&quot;references&quot;&gt;
    &lt;p&gt;Lindley, Dennis V. “The future of statistics: A Bayesian 21st century”.
&lt;em&gt;Advances in Applied Probability&lt;&#x2F;em&gt; 7 (1975): 106-115.&lt;&#x2F;p&gt;

&lt;&#x2F;div&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Word embeddings</title>
        <published>2023-11-19T22:49:51+00:00</published>
        <updated>2023-11-19T22:49:51+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/word-embeddings/" type="text/html"/>
        <id>https://storopoli.com/blog/word-embeddings/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;word-embeddings&#x2F;euclid.jpg&quot; alt=&quot;Euclid of Alexandria&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I wish I could go back in time and tell my younger self
that you can make a machine understand human language with trigonometry.
That would definitely have made me more aware and interested in the
subject during my school years.
I would have looked at triangles, circles, sines, cosines, and tangents
in a whole different way.
Alas, better late than never.&lt;&#x2F;p&gt;
&lt;p&gt;In this post, we’ll learn how to represent words using word embeddings,
and how to use basic trigonometry to play around with them.
Of course, we’ll use &lt;a href=&quot;https:&#x2F;&#x2F;julialang.org&quot;&gt;Julia&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;word-embeddings&quot;&gt;Word Embeddings&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Word_embedding&quot;&gt;Word embeddings&lt;&#x2F;a&gt; is a way to
represent words as a real-valued vector that encodes the meaning of the word
in such a way that words that are closer in the vector space are expected
to be similar in meaning&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ok, let’s unwrap the above definition.
First, a &lt;strong&gt;real-valued vector&lt;&#x2F;strong&gt; is any vector which its elements belong to the real
numbers.
Generally we denote vectors with a bold lower-case letter,
and we denote its elements (also called components) using square brackets.
Hence, a vector $\bold{v}$ that has 3 elements, $1$, $2$, and $3$,
can be written as&lt;&#x2F;p&gt;
&lt;p&gt;$$\bold{v} = \begin{bmatrix} 1 \\ 2 \\ 3 \end{bmatrix}$$&lt;&#x2F;p&gt;
&lt;p&gt;Next, what “close” means for vectors?
We can use distance functions to get a measurable value.
The most famous and commonly used distance function is the &lt;strong&gt;Euclidean distance&lt;&#x2F;strong&gt;,
in honor of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Euclid&quot;&gt;Euclid&lt;&#x2F;a&gt;, the “father of geometry”,
and the guy pictured in the image at the top of this post.
The Euclidean distance is defined in trigonometry for 2-D and 3-D spaces.
However, it can be generalized to any dimension $n &amp;gt; 1$ by using vectors.&lt;&#x2F;p&gt;
&lt;p&gt;Since every word is represented by an $n$-dimensional vector,
we can use distances to compute a metric that represent similarity between vectors.
And, more interesting, we can add and subtract words
(or any other linear combination of one or more words) to generate new words.&lt;&#x2F;p&gt;
&lt;p&gt;Before we jump to code and examples, a quick note about how word embeddings
are constructed.
They are trained like a regular machine learning algorithm,
where the cost function measures the difference between
some vector distance between the vectors and a “semantic distance”.
The goal is to iteratively find good vector values that minimize the cost.
So, if a vector is close to another vector measured by a distance function,
but far apart measured by some semantic distance on the words that these
vectors represent, then the cost function will be higher.
The algorithm cannot change the semantic distance, it is treated as a fixed value.
However, it can change the vector elements’ values so that the vector distance function
closely resembles the semantic distance function.
Lastly, generally the dimensionality of the vectors used in word embeddings
are high, $n &amp;gt; 50$, since it needs a proper amount of dimensions in order to
represent all the semantic information of words with vectors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pre-trained-word-embeddings&quot;&gt;Pre-Trained Word Embeddings&lt;&#x2F;h2&gt;
&lt;p&gt;Generally we don’t train our own word embeddings from scratch,
we use pre-trained ones.
Here is a list of some of the most popular ones:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code.google.com&#x2F;archive&#x2F;p&#x2F;word2vec&#x2F;&quot;&gt;Word2Vec&lt;&#x2F;a&gt;:
One of the first public available word embeddings,
made by Google in 2013.
Only supports English.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nlp.stanford.edu&#x2F;projects&#x2F;glove&#x2F;&quot;&gt;GloVe&lt;&#x2F;a&gt;:
made by Stanford in 2014.
Only supports English.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fasttext.cc&#x2F;&quot;&gt;FastText&lt;&#x2F;a&gt;:
From Facebook, released in 2016.
Supports hundreds of languages.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;julia-code&quot;&gt;Julia Code&lt;&#x2F;h2&gt;
&lt;p&gt;We will use the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JuliaText&#x2F;Embeddings.jl&quot;&gt;&lt;code&gt;Embeddings.jl&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
package to easily load word embeddings as vectors,
and the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JuliaStats&#x2F;Distances.jl&quot;&gt;&lt;code&gt;Distances.jl&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
package for the convenience of several distance functions.
This is a nice example of the Julia package ecosystem composability,
where one package can define types, another can define functions,
and another can define custom behavior of these functions on types that
are defined in other packages.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-julia&quot;&gt;using&lt;&#x2F;span&gt; Embeddings
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-julia&quot;&gt;using&lt;&#x2F;span&gt; Distances
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s load the &lt;a href=&quot;https:&#x2F;&#x2F;nlp.stanford.edu&#x2F;projects&#x2F;glove&#x2F;&quot;&gt;GloVe&lt;&#x2F;a&gt;
word embeddings.
First, let’s check what we have in store to choose from
GloVe’s English language embeddings:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; language_files&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;GloVe{&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-julia&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-julia&quot;&gt;en&lt;&#x2F;span&gt;}&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;20&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;element Vector{String}&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.50d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.100d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.200d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.300d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.42B.300d&#x2F;glove.42B.300d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.840B.300d&#x2F;glove.840B.300d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.25d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.50d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.100d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.200d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.50d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.100d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.200d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.300d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.42B.300d&#x2F;glove.42B.300d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.840B.300d&#x2F;glove.840B.300d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.25d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.50d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.100d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.200d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’ll use the &lt;code&gt;&quot;glove.6B&#x2F;glove.6B.50d.txt&quot;&lt;&#x2F;code&gt;.
This means that it was trained with 6 billion tokens,
and it provides embeddings with 50-dimensional vectors.
The &lt;code&gt;load_embeddings&lt;&#x2F;code&gt; function takes an optional second positional
argument as an &lt;code&gt;Int&lt;&#x2F;code&gt; to choose from which index of the &lt;code&gt;language_files&lt;&#x2F;code&gt; to use.
Finally, I just want the words “king”, “queen”, “man”, “woman”;
so I am passing these words as a &lt;code&gt;Set&lt;&#x2F;code&gt; to the &lt;code&gt;keep_words&lt;&#x2F;code&gt; keyword argument:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-julia&quot;&gt;const&lt;&#x2F;span&gt; glove &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; load_embeddings&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;GloVe{&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-julia&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-julia&quot;&gt;en&lt;&#x2F;span&gt;}, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1&lt;&#x2F;span&gt;; keep_words&lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt;Set&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-sequence z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-julia&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;king&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;queen&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;man&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;woman&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-julia&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Embeddings.EmbeddingTable{Matrix{Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;32&lt;&#x2F;span&gt;}, Vector{String}}&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;32&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-sequence z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-julia&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.094386&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.50451&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.18153&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.37854&lt;&#x2F;span&gt;; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.43007&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.68607&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.64827&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1.8233&lt;&#x2F;span&gt;; … ; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.53135&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.64426&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.48764&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.0092753&lt;&#x2F;span&gt;; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.11725&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.51042&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.10467&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.60284&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-julia&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-sequence z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-julia&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;man&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;king&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;woman&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;queen&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-julia&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Watch out with the order that we get back.
If you see the output of &lt;code&gt;load_embeddings&lt;&#x2F;code&gt;,
the order is &lt;code&gt;&quot;man&quot;, &quot;king&quot;, &quot;woman&quot;, &quot;queen&quot;]&lt;&#x2F;code&gt;
Let’s see how a word is represented:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; queen &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; glove.embeddings&lt;span class=&quot;z-meta z-sequence z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-julia&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-julia&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;50&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;element Vector{Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;32&lt;&#x2F;span&gt;}&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;  &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.37854&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;  &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1.8233&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1.2648&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;  ⋮
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;2.2839&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;  &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.0092753&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.60284&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;They are 50-dimensional vectors of &lt;code&gt;Float32&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now, here’s the fun part:
let’s add words and check the similarity between the
result and some other word.
A classical example is to start with the word “king”,
subtract the word “men”,
add the word “woman”,
and check the distance of the result to the word “queen”:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; man &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; glove.embeddings&lt;span class=&quot;z-meta z-sequence z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-julia&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-julia&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; king &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; glove.embeddings&lt;span class=&quot;z-meta z-sequence z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-julia&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-julia&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; woman &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; glove.embeddings&lt;span class=&quot;z-meta z-sequence z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-julia&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-julia&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; cosine_dist&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;king &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt; man &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;+&lt;&#x2F;span&gt; woman, queen&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.13904202&lt;&#x2F;span&gt;f&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is less than 1&#x2F;4 of the distance of “woman” to “king”:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; cosine_dist&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;woman, king&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.58866215&lt;&#x2F;span&gt;f&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Feel free to play around with others words.
If you want suggestions, another classical example is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;cosine_dist&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;Madrid &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt; Spain &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;+&lt;&#x2F;span&gt; France, Paris&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I think that by allying interesting applications to abstract math topics
like trigonometry is the vital missing piece in STEM education.
I wish every new kid that is learning math could have the opportunity to contemplate
how new and exciting technologies have some amazing simple math under the hood.
If you liked this post, you would probably like &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Linear_algebra&quot;&gt;linear algebra&lt;&#x2F;a&gt;.
I would highly recommend &lt;a href=&quot;https:&#x2F;&#x2F;math.mit.edu&#x2F;~gs&#x2F;&quot;&gt;Gilbert Strang’s books&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&quot;&gt;3blue1brown series on linear algebra&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        </entry>
</feed>
