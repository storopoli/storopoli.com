<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="https://storopoli.com/feed_style.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <tabi:metadata xmlns:tabi="https://github.com/welpo/tabi">
        <tabi:base_url>https:&#x2F;&#x2F;storopoli.com</tabi:base_url>
        <tabi:separator>
            •
        </tabi:separator>
        <tabi:about_feeds>This is a web feed, also known as an Atom feed. Subscribe by copying the URL from the address bar into your newsreader. Visit About Feeds to learn more and get started. It&#x27;s free.</tabi:about_feeds>
        <tabi:visit_the_site>Visit website</tabi:visit_the_site>
        <tabi:recent_posts>Recent posts</tabi:recent_posts>
        <tabi:last_updated_on>Updated on $DATE</tabi:last_updated_on>
        <tabi:default_theme></tabi:default_theme>
        <tabi:post_listing_date>date</tabi:post_listing_date>
        <tabi:current_section>Jose Storopoli, PhD</tabi:current_section>
    </tabi:metadata><link rel="extra-stylesheet" href="https://storopoli.com/skins/teal.css?h=bd19e558a52d678a50de" /><title>Jose Storopoli, PhD</title>
        <subtitle>Personal website of Jose Storopoli, PhD</subtitle>
    <link href="https://storopoli.com/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://storopoli.com" rel="alternate" type="text/html"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-05-24T12:57:00+00:00</updated>
    <id>https://storopoli.com/atom.xml</id><entry xml:lang="en">
        <title>The beauty of math&#x27;s incompleteness or how self-references can beautifully screw things up</title>
        <published>2025-05-24T12:57:00+00:00</published>
        <updated>2025-05-24T12:57:00+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/beauty-of-math-incompleteness/" type="text/html"/>
        <id>https://storopoli.com/blog/beauty-of-math-incompleteness/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;beauty-of-math-incompleteness&#x2F;self-referential-blackhole.png&quot; alt=&quot;A curios mathematician seeing a blackhole of self-referential paradoxes.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Logic is the hygiene that the mathematician practises to keep his ideas healthy and strong.”&lt;&#x2F;p&gt;
&lt;p&gt;— Hermann Weyl&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I have a very special place for &lt;strong&gt;mathematics in my mind and heart&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Mathematics is above &lt;em&gt;any other science&lt;&#x2F;em&gt;.
This is because the knowledge we gather in all other sciences are never &lt;em&gt;absolutely true&lt;&#x2F;em&gt;.
All other sciences are based on observations and experiments,
and eventually evidence accrues to a threshold that we can morally declare that something is &lt;em&gt;true&lt;&#x2F;em&gt;.
Yet, it is not &lt;em&gt;mathematically true&lt;&#x2F;em&gt;, in other words, for any given pile of evidence about a given hypothesis $H$,
we have $P(H) &amp;lt; 1$.
In a pure philosophical sense, we can never be &lt;em&gt;absolutely sure&lt;&#x2F;em&gt; about scientific hypotheses.
There will always be a certain degree of uncertainty even if we have a lot of evidence in favor of a given hypothesis.
For mathematical theorems, which is the meat of mathematics, once they are proven, they are &lt;em&gt;absolutely true&lt;&#x2F;em&gt;,
i.e. $P(H) = 1$.
For example, imagine a galaxy very far away, and a million years from now, given the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Euclidean_geometry#Axioms&quot;&gt;5 axioms of Euclidian geometry&lt;&#x2F;a&gt;,
the theorem that the sum of the angles of a triangle is 180 degrees will still be true.
It will always be true (given the 5 axioms of course).&lt;&#x2F;p&gt;
&lt;p&gt;That is how mathematics won my mind.
Now, how it won my heart is a different story.
It has to do with the beauty of math’s &lt;em&gt;incompleteness&lt;&#x2F;em&gt;, &lt;em&gt;inconsistency&lt;&#x2F;em&gt;, and &lt;em&gt;undecidability&lt;&#x2F;em&gt;.
Which all stems from &lt;strong&gt;self-referential paradoxes&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cantor-and-multiple-infinities&quot;&gt;Cantor and multiple infinities&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;beauty-of-math-incompleteness&#x2F;georg-cantor.jpg&quot; alt=&quot;Georg Cantor&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let’s go back to 1874, when &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Georg_Cantor&quot;&gt;Georg Cantor&lt;&#x2F;a&gt;
proved that there are &lt;strong&gt;multiple infinities&lt;&#x2F;strong&gt;.
Yes, that sounds crazy, but it is true.&lt;&#x2F;p&gt;
&lt;p&gt;Cantor is the father of set theory.
Before him, the concept of a set was just a collection of objects and they were all finite collections.
This dates back to Aristotle, and no one imagined that there was interesting things to say about sets.
In order to put set theory on a solid footing, Cantor had to define what a set is.
For finite sets, this was kinda trivial.
However, for infinite sets, this is where things started to get interesting.&lt;&#x2F;p&gt;
&lt;p&gt;Cantor started exploring the properties of infinite sets.
First, he analyzed the properties of the set of natural numbers $\mathbb{N}$.
He then realized that the set of natural numbers is the same size
as the set of the integers $\mathbb{Z}$ and the set of the rational numbers $\mathbb{Q}$.
To show this, he had to come up with a way to compare the sizes of sets.
He did this by defining a bijection between the set of natural numbers and the set of integers.
A &lt;strong&gt;bijection&lt;&#x2F;strong&gt; is a function that is one-to-one and onto.
In other words, it is a function that maps each element of the first set to a unique element of the second set,
and each element of the second set to a unique element of the first set.&lt;&#x2F;p&gt;
&lt;p&gt;For example, the function&lt;&#x2F;p&gt;
&lt;p&gt;$$
f(n) = \begin{cases}
-\frac{n}{2} &amp;amp; \text{if } n \text{ is even} \\
\frac{n+1}{2} &amp;amp; \text{if } n \text{ is odd}
\end{cases}
$$&lt;&#x2F;p&gt;
&lt;p&gt;is a bijection between the set of natural numbers and the set of integers.&lt;&#x2F;p&gt;
&lt;p&gt;It creates a one-to-one correspondence between the set of natural numbers and the set of integers:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;$f(n)$&lt;&#x2F;th&gt;&lt;th&gt;$\mathbb{N}$&lt;&#x2F;th&gt;&lt;th&gt;$\mathbb{Z}$&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;f(0)&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(1)&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(2)&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;-1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(3)&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(4)&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;-2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(5)&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(6)&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;-3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Ok that was easy, we just proved that the &lt;strong&gt;set of natural numbers and the set of integers have the same size&lt;&#x2F;strong&gt;.
Now let’s try to prove the same for the set of rational numbers $\mathbb{Q}$.
The idea again is to find a bijection between the set of natural numbers and the set of rational numbers.
We can represent the set of rational numbers as a grid of fractions:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{array}{cccc}
\frac{1}{1} &amp;amp; \quad \frac{1}{2} &amp;amp; \quad \frac{1}{3} &amp;amp; \quad \cdots \\\\
\frac{2}{1} &amp;amp; \quad \frac{2}{2} &amp;amp; \quad \frac{2}{3} &amp;amp; \quad \cdots \\\\
\frac{3}{1} &amp;amp; \quad \frac{3}{2} &amp;amp; \quad \frac{3}{3} &amp;amp; \quad \cdots \\\\
\vdots &amp;amp; \quad \vdots &amp;amp; \quad \vdots &amp;amp; \quad \ddots \\\\
\end{array}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Now, we can’t just go row by row or column by column — that would never finish the first row!
Instead, Cantor had a brilliant idea: traverse the grid diagonally in a zigzag pattern&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-pairing-function-1&quot;&gt;&lt;a href=&quot;#fn-pairing-function&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{array}{ccccc}
\frac{1}{1} &amp;amp; \rightarrow &amp;amp; \frac{1}{2} &amp;amp; \quad &amp;amp; \frac{1}{3} &amp;amp; \rightarrow &amp;amp; \frac{1}{4} &amp;amp; \cdots \\
&amp;amp; \swarrow &amp;amp; &amp;amp; \nearrow &amp;amp; &amp;amp; \swarrow &amp;amp; \\
\frac{2}{1} &amp;amp; &amp;amp; \frac{2}{2} &amp;amp; &amp;amp; \frac{2}{3} &amp;amp; &amp;amp; \frac{2}{4} &amp;amp; \cdots \\
\downarrow &amp;amp; \nearrow &amp;amp; &amp;amp; \swarrow &amp;amp; &amp;amp; &amp;amp; \\
\frac{3}{1} &amp;amp; &amp;amp; \frac{3}{2} &amp;amp; &amp;amp; \frac{3}{3} &amp;amp; &amp;amp; \frac{3}{4} &amp;amp; \cdots \\
&amp;amp; \swarrow &amp;amp; &amp;amp; \nearrow &amp;amp; &amp;amp; &amp;amp; \\
\frac{4}{1} &amp;amp; &amp;amp; \frac{4}{2} &amp;amp; &amp;amp; \frac{4}{3} &amp;amp; &amp;amp; \frac{4}{4} &amp;amp; \cdots \\
\vdots &amp;amp; &amp;amp; \vdots &amp;amp; &amp;amp; \vdots &amp;amp; &amp;amp; \vdots &amp;amp; \ddots \\
\end{array}
$$&lt;&#x2F;p&gt;
&lt;p&gt;This gives us the sequence:
$$
\frac{1}{1}, \frac{1}{2}, \frac{2}{1}, \frac{3}{1}, \frac{2}{2}, \frac{1}{3}, \frac{1}{4}, \frac{2}{3}, \frac{3}{2}, \frac{4}{1}, \ldots
$$&lt;&#x2F;p&gt;
&lt;p&gt;But wait! We have a problem — many fractions represent the same rational number:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$\frac{2}{2} = \frac{1}{1} = 1$&lt;&#x2F;li&gt;
&lt;li&gt;$\frac{2}{4} = \frac{1}{2} = 0.5$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To create a true bijection, we need to skip these duplicates.
We only keep fractions in &lt;strong&gt;lowest terms&lt;&#x2F;strong&gt;,
where $\text{gcd}(\text{numerator}, \text{denominator}) = 1$.&lt;&#x2F;p&gt;
&lt;p&gt;After removing duplicates:
$$\frac{1}{1}, \frac{1}{2}, \frac{2}{1}, \frac{3}{1}, \frac{1}{3}, \frac{1}{4}, \frac{2}{3}, \frac{3}{2}, \frac{4}{1}, \ldots$$&lt;&#x2F;p&gt;
&lt;p&gt;Ok we’re almost there.
This is truly a bijection.
However, it is a bijection between $\mathbb{N}$ and the set of &lt;em&gt;positive rationals&lt;&#x2F;em&gt;, $\mathbb{Q}^+$.
To include all of $\mathbb{Q}$, we interleave &lt;em&gt;positive and negative rationals&lt;&#x2F;em&gt; (and zero).
I won’t give the precise mathematical formula here because it is a bit messy,
however here’s an algorithm describing the bijection:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Start with $n$&lt;&#x2F;li&gt;
&lt;li&gt;If $n = 0$, return $0$&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise:
&lt;ul&gt;
&lt;li&gt;Let $k = \frac{n+1}{2}$ if $n$ is odd, $k = \frac{n}{2}$ if $n$ is even&lt;&#x2F;li&gt;
&lt;li&gt;Find the $k$-th positive rational in our enumeration, call it $r$&lt;&#x2F;li&gt;
&lt;li&gt;If $n$ is odd, return $r$&lt;&#x2F;li&gt;
&lt;li&gt;If $n$ is even, return $-r$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This gives us the following bijection:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;$g(n)$&lt;&#x2F;th&gt;&lt;th&gt;$\mathbb{N}$&lt;&#x2F;th&gt;&lt;th&gt;$\mathbb{Q}^+$ enumeration&lt;&#x2F;th&gt;&lt;th&gt;$\mathbb{Q}$&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;g(0)&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;g(1)&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;1st positive: $\frac{1}{1}$&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;g(2)&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;1st positive: $\frac{1}{1}$&lt;&#x2F;td&gt;&lt;td&gt;-1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;g(3)&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;2nd positive: $\frac{1}{2}$&lt;&#x2F;td&gt;&lt;td&gt;$\frac{1}{2}$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;g(4)&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;2nd positive: $\frac{1}{2}$&lt;&#x2F;td&gt;&lt;td&gt;$-\frac{1}{2}$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;g(5)&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;3rd positive: $\frac{2}{1}$&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;g(6)&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;3rd positive: $\frac{2}{1}$&lt;&#x2F;td&gt;&lt;td&gt;-2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Q.E.D.! We have a &lt;strong&gt;bijection between $\mathbb{N}$ and $\mathbb{Q}$&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I went over all of these details because this diagonalization argument is a very important insight.
Any set that can be put in a one-to-one correspondence with the set of natural numbers is called &lt;strong&gt;countable&lt;&#x2F;strong&gt;.
Cantor showed that the set of rational numbers is countable.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see what happens when we try to apply the same argument to the set of real numbers $\mathbb{R}$.
For the sake of simplicity, let’s consider the set of real numbers between 0 and 1, $\mathbb{R}_{(0,1)}$.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s assume that we have a bijection $f$ between $\mathbb{N}$ and $\mathbb{R}_{(0,1)}$.
This would give us the following table:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;$f(n)$&lt;&#x2F;th&gt;&lt;th&gt;$\mathbb{N}$&lt;&#x2F;th&gt;&lt;th&gt;$\mathbb{R}_{(0,1)}$&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;f(0)&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0.011…&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(1)&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;0.111…&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;f(2)&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;0.112…&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;…&lt;&#x2F;td&gt;&lt;td&gt;…&lt;&#x2F;td&gt;&lt;td&gt;…&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Note that the real number $f(n)$ is the $n$-th real number in the list.&lt;&#x2F;p&gt;
&lt;p&gt;Now, let’s construct a new real number $x$ that is not in the list.
We will do this by constructing a real number that is different from the $n$-th real number in the list for all $n$.
We just add 1 to the $n$-th digit of the $n$-th real number in the list.
For example, for the first real number in the list, we add 1 to the first digit,
for the second real number in the list, we add 1 to the second digit,
and so on.&lt;&#x2F;p&gt;
&lt;p&gt;This gives us the following real number: $0.123\ldots$
By construction, this real number is not in the list,
since it differs from the first real number in the list by 1 in the first digit,
from the second real number in the list by 1 in the second digit,
and so on.&lt;&#x2F;p&gt;
&lt;p&gt;This is a &lt;strong&gt;contradiction&lt;&#x2F;strong&gt;, since we assumed that $f$ was a bijection.&lt;&#x2F;p&gt;
&lt;p&gt;Now, this is where &lt;strong&gt;self-reference&lt;&#x2F;strong&gt; strikes first in this post,
and probably in the history of mathematics.
When we construct the &lt;em&gt;diagonal number&lt;&#x2F;em&gt; $x$, we’re creating something that:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Refers to the entire supposed list of real numbers.&lt;&#x2F;li&gt;
&lt;li&gt;Defines itself in opposition to that list — “I differ from the 1st number at position 1, from the 2nd at position 2…”.&lt;&#x2F;li&gt;
&lt;li&gt;Uses the list to prove the list is incomplete.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Ultimately, this is where Cantor found the first example of a set that is &lt;strong&gt;not countable&lt;&#x2F;strong&gt;.
There’s no way to pair the set of natural numbers with the set of real numbers between 0 and 1.
Therefore, the set of real numbers between 0 and 1 is &lt;strong&gt;not countable&lt;&#x2F;strong&gt;.
This is called the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cantor%27s_diagonal_argument&quot;&gt;Cantor’s diagonal argument&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is a very important insight.
It shows that there are &lt;strong&gt;different sizes of infinity&lt;&#x2F;strong&gt;.
Yes, that is mind-blowing and paradoxically beautiful.&lt;&#x2F;p&gt;
&lt;p&gt;Cantor called the size of the set of natural numbers $\aleph_0$,
and conjectured that the set of real numbers is $\aleph_1$.
This is called the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Continuum_hypothesis&quot;&gt;&lt;strong&gt;continuum hypothesis&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (CH).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;russell-and-the-barber-paradox&quot;&gt;Russell and the barber paradox&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;beauty-of-math-incompleteness&#x2F;bertrand-russell.jpg&quot; alt=&quot;Bertrand Russell&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now let’s fast forward to 1901.
Set theory was still in its infancy,
yet it was starting to be accepted by the mathematical community.
This is where &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bertrand_Russell&quot;&gt;Bertrand Russell&lt;&#x2F;a&gt;
after attending the first &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;World_Congress_of_Philosophy&quot;&gt;World Congress of Philosophy&lt;&#x2F;a&gt; in Paris in 1900,
was impressed by the work of Peano who was using set theory to formalize mathematics.&lt;&#x2F;p&gt;
&lt;p&gt;He embarked on a journey to &lt;strong&gt;formalize mathematics using set theory&lt;&#x2F;strong&gt;.
However, he stumbled upon a &lt;strong&gt;paradox&lt;&#x2F;strong&gt;.
Set theory is very lenient with the definition of sets.
For example, we can define the set of all sets that are &lt;strong&gt;not members of themselves&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;$$
R = \{ x \mid x \notin x \}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Now what happens if we ask the question: &lt;strong&gt;is $R$ a member of itself?&lt;&#x2F;strong&gt;
If $R$ is a member of itself, then it is &lt;em&gt;not&lt;&#x2F;em&gt; a member of itself.
If $R$ is &lt;em&gt;not&lt;&#x2F;em&gt; a member of itself, then it is a member of itself.&lt;&#x2F;p&gt;
&lt;p&gt;To put more simply, Russell gave the simple analogy:
imagine a barber who shaves all men who do not shave themselves.
Now, the question is: &lt;strong&gt;does the barber shave himself?&lt;&#x2F;strong&gt;
If he does, then he does &lt;em&gt;not&lt;&#x2F;em&gt; shave himself.
If he does &lt;em&gt;not&lt;&#x2F;em&gt; shave himself, then he does shave himself.&lt;&#x2F;p&gt;
&lt;p&gt;I can even given an even more simple example: the statement “this statement is false” is a paradox.
If it is true, then it is false.
If it is false, then it is true.&lt;&#x2F;p&gt;
&lt;p&gt;Or suppose that I go out and shout out loud: “I am lying”.
If I am lying, then I am &lt;em&gt;not&lt;&#x2F;em&gt; lying.
If I am &lt;em&gt;not&lt;&#x2F;em&gt; lying, then I am lying.&lt;&#x2F;p&gt;
&lt;p&gt;All of these examples boil down to the same thing:
we cannot have a set of all sets that are &lt;strong&gt;not members of themselves&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is called the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Russell%27s_paradox&quot;&gt;&lt;strong&gt;Russell’s paradox&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
And yet again, we have &lt;strong&gt;self-reference&lt;&#x2F;strong&gt; creating a paradox.
Personally, I find Cantor’s multiple infinities more beautiful than Russell’s paradox.
But I acknowledge that Russell’s paradox is way simpler and more accessible to the general public.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;godel-and-the-incompleteness-theorem&quot;&gt;Gödel and the incompleteness theorem&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;beauty-of-math-incompleteness&#x2F;kurt-godel.jpg&quot; alt=&quot;Kurt Gödel&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Fasten your seatbelts, this is going to be a wild ride.
But first, a little bit of history.&lt;&#x2F;p&gt;
&lt;p&gt;In 1900,
during the second &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;International_Congress_of_Mathematicians&quot;&gt;International Congress of Mathematicians&lt;&#x2F;a&gt; in Paris,
David Hilbert,
arguably the most important mathematician of the 20th century,
gave a list of 23 problems that he thought would be the most important to solve in the century.
These became known as the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hilbert%27s_problems&quot;&gt;Hilbert’s problems&lt;&#x2F;a&gt;.
Right there in the second problem, Hilbert posed the following problem:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The compatibility of the arithmetical axioms.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Later, Hilbert recasted his “Second Problem” at the eighth &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;International_Congress_of_Mathematicians&quot;&gt;International Congress of Mathematicians&lt;&#x2F;a&gt; in Bologna.
He posed three questions:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Was mathematics complete?&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Was mathematics consistent?&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Was mathematics decidable?&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Hilbert believed that mathematics could be put on a completely secure foundation by answering these questions.
Gödel would shatter the dream of a &lt;strong&gt;complete and consistent mathematics&lt;&#x2F;strong&gt;.
And later, Turing would show that mathematics is &lt;strong&gt;not decidable&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Gödel’s incompleteness theorems&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-godel-incompleteness-1&quot;&gt;&lt;a href=&quot;#fn-godel-incompleteness&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; are composed of two theorems.
Let’s start with the first incompleteness theorem, which Gödel proved in 1931
in front of an audience that comprised of no one other than &lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;von-neumann&#x2F;&quot;&gt;Von Neumann&lt;&#x2F;a&gt;,
who allegedly was so impressed by Gödel’s work that he remarked:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s all over.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;the-first-incompleteness-theorem&quot;&gt;The first incompleteness theorem&lt;&#x2F;h3&gt;
&lt;p&gt;The First Incompleteness Theorem states:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;For any consistent formal system $F$ that is powerful enough to express basic arithmetic&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-peano-1&quot;&gt;&lt;a href=&quot;#fn-peano&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, there exists a statement $G$ in the language of $F$ such that:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$G$ is true (when interpreted as a statement about natural numbers)&lt;&#x2F;li&gt;
&lt;li&gt;$G$ cannot be proven within $F$&lt;&#x2F;li&gt;
&lt;li&gt;$\neg G$ (not $G$) cannot be proven within $F$ either&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In other words: &lt;strong&gt;truth and provability are not the same thing&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Gödel’s genius was realizing he could make mathematical statements talk about mathematical statements.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-1-godel-numbering-the-encoding-trick&quot;&gt;Step 1: Gödel numbering — the encoding trick&lt;&#x2F;h4&gt;
&lt;p&gt;Gödel assigned a unique natural number to every mathematical symbol, expression, and proof.
Think of it like ASCII encoding for math:&lt;&#x2F;p&gt;
&lt;p&gt;Basic symbols get prime numbers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;&#x2F;code&gt; → 2&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;=&lt;&#x2F;code&gt; → 3&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;+&lt;&#x2F;code&gt; → 5&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;(&lt;&#x2F;code&gt; → 7&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;)&lt;&#x2F;code&gt; → 11&lt;&#x2F;li&gt;
&lt;li&gt;etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Gödel used a system based on prime factorization.
He first assigned a unique natural number to each basic symbol in the formal language of arithmetic with which he was dealing.&lt;&#x2F;p&gt;
&lt;p&gt;To encode an entire formula, which is a sequence of symbols, Gödel used the following system.
Given a sequence $(x_{1},x_{2},x_{3},…,x_{n})$ of positive integers,
the Gödel encoding of the sequence is the product of the first $n$ primes raised to their corresponding values in the sequence
For example, the formula $0 = 0$ might become:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;&#x2F;code&gt; → 2&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;=&lt;&#x2F;code&gt; → 3&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;0&lt;&#x2F;code&gt; → 2&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Gödel number = $2^2 \times 3^3 \times 5^2 = 4 \times 27 \times 25 = 2,700$&lt;&#x2F;p&gt;
&lt;p&gt;This is called the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;G%C3%B6del_numbering&quot;&gt;&lt;strong&gt;Gödel numbering&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
The key insight is that now &lt;strong&gt;statements about formulas become statements about numbers&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-2-the-predicate-proves-x-y&quot;&gt;Step 2: the predicate “proves(x, y)”&lt;&#x2F;h4&gt;
&lt;p&gt;Using Gödel numbering, we can write an arithmetic predicate that means:
“$x$ is the Gödel number of a proof of the statement with Gödel number $y$”&lt;&#x2F;p&gt;
&lt;p&gt;This is purely mechanical — checking if $x$ represents a valid sequence of logical steps ending in $y$.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-3-the-diagonal-lemma-the-self-reference-trick&quot;&gt;Step 3: the diagonal lemma — the self-reference trick&lt;&#x2F;h4&gt;
&lt;p&gt;This is where it gets mind-blowing.
Gödel proved:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;For any arithmetic property $P(x)$, we can construct a statement $S$ that says:
“$P$ holds for my own Gödel number”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It’s like writing a sentence that says “This sentence has 25 letters” — but in arithmetic!&lt;&#x2F;p&gt;
&lt;p&gt;How the &lt;strong&gt;diagonal lemma&lt;&#x2F;strong&gt; works:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Define a function $\text{sub}(n, m) =$ “the result of substituting $m$ into formula $n$”.&lt;&#x2F;li&gt;
&lt;li&gt;Consider the property: “The formula with Gödel number $x$, when $x$ substituted into it, has property $P$”.&lt;&#x2F;li&gt;
&lt;li&gt;Let this property have Gödel number $d$.&lt;&#x2F;li&gt;
&lt;li&gt;Now look at $\text{sub}(d, d)$ — this is $d$ applied to itself.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This creates a &lt;strong&gt;fixed point&lt;&#x2F;strong&gt; — a statement that successfully refers to itself.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-4-constructing-g-the-godel-sentence&quot;&gt;Step 4: constructing $G$ — the Gödel sentence&lt;&#x2F;h4&gt;
&lt;p&gt;Using the diagonal lemma with the property “is not provable”, Gödel constructs $G$ such that:&lt;&#x2F;p&gt;
&lt;p&gt;$G \iff$ “The statement with Gödel number $g$ is not provable”&lt;&#x2F;p&gt;
&lt;p&gt;But $g$ is the Gödel number of $G$ itself! So:&lt;&#x2F;p&gt;
&lt;p&gt;$G \iff \text{“$G$ is not provable”}$&lt;&#x2F;p&gt;
&lt;p&gt;Now we reason:&lt;&#x2F;p&gt;
&lt;p&gt;Case 1: Suppose G is provable:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Then G is false (since G says “G is not provable”)&lt;&#x2F;li&gt;
&lt;li&gt;So our system proves a false statement&lt;&#x2F;li&gt;
&lt;li&gt;The system is inconsistent! ❌&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Case 2: Suppose $\neg G$ is provable:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Then G is true (G really isn’t provable)&lt;&#x2F;li&gt;
&lt;li&gt;So $\neg G$ is false&lt;&#x2F;li&gt;
&lt;li&gt;Again, the system proves something false&lt;&#x2F;li&gt;
&lt;li&gt;Inconsistent! ❌&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Conclusion: If the system is consistent:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Neither $G$ nor $\neg G$ is provable&lt;&#x2F;li&gt;
&lt;li&gt;But $G$ is true (it correctly states its own &lt;em&gt;unprovability&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;We have a true but unprovable statement! ✅&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is the &lt;strong&gt;self-reference that Gödel uses to prove his first incompleteness theorem&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The deepest insight is that &lt;strong&gt;self-reference is unavoidable in any system strong enough to do arithmetic&lt;&#x2F;strong&gt;.
Once you can:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Encode statements as numbers&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Talk about properties of those numbers&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Use diagonalization&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You automatically get statements that assert their own &lt;em&gt;unprovability&lt;&#x2F;em&gt;.
Mathematics contains the &lt;strong&gt;seeds of its own incompleteness&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-second-incompleteness-theorem&quot;&gt;The second incompleteness theorem&lt;&#x2F;h3&gt;
&lt;p&gt;The Second Incompleteness Theorem states:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If $F$ is a consistent formal system capable of proving basic arithmetic facts, then $F$ cannot prove its own consistency.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This means &lt;strong&gt;arithmetic cannot prove that arithmetic doesn’t contradict itself&lt;&#x2F;strong&gt;!
It’s like a judge who can’t certify their own sanity — the very act of self-certification is suspect.&lt;&#x2F;p&gt;
&lt;p&gt;The Second Theorem is actually a clever consequence of the First.
Here’s the brilliant insight:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-1-formalizing-consistency&quot;&gt;Step 1: formalizing “consistency”&lt;&#x2F;h4&gt;
&lt;p&gt;First, we need to express “$F$ is consistent” in the language of arithmetic.
Gödel realized:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“$F$ is consistent” $\iff$ “$F$ does not prove both a statement and its negation”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Using Gödel numbering, this becomes:
$\text{Consistency}(F)$ = “There is no statement $A$ such that $F$ proves both $A$ and $\neg A$”&lt;&#x2F;p&gt;
&lt;p&gt;Or equivalently:
$\text{Consistency}(F)$ = “$F$ does not prove $0=1$” (since from a contradiction, you can prove anything)&lt;&#x2F;p&gt;
&lt;h4 id=&quot;step-2-the-key-connection&quot;&gt;Step 2: the key connection&lt;&#x2F;h4&gt;
&lt;p&gt;Remember our Gödel sentence $G$ from the First Theorem:&lt;&#x2F;p&gt;
&lt;p&gt;$G \iff \text{“$G$ is not provable in $F$”}$&lt;&#x2F;p&gt;
&lt;p&gt;Now here’s the brilliant move.
Gödel proved that within $F$ itself:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;$F$ can prove: “If $F$ is consistent, then $G$ is not provable”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Now comes the devastating logic:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Assume $F$ can prove its own consistency: $F \vdash \text{Con}(F)$&lt;&#x2F;li&gt;
&lt;li&gt;We know $F$ can prove: $\text{Con}(F) \rightarrow G$&lt;&#x2F;li&gt;
&lt;li&gt;By deduction: $F \vdash G$&lt;&#x2F;li&gt;
&lt;li&gt;But this means $G$ is provable!&lt;&#x2F;li&gt;
&lt;li&gt;Since $G$ says “$G$ is not provable”, $G$ must be false&lt;&#x2F;li&gt;
&lt;li&gt;So $F$ proves a false statement - $F$ is inconsistent!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We’ve shown: &lt;strong&gt;If $F$ can prove its own consistency, then $F$ is inconsistent&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Therefore: &lt;strong&gt;If $F$ is consistent, it cannot prove its own consistency&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;That’s a lot to digest.
This is a very deep result that is still being studied today.
I find this result to be on par with Cantor’s multiple infinities in beauty.
However, Gödel’s incompleteness theorems are a much more outstanding and impressive result.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;turing-and-the-halting-problem&quot;&gt;Turing and the halting problem&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;beauty-of-math-incompleteness&#x2F;alan-turing.jpg&quot; alt=&quot;Alan Turing&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Hilbert, after being aware of Gödel’s incompleteness theorems,
was devastated.
His beautiful dream of a complete and consistent mathematics was &lt;strong&gt;shattered&lt;&#x2F;strong&gt;.
But there were still hope in the idea of mathematics being decidable.&lt;&#x2F;p&gt;
&lt;p&gt;Alan Turing, in 1936, while still an undergraduate at King’s College, Cambridge,
published a paper entitled “On Computable Numbers, with an Application to the Entscheidungsproblem”.
That mouthful word, &lt;em&gt;Entscheidungsproblem&lt;&#x2F;em&gt;, is the German for what has become known as the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Halting_problem&quot;&gt;“&lt;strong&gt;halting problem&lt;&#x2F;strong&gt;”&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The halting problem is the &lt;strong&gt;problem of determining whether a program will halt or run forever&lt;&#x2F;strong&gt;.
Turing showed that the halting problem is &lt;strong&gt;undecidable&lt;&#x2F;strong&gt;,
thus shattering the last bastion of hope for a complete, consistent, and decidable mathematics.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-turing-machine&quot;&gt;The Turing machine&lt;&#x2F;h3&gt;
&lt;p&gt;To tackle the halting problem,
Turing introduced the concept of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Turing_machine&quot;&gt;&lt;strong&gt;Turing machine&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
A Turing machine is a mathematical model of a computer that can be used to compute anything.
It is comprised of a &lt;strong&gt;tape&lt;&#x2F;strong&gt;, a &lt;strong&gt;head&lt;&#x2F;strong&gt;, and a set of &lt;strong&gt;rules&lt;&#x2F;strong&gt;.
The tape is infinite in both directions, and is divided into cells.
The head can read and write symbols on the tape.
The rules are a set of instructions that the head can follow.
He showed that any &lt;strong&gt;computable function&lt;&#x2F;strong&gt; can be computed by a Turing machine.
I won’t go into much details here,
since if you are reading this through the internet,
holding on your hands or standing in front of a “Turing machine”,
is proof enough that Turing machines can compute stuff.&lt;&#x2F;p&gt;
&lt;p&gt;Using the newfound concept of the Turing machine,
Turing then redefined the concept of the &lt;strong&gt;halting problem&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a Turing machine $M$ and input $I$, will $M$ eventually halt (stop) on input $I$, or will it run forever?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To answer this question,
suppose that you have a function that detects if a Turing machine halts on a given input.
Here’s how the function signature looks like in Haskell notation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;halts&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;TuringMachine&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Input&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Bool&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This function takes a Turing machine and an input,
and returns a boolean value indicating whether the Turing machine halts on the input.&lt;&#x2F;p&gt;
&lt;p&gt;Now, let’s say that you have a Turing machine $M$ that uses the &lt;code&gt;halts&lt;&#x2F;code&gt; function to detect whether a Turing machine halts on a given input.
However, this machine loops forever if the &lt;code&gt;halts&lt;&#x2F;code&gt; function returns &lt;code&gt;True&lt;&#x2F;code&gt;,
or halts if the &lt;code&gt;halts&lt;&#x2F;code&gt; function returns &lt;code&gt;False&lt;&#x2F;code&gt;.
This could be expressed in Haskell as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;M&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;TuringMachine&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Input&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-unit z-haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;M&lt;&#x2F;span&gt; m i &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;if&lt;&#x2F;span&gt; halts m i &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;then&lt;&#x2F;span&gt; loop &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-unit z-haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, the question is:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Does $M$ halt on input $M$?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If $M$ halts on input $M$,
then $M$ loops forever.
If $M$ loops forever,
then $M$ halts on input $M$.&lt;&#x2F;p&gt;
&lt;p&gt;We have arrived at a &lt;strong&gt;contradiction&lt;&#x2F;strong&gt; and the final &lt;strong&gt;self-referential paradox&lt;&#x2F;strong&gt; in this blog post.&lt;&#x2F;p&gt;
&lt;p&gt;That’s how Turing, at the young age of 24,
proved that &lt;strong&gt;mathematics is &lt;em&gt;not&lt;&#x2F;em&gt; decidable&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;agda-proof-that-the-set-of-real-numbers-is-uncountable&quot;&gt;Agda proof that the set of real numbers is uncountable&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;agda.readthedocs.io&#x2F;&quot;&gt;&lt;strong&gt;Agda&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is a dependently typed programming language.
It is often used to prove mathematical theorems.
But you can also compile it to Haskell using GHC or to JavaScript using a native compiler.
It is like Haskell on steroids,
some call it &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;OSDgVxdP20g&quot;&gt;“&lt;strong&gt;Super Haskell&lt;&#x2F;strong&gt;”&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It follows very closely the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Curry%E2%80%93Howard_correspondence&quot;&gt;&lt;strong&gt;Curry-Howard correspondence&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
which is a &lt;strong&gt;magnificent connection between logic and programming&lt;&#x2F;strong&gt;.
People also called it “&lt;strong&gt;proof-as-program&lt;&#x2F;strong&gt;” or “&lt;strong&gt;programs-as-proofs&lt;&#x2F;strong&gt;”,
since it is a one-to-one correspondence between programs and proofs.
The basic idea is that you can write a program that proves a theorem,
and the program will type-check if the theorem is true.
This is done by having a very powerful and expressive type system,
that allows you to express the properties of the objects you are working with.
If a type is “inhabited”, it means that there exists a term&#x2F;value of that type,
which under Curry-Howard corresponds to having a proof of the proposition that the type represents.&lt;&#x2F;p&gt;
&lt;p&gt;So when a type is “&lt;em&gt;inhabited&lt;&#x2F;em&gt;” in Agda, it means:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You can construct a value of that type — there exists some term &lt;code&gt;t : T&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The corresponding logical proposition is true&#x2F;provable.&lt;&#x2F;li&gt;
&lt;li&gt;You have evidence&#x2F;proof of that proposition.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here are some Agda types and their corresponding logical propositions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;⊥&lt;&#x2F;code&gt; (bottom type) is uninhabited — corresponds to &lt;code&gt;False&lt;&#x2F;code&gt; (no proof possible).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;⊤&lt;&#x2F;code&gt; (unit type) is inhabited by &lt;code&gt;tt&lt;&#x2F;code&gt; — corresponds to trivially &lt;code&gt;True&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;A → B&lt;&#x2F;code&gt; (implication type) is inhabited by a function — corresponds to &lt;code&gt;A&lt;&#x2F;code&gt; implies &lt;code&gt;B&lt;&#x2F;code&gt; being provable.
This is called the &lt;a href=&quot;https:&#x2F;&#x2F;agda.readthedocs.io&#x2F;en&#x2F;stable&#x2F;language&#x2F;function-types.html&quot;&gt;Function type&lt;&#x2F;a&gt;
in Agda.
For example, the type of the addition function for natural numbers is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;Nat &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Nat &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Nat
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;A × B&lt;&#x2F;code&gt; (product type) is inhabited by a pair &lt;code&gt;a , b&lt;&#x2F;code&gt; — corresponds to &lt;code&gt;A&lt;&#x2F;code&gt; and &lt;code&gt;B&lt;&#x2F;code&gt; both being true.
For example, the type of a pair of natural numbers is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;Nat × Nat
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;A ⊎ B&lt;&#x2F;code&gt; (sum type) is inhabited by &lt;code&gt;inj₁ a&lt;&#x2F;code&gt; or &lt;code&gt;inj₂ b&lt;&#x2F;code&gt; — corresponds to &lt;code&gt;A&lt;&#x2F;code&gt; or &lt;code&gt;B&lt;&#x2F;code&gt; being true.
Note that &lt;code&gt;⊎&lt;&#x2F;code&gt; is the symbol for disjunction.
For example, the type of a natural number or a boolean is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;Nat ⊎ Bool
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Σ[ x ∈ A ] B x&lt;&#x2F;code&gt; (dependent sum type) is inhabited by a pair &lt;code&gt;a , b&lt;&#x2F;code&gt; — corresponds to “there exists &lt;code&gt;x : A&lt;&#x2F;code&gt; such that &lt;code&gt;B x&lt;&#x2F;code&gt; is true”.
Note that &lt;a href=&quot;https:&#x2F;&#x2F;agda.readthedocs.io&#x2F;en&#x2F;stable&#x2F;language&#x2F;built-ins.html#the-type&quot;&gt;&lt;code&gt;Σ&lt;&#x2F;code&gt; type&lt;&#x2F;a&gt; is the same as the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dependent_type&quot;&gt;dependent pair type&lt;&#x2F;a&gt; in type theory.
This is more tricky than the product type, because the type of the second component depends on the value of the first component.&lt;&#x2F;p&gt;
&lt;p&gt;For example, consider a pair where the first component is a boolean and the second component’s type depends on that boolean:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;BoolDependent&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; Bool &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-agda&quot;&gt;Set&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;BoolDependent true  &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; ℕ      &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- If true, second component is a natural number&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;BoolDependent false &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; String &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- If false, second component is a string&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- The dependent sum type:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;BoolDependentPair&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-agda&quot;&gt;Set&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;BoolDependentPair &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; Σ[ b ∈ Bool ] BoolDependent b
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A value of this type could be &lt;code&gt;true , 42&lt;&#x2F;code&gt; (boolean true paired with natural number 42) or &lt;code&gt;false , &quot;hello&quot;&lt;&#x2F;code&gt; (boolean false paired with string “hello”).
The type of the second component depends on the value of the first component.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;A ≡ B&lt;&#x2F;code&gt; (equality type) is inhabited by a proof of &lt;code&gt;A&lt;&#x2F;code&gt; being equal to &lt;code&gt;B&lt;&#x2F;code&gt; — corresponds to &lt;code&gt;A&lt;&#x2F;code&gt; and &lt;code&gt;B&lt;&#x2F;code&gt; being the same.
Note that &lt;code&gt;≡&lt;&#x2F;code&gt; is the symbol for equality.&lt;&#x2F;p&gt;
&lt;p&gt;For example, we can prove that &lt;code&gt;2 + 2 ≡ 4&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;proof-2+2=4&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-agda&quot;&gt;2&lt;&#x2F;span&gt; + &lt;span class=&quot;z-constant z-numeric z-agda&quot;&gt;2&lt;&#x2F;span&gt; ≡ &lt;span class=&quot;z-constant z-numeric z-agda&quot;&gt;4&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;proof-2+2=4 &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; refl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code&gt;refl&lt;&#x2F;code&gt; (reflexivity) is the constructor that proves any term is equal to itself.
Since &lt;code&gt;2 + 2&lt;&#x2F;code&gt; evaluates to &lt;code&gt;4&lt;&#x2F;code&gt; definitionally in Agda,
we can use &lt;code&gt;refl&lt;&#x2F;code&gt; to prove they are equal. The type &lt;code&gt;2 + 2 ≡ 4&lt;&#x2F;code&gt; is inhabited by the proof &lt;code&gt;refl&lt;&#x2F;code&gt;,
which serves as evidence that this equality holds.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To learn Agda, a really nice resource is not only the &lt;a href=&quot;https:&#x2F;&#x2F;agda.readthedocs.io&#x2F;&quot;&gt;&lt;strong&gt;Agda documentation&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
but also the &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;certainty-by-construction&quot;&gt;&lt;strong&gt;Certainty by Construction: Software and Mathematics in Agda&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
book by Sandy Maguire.&lt;&#x2F;p&gt;
&lt;p&gt;I also suggest this quick introduction to Agda:&lt;&#x2F;p&gt;
&lt;style&gt;
  .embed-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    max-width: 100%;
  }
  .embed-container iframe,
  .embed-container object,
  .embed-container embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
&lt;&#x2F;style&gt;
&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe
    src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;OSDgVxdP20g&quot;
    frameborder=&quot;0&quot;
    allowfullscreen
  &gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Now, let’s prove that the &lt;strong&gt;set of real numbers is &lt;em&gt;uncountable&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;.
I’m gonna dump the whole Agda code here,
then explain the parts that are not obvious.
To run the code (which is the same as proving the code or theorem, since the code is the theorem, a.k.a Curry-Howard correspondence),
dump the code into a file named &lt;code&gt;CantorDiagonalReals.agda&lt;&#x2F;code&gt;.
You can run the code by installing Agda and running &lt;code&gt;agda CantorDiagonalReals.agda&lt;&#x2F;code&gt;.
Agda will silently compile the code and if nothing is printed,
it means the code (and the theorem) is correct (or true).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;module&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-agda&quot;&gt;CantorDiagonalReals&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;where&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;open import&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-agda&quot;&gt;Data.Nat&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;using&lt;&#x2F;span&gt; (ℕ; zero; suc)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;open import&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-agda&quot;&gt;Data.Bool&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;using&lt;&#x2F;span&gt; (Bool; true; false)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;open import&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-agda&quot;&gt;Data.Empty&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;using&lt;&#x2F;span&gt; (⊥)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;open import&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-agda&quot;&gt;Data.Product&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;using&lt;&#x2F;span&gt; (Σ; _,_; _×_; Σ-&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;syntax&lt;&#x2F;span&gt;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;open import&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-agda&quot;&gt;Relation.Binary.PropositionalEquality&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;using&lt;&#x2F;span&gt; (_≡_; refl; cong; trans)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;open import&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-agda&quot;&gt;Relation.Nullary&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;using&lt;&#x2F;span&gt; (¬_)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- A real number in (0,1) represented as an infinite sequence of binary digits&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;Real&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-agda&quot;&gt;Set&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;Real &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; ℕ &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Bool  &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- Each position has a digit 0 or 1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- Abbreviation for inequality&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;_≢_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; {A &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-agda&quot;&gt;Set&lt;&#x2F;span&gt;} &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; A &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; A &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-agda&quot;&gt;Set&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;x ≢ y &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; ¬ (x ≡ y)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- Helper to flip a bit&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;flip&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; Bool &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Bool
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip true &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; false
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip false &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; true
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- Proof that flip always changes the bit&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;flip-changes&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; (b &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; Bool) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; b ≢ flip b
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip-changes true ()
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip-changes false ()
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- The diagonal argument: no enumeration of reals in (0,1) exists&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;no-enumeration&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; (f &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ℕ &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Real) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Σ[ r ∈ Real ] ((n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ℕ) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; f n ≢ r)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;no-enumeration f &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; diagonal , proof
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;where&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- Construct the diagonal number by flipping the nth digit of the nth number&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;diagonal&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; Real
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;    diagonal n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; flip (f n n)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- Proof that diagonal differs from every f n&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;proof&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; (n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ℕ) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; f n ≢ diagonal
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;    proof n eq &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; contradiction
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;      &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;where&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- If f n = diagonal, then at position n:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- (f n n) = (diagonal n) = flip (f n n)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;same-at-n&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; f n n ≡ diagonal n
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        same-at-n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; cong (&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;λ&lt;&#x2F;span&gt; r &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; r n) eq
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- But diagonal n = flip (f n n) by definition&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;diagonal-def&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; diagonal n ≡ flip (f n n)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        diagonal-def &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; refl
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- So f n n = flip (f n n)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;self-eq-flip&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; f n n ≡ flip (f n n)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        self-eq-flip &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; trans same-at-n diagonal-def
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- This contradicts the fact that flip always changes the bit&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;contradiction&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ⊥
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;        contradiction &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; flip-changes (f n n) self-eq-flip
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s break down this proof step by step:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-real-number-representation&quot;&gt;1. Real number representation&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;Real&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-agda&quot;&gt;Set&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;Real &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; ℕ &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Bool  &lt;span class=&quot;z-comment z-line z-double-dash z-agda&quot;&gt;-- Each position has a digit 0 or 1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We represent real numbers in the interval $(0,1)$ as infinite sequences of binary digits.
This will make the proof easier to follow without losing any generality.
A real number is a function from natural numbers to booleans, where each position gives us a binary digit.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-the-flip-function&quot;&gt;2. The flip function&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;flip&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; Bool &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Bool
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip true &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; false
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip false &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; true
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;flip-changes&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; (b &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; Bool) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; b ≢ flip b
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip-changes true ()
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;flip-changes false ()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;flip&lt;&#x2F;code&gt; function switches &lt;code&gt;true&lt;&#x2F;code&gt; to &lt;code&gt;false&lt;&#x2F;code&gt; and vice versa.
The &lt;code&gt;flip-changes&lt;&#x2F;code&gt; proof shows that flipping a boolean always produces a different boolean.
The &lt;code&gt;()&lt;&#x2F;code&gt; pattern means “impossible case” — there’s no way &lt;code&gt;true ≡ false&lt;&#x2F;code&gt; or &lt;code&gt;false ≡ true&lt;&#x2F;code&gt;.
It is called the &lt;a href=&quot;https:&#x2F;&#x2F;agda.readthedocs.io&#x2F;en&#x2F;stable&#x2F;language&#x2F;function-definitions.html#absurd-patterns&quot;&gt;&lt;strong&gt;absurd pattern&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-the-main-theorem&quot;&gt;3. The main theorem&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;no-enumeration&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; (f &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ℕ &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Real) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; Σ[ r ∈ Real ] ((n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ℕ) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; f n ≢ r)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This says: “For any supposed enumeration &lt;code&gt;f&lt;&#x2F;code&gt; of real numbers, there exists a real number &lt;code&gt;r&lt;&#x2F;code&gt; that differs from every number in the enumeration.”
This is exactly Cantor’s &lt;strong&gt;diagonalization argument&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-the-diagonal-construction&quot;&gt;4. The diagonal construction&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;diagonal&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; Real
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;diagonal n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; flip (f n n)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We construct our diagonal number by taking the $n$-th digit of the $n$-th number in the enumeration and flipping it.
So &lt;code&gt;diagonal 0 = flip (f 0 0)&lt;&#x2F;code&gt;, &lt;code&gt;diagonal 1 = flip (f 1 1)&lt;&#x2F;code&gt;, etc.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-the-proof-of-difference&quot;&gt;5. The proof of difference&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;proof&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; (n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ℕ) &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; f n ≢ diagonal
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;proof n eq &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; contradiction
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For any number &lt;code&gt;f n&lt;&#x2F;code&gt; in our enumeration, we prove it cannot be equal to our diagonal number.
If they were equal (&lt;code&gt;eq : f n ≡ diagonal&lt;&#x2F;code&gt;), we derive a contradiction.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;6-the-contradiction&quot;&gt;6. The contradiction&lt;&#x2F;h3&gt;
&lt;p&gt;Now let’s examine the contradiction step by step.
We assume we have an equality &lt;code&gt;eq : f n ≡ diagonal&lt;&#x2F;code&gt; and derive a contradiction:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;same-at-n&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; f n n ≡ diagonal n
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;same-at-n &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; cong (&lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;λ&lt;&#x2F;span&gt; r &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;→&lt;&#x2F;span&gt; r n) eq
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This uses &lt;strong&gt;congruence&lt;&#x2F;strong&gt; (&lt;code&gt;cong&lt;&#x2F;code&gt;) to say: if two functions are equal (&lt;code&gt;f n ≡ diagonal&lt;&#x2F;code&gt;),
then applying them to the same argument (&lt;code&gt;n&lt;&#x2F;code&gt;) gives equal results.
So &lt;code&gt;f n n ≡ diagonal n&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;λ r → r n&lt;&#x2F;code&gt; is a &lt;strong&gt;lambda function&lt;&#x2F;strong&gt; (anonymous function) that takes a function &lt;code&gt;r&lt;&#x2F;code&gt; and applies it to the argument &lt;code&gt;n&lt;&#x2F;code&gt;.
It’s like saying “given any function &lt;code&gt;r&lt;&#x2F;code&gt;, apply it to &lt;code&gt;n&lt;&#x2F;code&gt;”.
So &lt;code&gt;cong (λ r → r n) eq&lt;&#x2F;code&gt; means: “if &lt;code&gt;f n ≡ diagonal&lt;&#x2F;code&gt;,
then applying the operation “apply to &lt;code&gt;n&lt;&#x2F;code&gt;” to both sides gives &lt;code&gt;f n n ≡ diagonal n&lt;&#x2F;code&gt;“.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;diagonal-def&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; diagonal n ≡ flip (f n n)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;diagonal-def &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; refl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is just the definition of our diagonal function unfolding.
Since &lt;code&gt;diagonal n = flip (f n n)&lt;&#x2F;code&gt; by definition,
we can prove this equality with &lt;code&gt;refl&lt;&#x2F;code&gt; (reflexivity).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;self-eq-flip&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; f n n ≡ flip (f n n)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;self-eq-flip &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; trans same-at-n diagonal-def
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we chain the equalities using &lt;strong&gt;transitivity&lt;&#x2F;strong&gt; (&lt;code&gt;trans&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We know &lt;code&gt;f n n ≡ diagonal n&lt;&#x2F;code&gt; (from &lt;code&gt;same-at-n&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;We know &lt;code&gt;diagonal n ≡ flip (f n n)&lt;&#x2F;code&gt; (from &lt;code&gt;diagonal-def&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Therefore &lt;code&gt;f n n ≡ flip (f n n)&lt;&#x2F;code&gt; (by transitivity)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But this is &lt;strong&gt;impossible&lt;&#x2F;strong&gt;!
We’re saying a boolean equals its own flip.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;agda&quot; class=&quot;language-agda z-code&quot;&gt;&lt;code class=&quot;language-agda&quot; data-lang=&quot;agda&quot;&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;&lt;span class=&quot;z-entity z-name z-agda&quot;&gt;contradiction&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;:&lt;&#x2F;span&gt; ⊥
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-agda&quot;&gt;contradiction &lt;span class=&quot;z-keyword z-other z-agda&quot;&gt;=&lt;&#x2F;span&gt; flip-changes (f n n) self-eq-flip
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, we use our &lt;code&gt;flip-changes&lt;&#x2F;code&gt; lemma,
which proves that &lt;code&gt;(b : Bool) → b ≢ flip b&lt;&#x2F;code&gt;.
Since we have a proof that &lt;code&gt;f n n ≡ flip (f n n)&lt;&#x2F;code&gt; (which contradicts &lt;code&gt;flip-changes&lt;&#x2F;code&gt;),
we can derive the bottom type &lt;code&gt;⊥&lt;&#x2F;code&gt;
(which is uninhabited, so it is false&#x2F;contradiction).&lt;&#x2F;p&gt;
&lt;p&gt;This elegant proof captures the essence of Cantor’s diagonalization:
&lt;strong&gt;we construct a number that systematically differs from every number in any proposed enumeration,
proving that &lt;em&gt;no such enumeration can exist&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I hope you enjoyed this journey into the beauty of mathematics.
These self-referential paradoxes underlie the
absurd dichotomy of truth and provability,
while also revealing the profound beauty of mathematics’ uncomprehensiveness.&lt;&#x2F;p&gt;
&lt;p&gt;I often think that mathematics is the language of the universe.
Yet, given the incompleteness of mathematics,
will it ever be able to describe the universe?
Or will the universe be engulfed by a mist of forever unknowable mysteries?&lt;&#x2F;p&gt;
&lt;p&gt;Like Hilbert, I am left yelling at the void:
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ignoramus_et_ignorabimus&quot;&gt;“Wir müssen wissen, wir werden wissen.”&lt;&#x2F;a&gt;,
which translates to “We must know, we will know.”&lt;&#x2F;p&gt;
&lt;footer class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-pairing-function&quot;&gt;
&lt;p&gt;This is called a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pairing_function&quot;&gt;&lt;strong&gt;pairing function&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, and specifically the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cantor_pairing_function&quot;&gt;&lt;strong&gt;Cantor pairing function&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. &lt;a href=&quot;#fr-pairing-function-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-godel-incompleteness&quot;&gt;
&lt;p&gt;If you really want to dive deep into the details of Gödel’s incompleteness theorem, check out &lt;a href=&quot;https:&#x2F;&#x2F;www.logicmatters.net&#x2F;igt&quot;&gt;&lt;strong&gt;Gödel Without (Too Many) Tears&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; by the logician Peter Smith. &lt;a href=&quot;#fr-godel-incompleteness-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-peano&quot;&gt;
&lt;p&gt;Another rabbit hole to dive: &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Peano_arithmetic&quot;&gt;&lt;strong&gt;Peano’s arithmetic&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. &lt;a href=&quot;#fr-peano-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;footer&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Randomness in computation: sprinkle a little bit of randomness, and voilà!</title>
        <published>2025-04-07T06:57:00+00:00</published>
        <updated>2025-04-07T06:57:00+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/randomness/" type="text/html"/>
        <id>https://storopoli.com/blog/randomness/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;randomness&#x2F;randomness-meme.jpg&quot; alt=&quot;Just sprinkle a little bit of randomness, and voilà!&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes when you deal with complicated computations,
either because of the input size or the complexity of the computation,
you cannot get an answer in any feasible amount of time,
no matter how much computational power you have.&lt;&#x2F;p&gt;
&lt;p&gt;When the limits of tractability are reached,
we can give up deterministic computation and embrace &lt;strong&gt;randomness&lt;&#x2F;strong&gt;
to get an answer in a much more reasonable time.&lt;&#x2F;p&gt;
&lt;p&gt;This is the case of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Monte_Carlo_method&quot;&gt;Monte Carlo methods&lt;&#x2F;a&gt;,
which are a class of algorithms that use &lt;strong&gt;random sampling&lt;&#x2F;strong&gt;
to solve mathematical problems.
And, of course, like everything nice in math and computer science,
it has the &lt;strong&gt;Von Neumann’s fingerprints&lt;&#x2F;strong&gt; all over it.
Alas, that is a story for another post, that I already covered in
&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;von-neumann&#x2F;&quot;&gt;“Von Neumann: the Sharpest Mind of the 20th Century”&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I was recently skimming over a textbook that I used to use
in my undergraduate course on probability theory (Mitzenmacher and Upfal’s
“Probability and Computing”&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-pdf-1&quot;&gt;&lt;a href=&quot;#fn-pdf&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, see references below),
and I stumbled upon a very interesting algorithm for calculating the &lt;strong&gt;median&lt;&#x2F;strong&gt; of a list.&lt;&#x2F;p&gt;
&lt;p&gt;By the way, this textbook has one of the &lt;strong&gt;best covers&lt;&#x2F;strong&gt; in math textbooks.
It is Alice in Wonderland dealing with a combinatorial explosion,
see it below:&lt;&#x2F;p&gt;


&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;storopoli.com&amp;#x2F;processed_images&amp;#x2F;probability-and-computing.c46dbbb24f491e7b.jpg&quot; alt=&quot;Probability and Computing: Randomization and Probabilistic Techniques in Algorithms and Data Analysis 2nd Edition&quot; &#x2F;&gt;
&lt;p&gt;The algorithm uses sampling to probabilistically find the &lt;strong&gt;median&lt;&#x2F;strong&gt;,
and uses &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Chebyshev&amp;#x27;s_inequality&quot;&gt;Chebyshev’s inequality&lt;&#x2F;a&gt;,
an upper bound on the probability of deviation of a random variable from its mean.
Since it is a probabilistic algorithm,
it finds the median in $O(n)$ (linear time) with probability
$1 - n^{-\frac{1}{4}}$ (close to $1$ for large $n$).
Note that for any deterministic algorithm to find the median,
it needs to sort the list, which takes $O(n \log n)$ (linearithmic time)
on average or $O(n^2)$ (quadratic time) in the worst case&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-quicksort-1&quot;&gt;&lt;a href=&quot;#fn-quicksort&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
You can always iterate and run the algorithm until you get a result,
but now the runtime is &lt;strong&gt;non-deterministic&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The nice thing about the algorithm is that Chebyshev’s inequality
does not makes assumptions about the distribution of the variable,
just that it has a &lt;strong&gt;finite variance&lt;&#x2F;strong&gt;.
This is excellent since we can move away from the &lt;strong&gt;lala-land&lt;&#x2F;strong&gt; of
normal distributions assumptions that everything is a Gaussian bell curve&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-bayesian-1&quot;&gt;&lt;a href=&quot;#fn-bayesian&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chebyshev-s-inequality&quot;&gt;Chebyshev’s Inequality&lt;&#x2F;h2&gt;
&lt;p&gt;Chebyshev’s inequality provides an upper bound on the probability
of deviation of a random variable (with finite variance) from its mean.&lt;&#x2F;p&gt;
&lt;p&gt;The inequality is given by:&lt;&#x2F;p&gt;
&lt;p&gt;$$
P(|X - \mu| \geq k \sigma) \leq \frac{1}{k^2}
$$&lt;&#x2F;p&gt;
&lt;p&gt;where $X$ is a random variable, $\mu$ is the mean,
$\sigma$ is the standard deviation, and $k$ is a positive real number.&lt;&#x2F;p&gt;
&lt;p&gt;This is a consequence of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Markov&amp;#x27;s_inequality&quot;&gt;Markov’s inequality&lt;&#x2F;a&gt;,
and can be derived using simple algebra.
The reader that is interested in the proof or more details,
see the Wikipedia pages linked above.&lt;&#x2F;p&gt;
&lt;p&gt;Because Chebyshev’s inequality can be applied to any distribution with finite mean and variance,
it generally gives &lt;strong&gt;looser bounds&lt;&#x2F;strong&gt; compared to what we might get if we knew more about the specific distribution.
Here’s a table showing how much of the distribution’s values must lie within $k$ standard deviations of the mean:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;$k$&lt;&#x2F;th&gt;&lt;th&gt;Min. % within $k$ standard deviations&lt;&#x2F;th&gt;&lt;th&gt;Max. % beyond $k$ standard deviations&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;0%&lt;&#x2F;td&gt;&lt;td&gt;100%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;$\sqrt{2}$&lt;&#x2F;td&gt;&lt;td&gt;50%&lt;&#x2F;td&gt;&lt;td&gt;50%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;75%&lt;&#x2F;td&gt;&lt;td&gt;25%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;88.8889%&lt;&#x2F;td&gt;&lt;td&gt;11.1111%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;93.75%&lt;&#x2F;td&gt;&lt;td&gt;6.25%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;96%&lt;&#x2F;td&gt;&lt;td&gt;4%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;99%&lt;&#x2F;td&gt;&lt;td&gt;1%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;For example, while we know that for a normal distribution about 68% of values lie within one standard deviation,
Chebyshev only tells us that &lt;strong&gt;at least&lt;&#x2F;strong&gt; 0% must lie within one standard deviation!
This is the price we pay for having a bound that works on any distribution.
Yet, it is still a &lt;strong&gt;very useful bound&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;randomized-median&quot;&gt;Randomized Median&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, now let’s see in practice how this works.
Below is the algorithm for finding the median of a list,
as described in algorithm 3.1 in the “Probability and Computing” textbook:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;&#x2F;strong&gt; A set $S$ of $n$ elements over a totally ordered universe.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;&#x2F;strong&gt; The median element of $S$, denoted by $m$.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Pick a (multi-)set $R$ of $\lceil n^{\frac{3}{4}} \rceil$ elements in $S$, chosen independently and uniformly at random with replacement.&lt;&#x2F;li&gt;
&lt;li&gt;Sort the set $R$.&lt;&#x2F;li&gt;
&lt;li&gt;Let $d$ be the $\bigg(\left\lfloor \frac{1}{2}n^{\frac{3}{4}} - \sqrt{n} \right\rfloor\bigg)$th smallest element in the sorted set $R$.&lt;&#x2F;li&gt;
&lt;li&gt;Let $u$ be the $\bigg(\left\lceil \frac{1}{2}n^{\frac{3}{4}} + \sqrt{n} \right\rceil\bigg)$th smallest element in the sorted set $R$.&lt;&#x2F;li&gt;
&lt;li&gt;By comparing every element in $S$ to $d$ and $u$, compute the set $C = \big\{x \in S : d \leq x \leq u \big\}$ and the numbers $\ell_d = \bigg| \big\{x \in S : x &amp;lt; d \big\}\bigg|$ and $\ell_u = \bigg| \big\{x \in S : x &amp;gt; u \big\}\bigg|$.&lt;&#x2F;li&gt;
&lt;li&gt;If $\ell_d &amp;gt; n&#x2F;2$ or $\ell_u &amp;gt; n&#x2F;2$ then FAIL.&lt;&#x2F;li&gt;
&lt;li&gt;If $\big|C\big| \leq 4n^{\frac{3}{4}}$ then sort the set $C$, otherwise FAIL.&lt;&#x2F;li&gt;
&lt;li&gt;Output the $\big(\lfloor \frac{n}{2} \rfloor - \ell_d + 1\big)$th element in the sorted order of $C$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;As you can see, the algorithm starts by sampling a set of elements from the list,
sorting them, and then using the sorted elements to find the median.
How it finds the median is by using the set $C$,
which is the set of elements in $S$ that are between $d$ and $u$,
where $d$ is the lower bound and $u$ is the upper bound of the
sampled set $R$.&lt;&#x2F;p&gt;
&lt;p&gt;The algorithm’s brilliance lies in its &lt;strong&gt;probabilistic guarantees&lt;&#x2F;strong&gt;.
It can fail in three ways:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Too few sampled elements are less than the true median&lt;&#x2F;li&gt;
&lt;li&gt;Too few sampled elements are greater than the true median&lt;&#x2F;li&gt;
&lt;li&gt;The set $C$ becomes too large to sort efficiently&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;However, the probability of any of these failures occurring is &lt;strong&gt;remarkably small&lt;&#x2F;strong&gt;: less than $n^{-\frac{1}{4}}$.
This means that as the input size grows, the chance of failure becomes increasingly negligible:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;For n = 10,000: failure probability ≤ 0.1&lt;&#x2F;li&gt;
&lt;li&gt;For n = 1,000,000: failure probability ≤ 0.032&lt;&#x2F;li&gt;
&lt;li&gt;For n = 100,000,000: failure probability ≤ 0.01&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When the algorithm doesn’t fail (which is the vast majority of the time),
it is guaranteed to find the &lt;strong&gt;exact median&lt;&#x2F;strong&gt; in linear time.
This is achieved by carefully choosing the sample size, $n^{\frac{3}{4}}$, and
the buffer zone around the median, $\sqrt{n}$, to balance between:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Having enough samples to make failure unlikely&lt;&#x2F;li&gt;
&lt;li&gt;Keeping the set $C$ small enough to sort quickly&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The algorithm provides two important guarantees:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Correctness&lt;&#x2F;strong&gt;: The algorithm is guaranteed to either FAIL or return the true median.
This is proven using Chebyshev’s inequality in two steps.
First, we show that the true median $m$ will be in set $C$ with high probability:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Let $Y_1$ be the count of sampled elements ≤ $m$ in $R$
&lt;ul&gt;
&lt;li&gt;When $Y_1 &amp;lt; \frac{1}{2}n^{\frac{3}{4}} - \sqrt{n}$, we call this event $\mathcal{E}_1$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Let $Y_2$ be the count of sampled elements ≥ $m$ in $R$
&lt;ul&gt;
&lt;li&gt;When $Y_2 &amp;lt; \frac{1}{2}n^{\frac{3}{4}} - \sqrt{n}$, we call this event $\mathcal{E}_2$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;When $|C| &amp;gt; 4n^{\frac{3}{4}}$, we call this event $\mathcal{E}_3$&lt;&#x2F;li&gt;
&lt;li&gt;By Chebyshev’s inequality, each event has probability at most $\frac{1}{4}n^{-\frac{1}{4}}$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Second, we show that when $m$ is in $C$, we find it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$\ell_d$ counts elements &amp;lt; $d$, so there are exactly $\big\lfloor \frac{n}{2} \big\rfloor - \ell_d$ elements between $d$ and $m$&lt;&#x2F;li&gt;
&lt;li&gt;Therefore, $m$ must be the $\bigg(\big\lfloor \frac{n}{2} \big\rfloor - \ell_d + 1\bigg)$th element in the sorted $C$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Linear Time&lt;&#x2F;strong&gt;: The algorithm runs in $O(n)$ time when it succeeds because:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Sampling and sorting $R$ takes $O\left(n^\frac{3}{4} \log n\right)$ time&lt;&#x2F;li&gt;
&lt;li&gt;Comparing all elements to $d$ and $u$ takes $O(n)$ time&lt;&#x2F;li&gt;
&lt;li&gt;Sorting $C$ takes $O\left(n^\frac{3}{4} \log n\right)$ time since $|C| \leq 4n^\frac{3}{4}$&lt;&#x2F;li&gt;
&lt;li&gt;All other operations are constant time&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;why-these-guarantees-work&quot;&gt;Why These Guarantees Work&lt;&#x2F;h3&gt;
&lt;p&gt;The key to understanding why this algorithm works lies in analyzing the &lt;strong&gt;probability of failure&lt;&#x2F;strong&gt;.
Let’s look at how we bound the probability of having too few samples below the median (event $\mathcal{E}_1$):&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For each sampled element $i$, define an indicator variable $X_i$ where:
$$
X_i = 1 \text{ if the $i$th sample is } \leq \text{ median}
$$
$$
X_i = 0 \text{ otherwise}
$$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Since we sample with replacement, the $X_i$ are independent. And since there are
$\frac{n-1}{2} + 1$ elements ≤ median in $S$, we have:
$$
P(X_i = 1) = \frac{\frac{n-1}{2} + 1}{n} = \frac{1}{2} + \frac{1}{2n}
$$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Let $Y_1 = \sum_{i=1}^{n^{3&#x2F;4}} X_i$ count samples ≤ median. This is a binomial random variable with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Expected value: $E[Y_1] = n^{\frac{3}{4}}\left(\frac{1}{2} + \frac{1}{2n}\right)$&lt;&#x2F;li&gt;
&lt;li&gt;Variance: $Var[Y_1] &amp;lt; \frac{1}{4}n^{\frac{3}{4}}$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Using Chebyshev’s inequality:
$$
P \left(Y_1 &amp;lt; \frac{1}{2}n^{\frac{3}{4}} - \sqrt{n} \right) \leq \frac{Var[Y_1]}{n} &amp;lt; \frac{1}{4}n^{-\frac{1}{4}}
$$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This shows that both events $\mathcal{E}_1$ and $\mathcal{E}_2$ have probability at most $\frac{1}{4}n^{-\frac{1}{4}}$,
and also that $\mathcal{E}_3$ has probability at most $\frac{1}{4}n^{-\frac{1}{4}}$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
P(\mathcal{E}_1) \leq P(\mathcal{E}_2 + \mathcal{E}_3) \leq \frac{1}{2}n^{-\frac{1}{4}}
$$&lt;&#x2F;p&gt;
&lt;p&gt;All these events combined demonstrate that the algorithm rarely fails: the probability of having too few samples
on either side of the median decreases as $n^{-\frac{1}{4}}$, becoming negligible for large $n$.
If higher reliability is needed, you can simply run the algorithm multiple times,
as each run is independent.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;haskell-implementation&quot;&gt;Haskell Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;I implemented the algorithm in &lt;strong&gt;Haskell&lt;&#x2F;strong&gt;,
because I stare at &lt;strong&gt;Rust&lt;&#x2F;strong&gt; code 8+ hours a day,
and I want programming in a language that
“if it compiles, it is guaranteed to run”.
The only other language apart from Rust that has this property,
and some might say that it is the only language that has this property,
is Haskell.&lt;&#x2F;p&gt;
&lt;p&gt;The code can be found on GitHub at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;storopoli&#x2F;randomized-median&quot;&gt;&lt;code&gt;storopoli&#x2F;randomized-median&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So let’s first go over the vanilla, classical, deterministic median algorithm:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;median&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Ord&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Fractional&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;) &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; [&lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;] &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Maybe&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;&#x2F;span&gt;median &lt;span class=&quot;z-constant z-language z-empty-list z-haskell&quot;&gt;[]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Nothing&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;median xs &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; First convert list to array for O(1) random access
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;let&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; length xs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      arr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; listArray (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;1&lt;&#x2F;span&gt;) xs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Sort the array elements
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      sorted &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; sort (elems arr)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      sortedArr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; listArray (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;1&lt;&#x2F;span&gt;) sorted
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      mid &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-function z-infix z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-entity z-haskell&quot;&gt;`&lt;&#x2F;span&gt;div&lt;span class=&quot;z-punctuation z-definition z-entity z-haskell&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;   &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;if&lt;&#x2F;span&gt; odd n
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;then&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Just&lt;&#x2F;span&gt; (sortedArr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;!&lt;&#x2F;span&gt; mid)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Just&lt;&#x2F;span&gt; ((sortedArr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;!&lt;&#x2F;span&gt; (mid &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;1&lt;&#x2F;span&gt;) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;+&lt;&#x2F;span&gt; sortedArr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;!&lt;&#x2F;span&gt; mid) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;2&lt;&#x2F;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First we define a function signature for the median function:
it takes a list or elements of some type that is an instance of both the &lt;code&gt;Ord&lt;&#x2F;code&gt; type class,
and the &lt;code&gt;Fractional&lt;&#x2F;code&gt; type class.
This is because we must assure the Haskell compiler that the elements of the list can be
ordered and that we can perform fractional arithmetic on them.
It returns a &lt;code&gt;Maybe a&lt;&#x2F;code&gt; because the median is not defined for empty lists.
The &lt;code&gt;Maybe&lt;&#x2F;code&gt; type is an instance of the &lt;code&gt;Monad&lt;&#x2F;code&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-monad-1&quot;&gt;&lt;a href=&quot;#fn-monad&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; type class,
which allows us to use the &lt;code&gt;&amp;gt;&amp;gt;=&lt;&#x2F;code&gt; operator to chain computations that may fail.
It can take two values &lt;code&gt;Nothing&lt;&#x2F;code&gt; or &lt;code&gt;Just a&lt;&#x2F;code&gt;, where &lt;code&gt;a&lt;&#x2F;code&gt; is the type of the elements of the list.&lt;&#x2F;p&gt;
&lt;p&gt;For the case of an empty list, we return &lt;code&gt;Nothing&lt;&#x2F;code&gt;.
For the case of a non-empty list, we convert the list to an array,
sort the array, and then find the median,
returning the median as a &lt;code&gt;Just&lt;&#x2F;code&gt; value.&lt;&#x2F;p&gt;
&lt;p&gt;Now, let’s implement the randomized median algorithm:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;randomizedMedian&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Ord&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;) &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; [&lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;] &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Int&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Maybe&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;&#x2F;span&gt;randomizedMedian &lt;span class=&quot;z-constant z-language z-empty-list z-haskell&quot;&gt;[]&lt;&#x2F;span&gt; _ &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Nothing&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;randomizedMedian xs seed &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;let&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; length xs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      arr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; listArray (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;1&lt;&#x2F;span&gt;) xs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Step 1: Sample n^(3&#x2F;4) elements with replacement
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      sampleSize &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; ceiling (fromIntegral n ** (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;3&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;4&lt;&#x2F;span&gt;))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      gen &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; mkStdGen seed
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      indices &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; take sampleSize &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; randomRs (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;1&lt;&#x2F;span&gt;) gen
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Step 2: Sort the sample
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      sample &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; sort [arr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;!&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;|&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; indices]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      sampleArr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; listArray (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; length sample &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;1&lt;&#x2F;span&gt;) sample
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Step 3: Find d (the lower bound element)
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      dIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; floor (fromIntegral n ** (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;3&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;4&lt;&#x2F;span&gt;) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;2&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; sqrt (fromIntegral n))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      d &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;if&lt;&#x2F;span&gt; dIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt; &amp;amp;&amp;amp; dIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; length sample
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;          &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;then&lt;&#x2F;span&gt; sampleArr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;!&lt;&#x2F;span&gt; dIndex
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;          &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;else&lt;&#x2F;span&gt; error &lt;span class=&quot;z-string z-quoted z-double z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Invalid d index&lt;span class=&quot;z-punctuation z-definition z-string z-end z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Step 4: Find u (the upper bound element)
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      uIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; floor (fromIntegral n ** (&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;3&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;4&lt;&#x2F;span&gt;) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;2&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;+&lt;&#x2F;span&gt; sqrt (fromIntegral n))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      u &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;if&lt;&#x2F;span&gt; uIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt; &amp;amp;&amp;amp; uIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; length sample
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;          &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;then&lt;&#x2F;span&gt; sampleArr &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;!&lt;&#x2F;span&gt; uIndex
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;          &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;else&lt;&#x2F;span&gt; error &lt;span class=&quot;z-string z-quoted z-double z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Invalid u index&lt;span class=&quot;z-punctuation z-definition z-string z-end z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Step 5: Compute set C and counts
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      ld &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; length &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; filter (&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; d) xs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      lu &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; length &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; filter (&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; u) xs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      c &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; sort &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; filter (&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;\&lt;&#x2F;span&gt;x &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; d &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt; x &amp;amp;&amp;amp; x &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt; u) xs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Step 6 &amp;amp; 7: Check failure conditions
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      halfN &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; n &lt;span class=&quot;z-keyword z-operator z-function z-infix z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-entity z-haskell&quot;&gt;`&lt;&#x2F;span&gt;div&lt;span class=&quot;z-punctuation z-definition z-entity z-haskell&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;   &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;in&lt;&#x2F;span&gt; ( &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;if&lt;&#x2F;span&gt; ((ld &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; halfN &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;||&lt;&#x2F;span&gt; lu &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; halfN) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;||&lt;&#x2F;span&gt; (length c &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;4&lt;&#x2F;span&gt; * sampleSize)) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;||&lt;&#x2F;span&gt; null c
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;          &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;then&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Nothing&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;          &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;else&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;            ( &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;let&lt;&#x2F;span&gt; targetIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; halfN &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&lt;&#x2F;span&gt; ld
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;               &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;if&lt;&#x2F;span&gt; targetIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;0&lt;&#x2F;span&gt; &amp;amp;&amp;amp; targetIndex &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; length c
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;                    &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;then&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;                      &lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; Step 8: Output the median
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;                      &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Just&lt;&#x2F;span&gt; (c &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;!!&lt;&#x2F;span&gt; targetIndex)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;                    &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;else&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;                      &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Nothing&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;            )
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;      )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’ve added comments to the code with respect to the algorithm steps.
First, the function signature is almost the same as the deterministic median function.
There are two differences:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The elements of the list does not need to be a &lt;code&gt;Fractional&lt;&#x2F;code&gt; type.&lt;&#x2F;li&gt;
&lt;li&gt;We now take an additional parameter, &lt;code&gt;seed&lt;&#x2F;code&gt;,
which is the seed for the random number generator.
This is needed since we are using a random number generator to sample the elements from the list.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;As before, for the case of an empty list, we return &lt;code&gt;Nothing&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For the case of a non-empty list, we first convert the list to an array,
and then sample &lt;code&gt;n^(3&#x2F;4)&lt;&#x2F;code&gt; elements from the list with replacement.
We use the &lt;a href=&quot;https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;random-1.1&#x2F;docs&#x2F;System-Random.html#v:randomR&quot;&gt;&lt;code&gt;randomRs&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
function to generate a list of random indices,
it generates an infinite list of random values within the specified range
(in this case, from &lt;code&gt;0 to n-1&lt;&#x2F;code&gt;),
hence sampling with replacement.
Then, we take the first &lt;code&gt;n^(3&#x2F;4)&lt;&#x2F;code&gt; elements from the list.
Next, we sort the sample and convert it to an array.&lt;&#x2F;p&gt;
&lt;p&gt;Next, we find the lower and upper bounds of the sample.
We do this by finding the index of the element at position &lt;code&gt;n^(3&#x2F;4)&#x2F;2 - sqrt(n)&lt;&#x2F;code&gt;
and &lt;code&gt;n^(3&#x2F;4)&#x2F;2 + sqrt(n)&lt;&#x2F;code&gt; in the sorted sample.
We then take the element at these indices as the lower and upper bounds.&lt;&#x2F;p&gt;
&lt;p&gt;Then, we compute the set $C$ and the counts $\ell_d$ and $\ell_u$.
We do this by filtering the list with the lower and upper bounds.&lt;&#x2F;p&gt;
&lt;p&gt;Next, we check if the set $C$ is too large to sort efficiently.
If it is, we return &lt;code&gt;Nothing&lt;&#x2F;code&gt;.
Otherwise, we sort the set $C$ and find the median.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;results&quot;&gt;Results&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s the result by running the algorithm against a randomly shuffled list of contiguous integers from 1 to 10,000,001
using the &lt;strong&gt;magical number 42&lt;&#x2F;strong&gt; as the seed of our random number generator.
As you can see both the exact and randomized median algorithms find the right
median value:&lt;&#x2F;p&gt;
&lt;p&gt;$$ \frac{10,000,001}{2} = 5,000,001 $$&lt;&#x2F;p&gt;
&lt;p&gt;since $10,000,001$ is odd, the median is the element at position $\frac{10,000,001}{2} = 5,000,001$.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;===========================&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Testing&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; with 10_000_001 shuffled elements&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Exact&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; median calculation:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Result:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 5000001.0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Time:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 18.906611 seconds&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Randomized&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; approximate median calculation:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Result:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 5000001.0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Time:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 1.095511 seconds&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Error&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; percentage: 0.0000&lt;span class=&quot;z-meta z-group z-expansion z-job z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-job z-shell&quot;&gt;%&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Speedup&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; factor: 17.26x&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The randomized median algorithm for the case of $n = 10,000,001$
is at least &lt;strong&gt;17x faster&lt;&#x2F;strong&gt; than the exact median calculation.
That is an &lt;strong&gt;order of magnitude improvement&lt;&#x2F;strong&gt; over the deterministic median algorithm.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I love the inequalities of the &lt;strong&gt;Russian school of probability&lt;&#x2F;strong&gt;,
Markov, Chebyshev, etc.,
since it does not depend on any underlying distributional assumptions.
Chebyshev’s inequality depends on the random variable having a finite mean and variance,
and Markov’s inequality depends on the random variable being non-negative but does not depend on finite variances.&lt;&#x2F;p&gt;
&lt;p&gt;Assuming that the underlying variable has finite variance is a reasonable assumption to make
most of the time for your data.
To be fair, there are some random variables that can have infinite variance,
such as the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cauchy_distribution&quot;&gt;Cauchy&lt;&#x2F;a&gt;
or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pareto_distribution&quot;&gt;Pareto&lt;&#x2F;a&gt; distributions,
but these are &lt;strong&gt;extremely rare&lt;&#x2F;strong&gt; for you to cross paths with.&lt;&#x2F;p&gt;
&lt;p&gt;Another thing to note is that instead of the Chebyshev’s inequality,
we could have used the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Chernoff_bound&quot;&gt;Chernoff bound&lt;&#x2F;a&gt;
to get a &lt;strong&gt;tighter bound&lt;&#x2F;strong&gt; on the probability of failure.
But that is “left as an exercise to the reader”.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, if you are intrigued to see how powerful these inequalities
can be in probability theory,
I highly recommend Nassim’s Taleb technical book
&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2001.10488&quot;&gt;“Statistical Consequences of Fat Tails: Real World Preasymptotics, Epistemology, and Applications”&lt;&#x2F;a&gt;
which is freely available on arXiv.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Michael Mitzenmacher and Eli Upfal, “Probability and Computing: Randomization and Probabilistic Techniques in Algorithms and Data Analysis 2nd Edition”, ISBN: 978-1107154889&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;footer class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-pdf&quot;&gt;
&lt;p&gt;The PDF is freely available &lt;a href=&quot;http:&#x2F;&#x2F;lib.ysu.am&#x2F;open_books&#x2F;413311.pdf&quot;&gt;here&lt;&#x2F;a&gt;. &lt;a href=&quot;#fr-pdf-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-quicksort&quot;&gt;
&lt;p&gt;Note that I am comparing against quicksort since it uses $O(\log n)$ space,
whereas merge sort would use $O(n)$ space with the worst case is $O(n)$. &lt;a href=&quot;#fr-quicksort-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-bayesian&quot;&gt;
&lt;p&gt;For my Bayesian rant,
see &lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;lindley-paradox&#x2F;&quot;&gt;“Lindley’s Paradox, or The consistency of Bayesian Thinking”&lt;&#x2F;a&gt;. &lt;a href=&quot;#fr-bayesian-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-monad&quot;&gt;
&lt;p&gt;Yes M word mentioned.
If you want a good introduction to Haskell functors, applicatives, and monads,
see &lt;a href=&quot;https:&#x2F;&#x2F;www.adit.io&#x2F;posts&#x2F;2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot;&gt;“Functors, Applicatives, And Monads In Pictures”&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-monad-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;footer&gt;
</content>
        </entry><entry xml:lang="en">
        <title>BitVM: how to bridge using 1-of-N trust assumptions</title>
        <published>2025-02-10T04:57:00+00:00</published>
        <updated>2025-02-10T04:57:00+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/bitvm/" type="text/html"/>
        <id>https://storopoli.com/blog/bitvm/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;mermaid.js.org&quot;&gt;Mermaid&lt;&#x2F;a&gt; to render flowcharts.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered flowcharts, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;div class=&quot;admonition info&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-info&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;BTC++ Talk&lt;&#x2F;strong&gt;
        &lt;p&gt;This post is the written version of my very condensed 45-minute talk
at &lt;a href=&quot;https:&#x2F;&#x2F;btcpp.dev&#x2F;conf&#x2F;floripa&quot;&gt;BTC++ 2025 Floripa&lt;&#x2F;a&gt;.
You can watch the talk &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;gHoSpAgI7Xk&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;style&gt;
  .embed-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    max-width: 100%;
  }
  .embed-container iframe,
  .embed-container object,
  .embed-container embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
&lt;&#x2F;style&gt;
&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe
    src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;gHoSpAgI7Xk&quot;
    frameborder=&quot;0&quot;
    allowfullscreen
  &gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;strong&gt;BitVM is a bridge between Bitcoin and a sidesystem&lt;&#x2F;strong&gt;.
Generally, these bridges are secured by a federated multisig,
where to bridge-out you need to have a majority of the federation.
Mathematically, this is a $(\frac{N}{2}+1)$-of-$N$ trust model.
This is not ideal since it’s a “trust me bro” situation and the “bros”
are the majority of the bridge.
BitVM is different, since it can drastically reduce the trust assumptions.
It is a &lt;strong&gt;$1$-of-$N$ trust model, in which as long as you have one live honest operator,
you can withdraw on-chain&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;bitvm.jpg&quot; alt=&quot;BitVM Meme&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I am part of the &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;alpenlabs.io&quot;&gt;Alpen Labs&lt;&#x2F;a&gt; engineering team
that is building &lt;a href=&quot;https:&#x2F;&#x2F;stratabtc.org&quot;&gt;Strata: a BitVM-based rollup on Bitcoin&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.
Strata is also part of the &lt;a href=&quot;https:&#x2F;&#x2F;bitvm.org&#x2F;&quot;&gt;BitVM Alliance&lt;&#x2F;a&gt;:
a partnership to accelerate the development and implementation of BitVM project.&lt;&#x2F;p&gt;
&lt;p&gt;This post has a lot of overlaps with my previous post on
&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;zkp&#x2F;&quot;&gt;“Some Intuitions on Zero-Knowledge Proofs”&lt;&#x2F;a&gt;.
If you want to know more about Zero-Knowledge Proofs (ZKPs),
then I’d suggest you read that post first.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition tip&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-tip&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;Links and Footnotes&lt;&#x2F;strong&gt;
        &lt;p&gt;This post is filled with external links and footnotes.
If you want to dive deeper into any topic that has one of these,
feel free to do so.
The idea was to give a general overview the concepts,
while also allowing you to tune your experience by giving you
a bunch of tangents and rabbit holes to explore if wanted.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I’m going to present BitVM in it’s main three big ideas:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Verified Computation&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Groth16 Bitcoin Script Compiler&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Emulating Covenants with Connector Outputs&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;3_big_ideas.png&quot; alt=&quot;Three Big Ideas&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The only new idea that BitVM brings to the table is the Groth16 Bitcoin script compiler.
Verified computation is the premise of ZK-SNARKs,
and emulating covenants with connector outputs was already used by the
&lt;a href=&quot;https:&#x2F;&#x2F;ark-protocol.org&#x2F;&quot;&gt;Ark protocol&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;big-idea-1-verified-computation&quot;&gt;Big Idea 1: Verified Computation&lt;&#x2F;h2&gt;
&lt;p&gt;Suppose you have a function that does some complicated stuff and performs some computation.
Then, this function can be represented as an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Arithmetic_circuit&quot;&gt;&lt;strong&gt;arithmetic circuit&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-peano-1&quot;&gt;&lt;a href=&quot;#fn-peano&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;An arithmetic circuit is a directed acyclic graph (DAG) where:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Every indegree-zero node is an input gate that represents a variable $x_i$&lt;&#x2F;li&gt;
&lt;li&gt;Every node with indegree $&amp;gt;1$ is either:
&lt;ul&gt;
&lt;li&gt;an addition gate, $+$, that represents the sum of its children&lt;&#x2F;li&gt;
&lt;li&gt;a multiplication gate, $\times$, that represents the product of its children&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example of an arithmetic circuit that represents the function&lt;&#x2F;p&gt;
&lt;p&gt;$$f(x_1, x_2) = x_1 \cdot x_2 + x_1$$&lt;&#x2F;p&gt;


&lt;noscript&gt;
    &lt;strong&gt;⚠️ JavaScript is required to render the diagram.&lt;&#x2F;strong&gt;
&lt;&#x2F;noscript&gt;
&lt;pre class=&quot;mermaid invertible-image&quot;&gt;
    flowchart TD
x1[&quot;x₁&quot;]
x2[&quot;x₂&quot;]
mul[&quot;×&quot;]
add[&quot;\+&quot;]

x1 --&gt; mul
x2 --&gt; mul
mul --&gt; add
x1 --&gt; add
&lt;&#x2F;pre&gt;
&lt;p&gt;In the circuit above, the input gates are
$x_1$ and $x_{2}$,
the product gate computes $x_1 \cdot x_2$,
and the sum gate computes the result of the product gate added to $x_1$.
All of this evaluates to $x_1 \cdot x_2 + x_1$.&lt;&#x2F;p&gt;
&lt;p&gt;This stems due to the fact that any &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;NP_(complexity)&quot;&gt;NP problem&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-np-complete-1&quot;&gt;&lt;a href=&quot;#fn-np-complete&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;
can be reduced in polynomial time by a deterministic Turing machine to
the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Boolean_satisfiability_problem&quot;&gt;Boolean satisfiability problem&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-boolean-funs-1&quot;&gt;&lt;a href=&quot;#fn-boolean-funs&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
This is known as the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cook%E2%80%93Levin_theorem&quot;&gt;Cook-Levin theorem&lt;&#x2F;a&gt;,
and it is a fundamental result in theoretical computer science.&lt;&#x2F;p&gt;
&lt;p&gt;In computer science, we have two main classes of problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$\cal{P}$ problems, which are &lt;strong&gt;easy to solve and verify&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;$\cal{NP}$ problems, which are &lt;strong&gt;hard to solve, but &lt;em&gt;easy&lt;&#x2F;em&gt; to verify&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$\cal{P}$ stems from polynomial time,
and contains all decision problems that can be solved by a deterministic Turing machine
using a polynomial amount of computation time, or polynomial time.
$\cal{NP}$ stems from non-deterministic polynomial time,
and is the set of decision problems for which the problem instances,
where the answer is “yes”, have proofs verifiable in polynomial time by
a deterministic Turing machine.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;p_np.png&quot; alt=&quot;P vs NP&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;According to the Cook-Levin theorem,
once you find an algorithm that solves one of the $\cal{NP}$ problems
in polynomial time, you can use it to solve &lt;strong&gt;&lt;em&gt;any&lt;&#x2F;em&gt; $\cal{NP}$ problem
in polynomial time&lt;&#x2F;strong&gt;.
But we haven’t yet found such algorithms for any $\cal{NP}$ problem.
Heck, we don’t even know if $\cal{P} \ne \cal{NP}$.
It is highly speculated, but yet still an open question&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-millennium-problems-1&quot;&gt;&lt;a href=&quot;#fn-millennium-problems&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Moving on, &lt;strong&gt;any (finite) arithmetic circuit can be transformed
into a big (finite) polynomial&lt;&#x2F;strong&gt;,
by using techniques such as
&lt;a href=&quot;https:&#x2F;&#x2F;alinush.github.io&#x2F;qap-r1cs&quot;&gt;Rank-1 Constraint System (R1CS), quadratic arithmetic program (QAP)&lt;&#x2F;a&gt;;
and many others.
This means that we can map any arithmetic circuit to a polynomial,
and vice-versa; and one operation in each side of the map,
can be mapped to a single operation in the other side.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, we can &lt;strong&gt;cryptographically commit to a polynomial using
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Commitment_scheme#KZG_commitment&quot;&gt;polynomial commitment schemes (PCS)&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.
This means that we &lt;strong&gt;also commit to a certain arithmetic circuit,
given that we know the unique polynomial that it represents&lt;&#x2F;strong&gt;.
This commitment allow us to create &lt;strong&gt;very succinct zero-knowledge proofs
that some computation was performed given certain inputs&lt;&#x2F;strong&gt;.
We can represent this with proof as $\pi$
which takes as public-accessible inputs $x$,
and private-accessible inputs $w$ (as in witness),
and outputs $y$:&lt;&#x2F;p&gt;
&lt;p&gt;$$\pi(x; w) = y$$&lt;&#x2F;p&gt;
&lt;p&gt;Let’s define verifier $V$ that has access to the arithmetic circuit $C$,
the inputs $x$, and the proof $\pi$.
Note that $V$ does not have access to the witness $w$, which are private inputs.
Additionally, $V$ may or may not have access to the output $y$ of the whole computation.
Also, we’ll define a prover $P$ that has access to everything $V$ has,
with the addition of the witness $w$.&lt;&#x2F;p&gt;
&lt;p&gt;This proof $\pi$ has three main properties:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Completeness&lt;&#x2F;strong&gt;: If the statement is true, the verifier will accept the proof.&lt;&#x2F;p&gt;
&lt;p&gt;$$ \Pr\big[V(\pi, x) = \text{accept} \big] = 1. $$&lt;&#x2F;p&gt;
&lt;p&gt;Here $\Pr\big[V(\pi(x)) = \text{accept} \big]$
denotes the probability that the verifier accepts the proof given
a proof $\pi$, and inputs $x$.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Soundness&lt;&#x2F;strong&gt;: If the statement is &lt;em&gt;false&lt;&#x2F;em&gt;, no cheating prover
can convince an honest verifier that it is true,
except with some negligible probability &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-negligible-1&quot;&gt;&lt;a href=&quot;#fn-negligible&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;$$
\forall A, \forall x, \forall \pi: \Pr\big[V(A, \pi, x) =
\text{accept} \big] &amp;lt; \text{negligible}.
$$&lt;&#x2F;p&gt;
&lt;p&gt;Here $\Pr\big[V(A, \pi) = \text{accept} \big]$ denotes
the probability that the verifier accepts the proof given an adversary $A$,
a proof $\pi$, and &lt;em&gt;public&lt;&#x2F;em&gt; inputs $x$.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Zero-Knowledge&lt;&#x2F;strong&gt;: If the statement is true,
the verifier learns nothing about the secret $w$.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;There are many commitment schemes,
even ones that don’t use polynomials.
But a succinct zero knowledge system also needs an
interactive oracle proof (IOP).
One of such schemes is &lt;a href=&quot;https:&#x2F;&#x2F;alinush.github.io&#x2F;groth16&quot;&gt;Groth16&lt;&#x2F;a&gt;,
named after Jens Groth,
who published the &lt;a href=&quot;https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2016&#x2F;260&quot;&gt;paper describing it in 2016&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Groth16 uses a mathematical tool called
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bilinear_map&quot;&gt;bilinear maps&lt;&#x2F;a&gt;
or &lt;a href=&quot;https:&#x2F;&#x2F;alinush.github.io&#x2F;pairings&quot;&gt;pairing functions&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.
This is generally applied to vector spaces,
but they can work in elliptic curves (EC) as well.
It allows us to have VERY succinct proofs.
I’m not gonna cover the math behind EC pairings.
Instead, suffices to know that an EC pairing,
given three groups $G_1$, $G_2$, and $G_T$ (as in target group),
is a function $e$:&lt;&#x2F;p&gt;
&lt;p&gt;$$e: G_1 \times G_2 \rightarrow G_T$$&lt;&#x2F;p&gt;
&lt;p&gt;In other words, it takes any two elements in $G_1$ and $G_2$;
and outputs a group element in $G_T$.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Groth16 proofs are very succinct&lt;&#x2F;strong&gt;.
It consists of 3 group elements
(2 from $G_1$ and 1 from $G_2$) which amounts &lt;strong&gt;from 128 to 192 bytes&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As an example suppose that I know how to calculate the 100th million digit of $\pi$.
I publicly produce a VERY big arithmetic circuit,
and cryptographically commit to it using a polynomial commitment scheme.
I proceed by performing the HUGE computation, and sending to you, the prover,
$x$ and $\pi$: the inputs to this circuit and the proof
that I’ve performed the computation correctly.
By verifying the proof, you can convince yourself that I know the
100th million digit of $\pi$ without gaining any knowledge of this digit at all.&lt;&#x2F;p&gt;
&lt;p&gt;In fact, to classify as &lt;strong&gt;succinct&lt;&#x2F;strong&gt;, this proving system must
output proofs that are &lt;strong&gt;at most poly-logarithmic&lt;&#x2F;strong&gt; in the size of the circuit $C$,
denoted as $|C|$,
that it was committed and used to perform the computation
that the prover wants to prove.
Additionally, the verification time must also be poly-logarithmic in $C$.
This means that &lt;strong&gt;both the proof size
and verification time complexity must be at most&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;$$O(\log^k |C|)$$&lt;&#x2F;p&gt;
&lt;p&gt;for some constant $k&amp;gt;1$.&lt;&#x2F;p&gt;
&lt;p&gt;Since Groth16, outputs proofs that are between 128 and 192 bytes,
and also has a &lt;strong&gt;constant-time verification&lt;&#x2F;strong&gt;,
due to the face that it is just checking 3 group elements,
irrespectively of the size of the circuit $C$,
then &lt;strong&gt;Groth16 is a succinct zero-knowledge proof system&lt;&#x2F;strong&gt;.
In fact, it is currently the most succinct one that we know so far&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-research-1&quot;&gt;&lt;a href=&quot;#fn-research&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is something quite marvelous.
Imagine that you have ANY computation whatsoever,
and I can prove to you that I’ve done it
by sending only a very succinct ~200-byte proof
and you are completely convinced that I did it.
This is called &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Verifiable_computing&quot;&gt;verifiable computing&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,
which crypto-bros call “zero-knowledge”.
We already have zero-knowledge in classical cryptography:
“Hey I know a secret key and here’s a signature to prove to you”.
But the real novelty here is that &lt;strong&gt;we can prove that I did a computation
without revealing the computation itself&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To finalize, there are some caveats in using Groth16.
Yes, we have the &lt;strong&gt;best ZK-SNARK in terms of proof size
and verification time&lt;&#x2F;strong&gt;.
However, the setup is what we call a &lt;strong&gt;“trusted setup” that is also non-universal&lt;&#x2F;strong&gt;.
This means that we need some sort of ceremony to setup the protocol,
which includes the prover and verifier keys.
This can be done in a Multi-Party Computation (MPC) style,
with several parties joining the ceremony.
Each one of these parties will contribute with some random secret data
towards the setup of the protocol.
&lt;strong&gt;As long as one of them throw away their secret data,
the protocol is secure&lt;&#x2F;strong&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-ceremony-1&quot;&gt;&lt;a href=&quot;#fn-ceremony&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
This means that no one can prove false statements
or make a proof for a computation that was not performed.
Additionally, the setup is done for a single circuit.
Hence, you can only prove stuff that was done in a simple computation context.
You can vary the inputs as much as you like, but the circuit will always be the same.
To get a different circuit using Groth16, you need to perform a new setup.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;big-idea-2-groth16-bitcoin-script-compiler&quot;&gt;Big Idea 2: Groth16 Bitcoin Script Compiler&lt;&#x2F;h2&gt;
&lt;p&gt;The second big idea is to &lt;strong&gt;overcome Bitcoin’s Script limitations
by creating a Groth16 verifier using Bitcoin Script&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Bitcoin Script&lt;&#x2F;strong&gt; is VERY limited.
It is a &lt;strong&gt;stack-based language, and it has a very limited number of opcodes
that pops and pushes values into the stack; or manipulates the stack&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Most opcodes deal with verifying signatures since that is the most
common usecase for Bitcoin Script.
However, Bitcoin Script can also do some things such as:
&lt;strong&gt;hashing values and checking equality&lt;&#x2F;strong&gt;.
Additionally, we also have an &lt;strong&gt;alternate stack, called “alt stack”,
which is kinda a buffer for storing values&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With respect to math operations we have, hold your breath,
&lt;strong&gt;&lt;em&gt;only&lt;&#x2F;em&gt; 32-bit addition and subtraction&lt;&#x2F;strong&gt;.
We don’t have multiplication and division,
modular division, or bit-rotations.
Heck, we cannot even &lt;em&gt;concatenate&lt;&#x2F;em&gt; two values into a single one.
This has some historical reasons,
and the short story is that Satoshi was scared
of people torpedoing the network by exploding the stack,
and eventually crashing nodes by using these “dark arts” arithmetic operations.
The network was in its early days,
and very fragile.
Instead of carefully setting guard-rails so that
people don’t do stupid dangerous things,
he pretty much &lt;strong&gt;disabled&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-satoshi-commit-1&quot;&gt;&lt;a href=&quot;#fn-satoshi-commit&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; all the “dark arts” arithmetic operations&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Bitcoin Script is different than Ethereum’s EVM.
In the EVM, you can do whatever you want.
It is (bounded) Turing-complete.
You just need to make sure that you have enough gas
to pay for the computation.
However in Bitcoin, the fees are calculated from the transaction size.
This is possible because of the very limited expressiveness that Bitcoin Script has.
All nodes will run your transaction’s Script and verify it
irrespectively of the size of the Script,
within the relevant size limits, of course.&lt;&#x2F;p&gt;
&lt;p&gt;Bitcoin, prior to the Taproot upgrade,
had limitations to a maximum of 1,000 stack elements,
and 201 opcodes per program.
With Taproot, we don’t have more opcodes limitations,
but the 1,000 stack elements limitation is still there.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that to &lt;strong&gt;verify a Groth16 proof we need to do some elliptic curve pairings
and check 3 group elements&lt;&#x2F;strong&gt;?
This means that, technically, we can have a Groth16 verifier in Bitcoin Script.
Just like the golden rule of JavaScript: “if something can be built using JavaScript,
it WILL be built using JavaScript”;
we can tweak it to be the &lt;strong&gt;golden rule of Bitcoin Script:
“if something can be built using Bitcoin Script,
it WILL be built using Bitcoin Script”&lt;&#x2F;strong&gt;.
To achieve a Groth16 verifier in Bitcoin Script,
we just need to be &lt;strong&gt;able to do 256-bit multiplication
using only 32-bit addition operations&lt;&#x2F;strong&gt;.
And without the 201-opcodes limitation,
that Taproot upgrade, &lt;strong&gt;we can have a Groth16 verifier in Bitcoin Script&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It turns out that this Script is kinda big.
&lt;strong&gt;If you put it in a single transaction,
it will be around 1GB&lt;&#x2F;strong&gt;.
Not cool! Even if we are BFF with some miners,
to not be limited by the transaction standardness requirements&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-transaction-standardness-1&quot;&gt;&lt;a href=&quot;#fn-transaction-standardness&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;,
we can’t propagate this transaction since it will never fit a block
which must be at most 4MB.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;groth16_block_size.jpg&quot; alt=&quot;Groth16 Bitcoin Script&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The next step stems from the insight that &lt;strong&gt;to find a fault in a Groth16 proof,
we need to find at least one step of the proof verification execution that it fails&lt;&#x2F;strong&gt;.
If we find none, then we can be sure that the proof is valid.
Maybe we could somehow &lt;strong&gt;split this 1GB huge Bitcoin Script into smaller scripts&lt;&#x2F;strong&gt;,
that could be &lt;strong&gt;published in a block&lt;&#x2F;strong&gt; or even &lt;strong&gt;relayed by nodes&lt;&#x2F;strong&gt; if we can get
it to fit the standardness requirements&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-transaction-standardness-2&quot;&gt;&lt;a href=&quot;#fn-transaction-standardness&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We have merkle trees in the Taproot upgrade,
so what if we could split the Groth16 proof verification into a bunch of
script spending paths (leaves in the Taproot Merkle tree),
then we just need to find at least one leaf that the proof fails.
If we cannot find any, then we can be sure that the proof is valid.&lt;&#x2F;p&gt;
&lt;p&gt;But, wait! Bitcoin Script is stateless!
We cannot pass state from one transaction to the next transaction.
Is it? Well, this is the final trick needed to fit
the 1GB Groth16 verifier Bitcoin Script into a bunch of
standard&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-transaction-standardness-3&quot;&gt;&lt;a href=&quot;#fn-transaction-standardness&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; transactions.
We know that Bitcoin Script, despite its limitations, can hash stuff and verify equality.
Hence, we need to find a primitive that can carry data with some sort of authentication;
and uses exclusively hash functions.&lt;&#x2F;p&gt;
&lt;p&gt;This is where &lt;strong&gt;hash-based one-time signatures (OTS)&lt;&#x2F;strong&gt; comes into play.
The first, and most famous, OTS is
the &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lamport_signature&quot;&gt;Lamport signature&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,
which was invented by &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Leslie_Lamport&quot;&gt;Leslie Lamport&lt;&#x2F;a&gt;
in 1979.
Suppose that what you’re signing is a 256-bit hash $H(m)$ of a message $m$.
The way Lamport signatures work is that your public key is
the 256 pairs of hashes: 512 in total.
The first pair represents all possible &lt;code&gt;0&lt;&#x2F;code&gt;s that a 256-bit hash can have;
and the second pair the same for all possible &lt;code&gt;1&lt;&#x2F;code&gt;s.
To sign $H(m)$, you just reveal a preimage for each pair
depending on the bit of the $H(m)$.
Remember that a bit can be only 0 or 1 (a single pair).
If your bit index &lt;code&gt;i&lt;&#x2F;code&gt; is &lt;code&gt;0&lt;&#x2F;code&gt; you reveal the preimage for
the public key’s first pair at index &lt;code&gt;i&lt;&#x2F;code&gt;, that represents &lt;code&gt;0&lt;&#x2F;code&gt;s;
if it’s &lt;code&gt;1&lt;&#x2F;code&gt;, you reveal the preimage for
the second pair at index &lt;code&gt;i&lt;&#x2F;code&gt;.
This is a one-time signature, since you literally reveal a good chunk
of your private key while signing.&lt;&#x2F;p&gt;
&lt;p&gt;Below is a visual representation of the Lamport signature.
Everything is represented as bits, being either &lt;code&gt;0&lt;&#x2F;code&gt; or &lt;code&gt;1&lt;&#x2F;code&gt;.
As you can see, in the top, we have the pair of hashes as public keys,
&lt;code&gt;PK1&lt;&#x2F;code&gt; and &lt;code&gt;PK2&lt;&#x2F;code&gt;.
In the middle, we have the message that we are signing.
Finally, at the bottom, we have the signature which reveals
the preimages for the public keys depending on what value of the message
for each bit in the message.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;lamport_sigs.png&quot; alt=&quot;Lamport Signature&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Since the Groth16 proof is based mostly on 256-bit group elements,
we can &lt;strong&gt;pass the state from one script to the next script
by hashing the final state of the computation and continuing
in the next script with the hash as the input&lt;&#x2F;strong&gt;.
We can avoid tampering since these hashes (the message)
are signed.
Also, we only need one Lamport public key since it is fine to reuse
mostly because the whole batch of transactions will be in the same
Taproot Merkle Tree of Scripts.
This technique is called &lt;strong&gt;bitcommitments&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The image below shows a P2TR address with a Groth16 verifier in it.
All of the scripts inside the Merkle tree of script spending paths
are below 400kb, and have a 1,000 stack elements limit.
So they adhere to standardness requirements&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-transaction-standardness-4&quot;&gt;&lt;a href=&quot;#fn-transaction-standardness&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
The first script is the &lt;code&gt;Init&lt;&#x2F;code&gt;: it grabs some inputs from the witness,
and performs some computations and results in an output
that will be used in the &lt;code&gt;Z_1&lt;&#x2F;code&gt; script.
How we pass the state from the &lt;code&gt;Init&lt;&#x2F;code&gt; script to the &lt;code&gt;Z_1&lt;&#x2F;code&gt; script
is by using Lamport signatures&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-winternitz-1&quot;&gt;&lt;a href=&quot;#fn-winternitz&quot;&gt;10&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
From there we keep performing computations and passing the state
from &lt;code&gt;Z_2&lt;&#x2F;code&gt; until &lt;code&gt;Z_N&lt;&#x2F;code&gt;.
If we get to the last script &lt;code&gt;Z_N&lt;&#x2F;code&gt;, then we just lock it with
the prover’s public key so that only him can spend this P2TR address.
Each &lt;code&gt;Z_k&lt;&#x2F;code&gt; for any &lt;code&gt;k &amp;lt;= N&lt;&#x2F;code&gt; that uses previous outputs as inputs
have a Lamport signature verification procedure in Bitcoin script
that if fails will make the script spendable by anyone.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;bitvm_p2tr.svg&quot; alt=&quot;Groth16 Verifier in a P2TR Address&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Remember that all of these scripts are inside a P2TR Merkle tree.
Hence unlocking only one of them suffices to spend the whole P2TR UTXO.
&lt;strong&gt;If the prover is honest and has a valid proof, then only he can spend the UTXO.
However, if the prover is dishonest and has a invalid proof,
then anyone can spend the UTXO by simply finding at least one
leaf script that the Lamport signature verification fails&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I am not putting the specific opcodes here,
because the goal is to give a high-level overview of
how we can insert a Groth16 verifier in Bitcoin Script.
If you want to learn more about how a ZK-SNARK verifier can be included
in a Taproot address,
check the &lt;a href=&quot;https:&#x2F;&#x2F;bitvm.org&#x2F;bitvm_bridge.pdf&quot;&gt;BitVM2 paper&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;big-idea-3-emulating-covenants-with-connector-outputs&quot;&gt;Big Idea 3: Emulating Covenants with Connector Outputs&lt;&#x2F;h2&gt;
&lt;p&gt;The next big idea is to &lt;strong&gt;emulate covenants with connector outputs
and pre-signed transactions (and timelocks)&lt;&#x2F;strong&gt;.
This is not new since the &lt;a href=&quot;https:&#x2F;&#x2F;ark-protocol.org&#x2F;intro&#x2F;connectors&#x2F;index.html&quot;&gt;Ark protocol already used connectors&lt;&#x2F;a&gt;
to emulate covenants.&lt;&#x2F;p&gt;
&lt;p&gt;First let’s tackle what are covenants.
&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bitcoinops.org&#x2F;en&#x2F;topics&#x2F;covenants&#x2F;&quot;&gt;Covenants&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;
are a category of proposed changes to Bitcoin’s consensus rules that would allow
a script to prevent an authorized spender from spending to certain other scripts&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-timelocks-1&quot;&gt;&lt;a href=&quot;#fn-timelocks&quot;&gt;11&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
A very useful example is the &lt;a href=&quot;https:&#x2F;&#x2F;jameso.be&#x2F;vaults.pdf&quot;&gt;&lt;code&gt;OP_VAULT&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
that allows an UTXO to be only spent to a specific destination.
There are many other proposals like this.&lt;&#x2F;p&gt;
&lt;p&gt;Ok, but we don’t have covenants in Bitcoin.
Hence, we need to &lt;strong&gt;emulate some sort of transaction introspection&lt;&#x2F;strong&gt;.
This is where the BitVM bridge comes in:
the part of the protocol that creates a &lt;strong&gt;transaction graph made of pre-signed transactions&lt;&#x2F;strong&gt;.
These pre-signed transactions are signed by &lt;strong&gt;every operator in the $N$ operators bridge
in a way that every operator has his own pre-signed version of the transaction graph
by all other operators&lt;&#x2F;strong&gt;.
This is important since it allows the &lt;strong&gt;1-of-$N$ trust assumption&lt;&#x2F;strong&gt;,
because any operator can use its pre-signed transaction graph to perform
a withdraw from the BitVM bridge into Bitcoin.&lt;&#x2F;p&gt;
&lt;p&gt;However, only having pre-signed transactions is not enough to emulate covenants.
We also need &lt;strong&gt;connector outputs,
which are ways to restrict the flow of funds and information in a transaction graph&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To illustrate this, let’s consider a simple toy transaction graph example.
In the figure below, we have a transaction graph that has six transactions:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Claim&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Payout Optimistic&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Challenge&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Assert&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Payout&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Disprove&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;tx-graph.svg&quot; alt=&quot;Transaction Graph&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This represents a “contract” between two parties, Alice, the verifier, and Bob, the prover.
Alice wants Bob to calculate the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pi#Modern_quest_for_more_digits&quot;&gt;three-quadrillionth digit of $\pi$&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-pi-1&quot;&gt;&lt;a href=&quot;#fn-pi&quot;&gt;12&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
This can be any computation, but let’s go with a nerdy example,
since these are always good mind seeds to sow over the internet.
And she’s willing to pay $10$ BTC to Bob if he completes the task,
hence she deposits $10$ BTC into a P2TR address.
This P2TR address, all the transactions that stems from it,
are checked and pre-signed by both Alice and Bob.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s follow the flow of transactions.
The BTC denomitations are either $10$ BTC to demonstrate the flow of capital,
and $\emptyset$ to demonstrate the flow of information.
Bob, once ready, can spend Alice’s $10$ BTC using the pre-signed Claim transaction.
It has two outputs:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A timelocked $10$ BTC output that can be spent using the Payout Optimistic transaction.&lt;&#x2F;li&gt;
&lt;li&gt;An empty output $\emptyset$ that can be spent using either the Payout Optimistic transaction
or the Challenge transaction.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Notice that if Bob is honest and has produced a valid proof,
he can just spend both outputs using the Payout Optimistic transaction
and wait the timelock to get his $10$ BTC.
However, if Bob is dishonest by providing an invalid proof,
or even no proof at all, and by trying the Payout Optimistic transaction path,
Alice can say “fuck you” and spend the empty output $\emptyset$ using the Challenge transaction.
Now the Payout Optimistic transaction is invalid because one of the inputs was spent
and no miner would be able to include it in a block.&lt;&#x2F;p&gt;
&lt;p&gt;By challenging Bob,
Alice also needs to provide funds to cover for the cost of
asserting his proof on-chain; say $0.1$ BTC,
which is the cost of broadcasting the Assert transaction.
Now that Bob was challenged, the only viable path is to
assert his proof on-chain using the Assert followed by the Payout path.
The Assert transaction carries the $10$ BTC,
and inside it we have our Groth16 verifier, denoted as $G16$.
$G16$ will verify the proof provided by Bob,
using native Bitcoin Script and the big P2TR Merkle tree
that we’ve discussed above in &lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;bitvm&#x2F;#big-idea-2-groth16-bitcoin-script-compiler&quot;&gt;Big Idea 2&lt;&#x2F;a&gt;.
If the proof is valid, then Bob can spend the $10$ BTC
using the Payout transaction that gives him the $10$ BTC back.
This has also a timelock to allow Alice to disprove Bob’s proof.
If Alice cannot disprove Bob, he will eventually get his $10$ BTC back
by the Payout transaction.&lt;&#x2F;p&gt;
&lt;p&gt;However, if at least one of the leaves in the big P2TR Merkle tree inside the $G16$ is invalid,
then Alice can again say “fuck you” and spend the $10$ BTC
using the Disprove transaction that gives her the $10$ BTC back.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;This is a very clever way to emulate covenant-like behavior using
a pre-signed transaction graph that has connector outputs
that control the flows of both money and information&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The reader can note that it is trivial to extend this
idea to any verified computation,
such as “I’ve got the proof that this withdrawal is valid because of some funds in a sidesystem that were burned”.
And if the proof is valid, then the operator can have the withdrawal money back to
pay the user&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-withdrawal-1&quot;&gt;&lt;a href=&quot;#fn-withdrawal&quot;&gt;13&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
And &lt;strong&gt;if the proof is invalid, the operator then can have
some sort of collateral BTC slashed&lt;&#x2F;strong&gt; with some small part being burned
and the &lt;strong&gt;remainder being given to the challenger&lt;&#x2F;strong&gt;.
Hence, we have &lt;strong&gt;economic incentives&lt;&#x2F;strong&gt; to make sure that &lt;strong&gt;operators behave&lt;&#x2F;strong&gt;
and, not only produce valid proofs, but also &lt;strong&gt;challenge invalid ones&lt;&#x2F;strong&gt;.
The whole system also allows for &lt;strong&gt;operators to charge withdrawal fees&lt;&#x2F;strong&gt;
from the sidesystem’s users during the withdrawal process.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-can-covenants-bring-to-bitvm&quot;&gt;What can covenants bring to BitVM?&lt;&#x2F;h2&gt;
&lt;p&gt;As I’ve said above, we don’t have covenants yet in Bitcoin&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-timelocks-2&quot;&gt;&lt;a href=&quot;#fn-timelocks&quot;&gt;11&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
Nevertheless, the future is yet to be written
and one day we &lt;strong&gt;might have covenants in Bitcoin&lt;&#x2F;strong&gt;.
If, and that’s a big if, we have covenants in Bitcoin, they can bring several benefits to BitVM:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The BitVM bridge becomes a &lt;a href=&quot;https:&#x2F;&#x2F;petertodd.org&#x2F;2024&#x2F;covenant-dependent-layer-2-review&quot;&gt;defacto Layer 2&lt;&#x2F;a&gt;
for Bitcoin by supporting unilateral trustless withdraws&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;The Groth16 verifier might not need to be chunked and split into multiple transactions or locking scripts,
and could fit a single transaction&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;The sidesystem could be a true ZK-validity rollup, and not a ZK-optimistic rollup&lt;&#x2F;strong&gt;.
This allows a much stricter security model for the sidesystem.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let’s dive into the details of how covenants can enhance BitVM.&lt;&#x2F;p&gt;
&lt;p&gt;First, with something like &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bitcoinops.org&#x2F;en&#x2F;topics&#x2F;op_cat&#x2F;&quot;&gt;&lt;code&gt;OP_CAT&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;
and &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bitcoinops.org&#x2F;en&#x2F;topics&#x2F;op_checktemplateverify&#x2F;&quot;&gt;&lt;code&gt;OP_CHECKTEMPLATEVERIFY&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;;
also known as &lt;code&gt;OP_CTV&lt;&#x2F;code&gt;,
we don’t need to have the whole transaction graph pre-signed by every operator.
We just need to use &lt;code&gt;OP_CTV&lt;&#x2F;code&gt; with some concatenation using &lt;code&gt;OP_CAT&lt;&#x2F;code&gt;
in the transactions to verify important parts of the transactions
that guarantee the integrity of the transaction with respect to the BitVM bridge.
Then, anyone can do a &lt;strong&gt;unilateral trustless withdraw&lt;&#x2F;strong&gt;, not only a single BitVM operator.
This will &lt;strong&gt;turn the BitVM bridge into a
&lt;a href=&quot;https:&#x2F;&#x2F;petertodd.org&#x2F;2024&#x2F;covenant-dependent-layer-2-review&quot;&gt;fully trustless Bitcoin Layer 2&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Second, using the &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;brink.dev&#x2F;blog&#x2F;2024&#x2F;08&#x2F;22&#x2F;eng-call-great-script-restoration&#x2F;&quot;&gt;Great Script Restoration (GSR)&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,
which is a proposal to &lt;strong&gt;bring back all the “dark arts” arithmetic operations as 64-bit arithmetic operations&lt;&#x2F;strong&gt;,
like multiplication (&lt;code&gt;OP_MUL&lt;&#x2F;code&gt;), division (&lt;code&gt;OP_DIV&lt;&#x2F;code&gt;), left shift (&lt;code&gt;OP_LSHIFT&lt;&#x2F;code&gt;), and right shift (&lt;code&gt;OP_RSHIFT&lt;&#x2F;code&gt;);
we can hugely improve the efficiency of BitVM’s Bitcoin Script-native Groth16 verifier.
It may even &lt;strong&gt;fit into a single standard&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-transaction-standardness-5&quot;&gt;&lt;a href=&quot;#fn-transaction-standardness&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; transaction&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, using &lt;strong&gt;both GSR and &lt;code&gt;OP_CAT&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;, we can make the BitVM sidesystem;
the thing that we are using the bridge to bridge into from Bitcoin,
to &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ethereum.org&#x2F;en&#x2F;developers&#x2F;docs&#x2F;scaling&#x2F;zk-rollups&#x2F;&quot;&gt;become a ZK-validity rollup&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.
This will hugely improve the security model of the BitVM sidesystem,
which now, not only inherits the reorg resistance of the Layer 1 blocks,
since any rollup derives (and writes) its state into the Layer 1,
but also inherits the consensus model of the Layer 1.
You cannot &lt;em&gt;opportunistically&lt;&#x2F;em&gt; write the rollup state into Layer 1.
It is now fully verified by the Layer 1 consensus.
Hence, you don’t need constant “eyes” on the rollup writes in Layer 1
to find frauds, as &lt;strong&gt;the Layer 1 consensus guarantees the validity of the rollup state&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The focus of this post is to give a high-level overview of BitVM,
and building intuitions on how it works.
By using the 3 big ideas
we can create a very interesting 1-of-$N$ Bitcoin bridge,
instead of having to resort to outdated majority federated multisig bridges:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Verified Computation&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Groth16 Bitcoin Script Compiler&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Emulating Covenants with Connector Outputs&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;This allows all kinds of exciting stuff to be built on top of Bitcoin&lt;&#x2F;strong&gt;.
Bitcoin is already the &lt;strong&gt;best money in the world&lt;&#x2F;strong&gt;,
being the only &lt;a href=&quot;https:&#x2F;&#x2F;bitcoinmagazine.com&#x2F;culture&#x2F;history-bitcoin-sound-money-helps-society&quot;&gt;“sound money”&lt;&#x2F;a&gt;.
However, due to its limited scalability,
it is not suitable for wide adoption without
either resorting to Layer 2 solutions,
or by losing it’s sound money properties by reducing the decentralization&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-decentralization-1&quot;&gt;&lt;a href=&quot;#fn-decentralization&quot;&gt;14&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
Additionally, Bitcoin is &lt;em&gt;not&lt;&#x2F;em&gt; expressive enough to build interest applications.
Things like prediction markets, decentralized exchanges,
yield farming, Bitcoin-backed loans,
and more have been brought to Bitcoin and left deep traumas.
This is due to the fact that, while being possible to build smart contracts
that are transparent and can be audited in Ethereum &amp;amp; Co.,
in Bitcoin they came as a “trust me bro” solutions.
All of these usecases cannot be expressed using Bitcoin Script.
Hence, you need to fallback to losing custody of funds
to use these solutions.
Of course, shit hit the fan, and tons of people and companies lost A LOT of money
as these “trust me bro” solutions either were hacked or went belly up.
This might be a new dawn of BiFi (Bitcoin Finance, and fuck DeFi).&lt;&#x2F;p&gt;
&lt;p&gt;Of course, you need a LOT of engineering to implement BitVM.
If you are curious about the details, you can check out the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BitVM&#x2F;BitVM&quot;&gt;BitVM repo&lt;&#x2F;a&gt; for the Groth16 compiler,
the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alpenlabs&#x2F;strata-bridge&quot;&gt;&lt;code&gt;strata-bridge&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; repo
for the whole BitVM bridge transaction graph;
and finally, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alpenlabs&#x2F;strata&quot;&gt;&lt;code&gt;strata&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; repo
for the Strata rollup (the BitVM sidesystem).&lt;&#x2F;p&gt;
&lt;footer class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-peano&quot;&gt;
&lt;p&gt;If you want to dig yourself into a very nice rabbit hole,
check &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Peano_axioms&quot;&gt;Peano arithmetic&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Turing_completeness&quot;&gt;Turing-completeness relations&lt;&#x2F;a&gt;. &lt;a href=&quot;#fr-peano-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-np-complete&quot;&gt;
&lt;p&gt;Actually, it is any NP-complete problem, but without loss of generality, we’ll focus on NP. &lt;a href=&quot;#fr-np-complete-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-boolean-funs&quot;&gt;
&lt;p&gt;Note that you can represent addition and multiplication as Boolean functions. &lt;a href=&quot;#fr-boolean-funs-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-millennium-problems&quot;&gt;
&lt;p&gt;If you solve this conjecture either by proving it or disproving it,
you’ll be up for a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Millennium_Prize_Problems&quot;&gt;1 million USD prize&lt;&#x2F;a&gt;.
I like to say that it is the hardest way to
earn 1 million USD. &lt;a href=&quot;#fr-millennium-problems-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-negligible&quot;&gt;
&lt;p&gt;A function $f$ is negligible if for every polynomial $p$,
there exists an $N$ such that for all $n &amp;gt; N$,
$$ f(n) &amp;lt; \frac{1}{p(n)}. $$
If you want to learn more about negligible functions,
read Chapter 3, Section 3.1 of the book &lt;a href=&quot;https:&#x2F;&#x2F;doi.org&#x2F;10.1201&#x2F;9781420010756&quot;&gt;Introduction to Modern Cryptography&lt;&#x2F;a&gt; by Katz &amp;amp; Lindell. &lt;a href=&quot;#fr-negligible-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-research&quot;&gt;
&lt;p&gt;Note that ZK-SNARKs and succinct proving systems in general are a very hot research topic.
We might find succincter systems in the future. &lt;a href=&quot;#fr-research-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-ceremony&quot;&gt;
&lt;p&gt;In the infamous Zcash setup ceremony, Peter Todd,
one of the participants, “ran all of his computations on a laptop encased
in a tin foil-lined cardboard box, while driving across Canada.
He then burned his compute node to a crisp with a propane torch”.
&lt;a href=&quot;https:&#x2F;&#x2F;spectrum.ieee.org&#x2F;the-crazy-security-behind-the-birth-of-zcash&quot;&gt;Source&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-ceremony-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-satoshi-commit&quot;&gt;
&lt;p&gt;Check L94-L109 in &lt;code&gt;script.cpp&lt;&#x2F;code&gt; in this
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitcoin&#x2F;bitcoin&#x2F;commit&#x2F;4bd188c4383d6e614e18f79dc337fbabe8464c82&quot;&gt;2010 commit&lt;&#x2F;a&gt; from Satoshi. &lt;a href=&quot;#fr-satoshi-commit-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-transaction-standardness&quot;&gt;
&lt;p&gt;Transaction standardness means that a transaction will be accepted by every node in the network.
This requires that the transaction is at most 400kvb (that’s kilo “virtual” bytes),
and has only one &lt;code&gt;OP_RETURN&lt;&#x2F;code&gt; output with at most 80-bytes of data.
If you want to do crazy stuff, like &lt;code&gt;&amp;gt;400kvb&lt;&#x2F;code&gt; or more than one &lt;code&gt;OP_RETURN&lt;&#x2F;code&gt; output,
you need to call your friendly neighborhood miner and ask them to include directly into their next block,
without having to relay through the Bitcoin network (since no node will accept it). &lt;a href=&quot;#fr-transaction-standardness-1&quot;&gt;↩&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-transaction-standardness-2&quot;&gt;↩2&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-transaction-standardness-3&quot;&gt;↩3&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-transaction-standardness-4&quot;&gt;↩4&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-transaction-standardness-5&quot;&gt;↩5&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-winternitz&quot;&gt;
&lt;p&gt;Lamport signatures are very inefficient.
Teams building BitVM-based bridge generally use &lt;a href=&quot;https:&#x2F;&#x2F;asecuritysite.com&#x2F;encryption&#x2F;wint&quot;&gt;Winternitz signatures&lt;&#x2F;a&gt; instead. &lt;a href=&quot;#fr-winternitz-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-timelocks&quot;&gt;
&lt;p&gt;In a sense absolute and relative timelocks are a sort of covenant.
Hence, Bitcoin already has at least one kind of covenant: timelocks. &lt;a href=&quot;#fr-timelocks-1&quot;&gt;↩&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-timelocks-2&quot;&gt;↩2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-pi&quot;&gt;
&lt;p&gt;Currently, the record stands at the two-quadrillionth digit. &lt;a href=&quot;#fr-pi-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-withdrawal&quot;&gt;
&lt;p&gt;In the actual BitVM bridge protocol,
the operator outfront the withdrawal money to the user
with some fee for the service,
and then asks for the BitVM bridge for a refund. &lt;a href=&quot;#fr-withdrawal-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-decentralization&quot;&gt;
&lt;p&gt;Decentralization is a key property of Bitcoin, and reducing it would compromise its sound money properties.
This is due to the fact that any average Joe can run a node,
since the requirements for running a node are minimal: 4MB every 10 minutes.
If we increase the block size, or block time, we would increase the cost of running a node,
which would reduce decentralization. &lt;a href=&quot;#fr-decentralization-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;footer&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Merkle trees and the Taproot protocol</title>
        <published>2024-11-15T08:44:46+00:00</published>
        <updated>2024-11-15T08:44:46+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/taproot/" type="text/html"/>
        <id>https://storopoli.com/blog/taproot/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;mermaid.js.org&quot;&gt;Mermaid&lt;&#x2F;a&gt; to render flowcharts.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered flowcharts, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;div class=&quot;admonition info&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-info&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;INFO&lt;&#x2F;strong&gt;
        &lt;p&gt;Dedicated to John Peter, since I was tired of having
to explain this to him every time we met.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This post gives an intuition to the &lt;strong&gt;Taproot protocol&lt;&#x2F;strong&gt; in Bitcoin,
specifically how &lt;strong&gt;Merkle trees&lt;&#x2F;strong&gt; are used to hide the complexity of
several possible spending conditions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;taproot&quot;&gt;Taproot&lt;&#x2F;h2&gt;
&lt;p&gt;Taproot was activated as a soft fork in the Bitcoin network
on &lt;strong&gt;November 2021&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;design goals of Taproot&lt;&#x2F;strong&gt; are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Increase privacy&lt;&#x2F;strong&gt;: hide the spending conditions
and also hide the fact that you are using a multisig.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Reduce the amount of data on-chain&lt;&#x2F;strong&gt;:
you only need to commit to the root of a Merkle tree,
and not the leaves.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Use Schnorr&lt;&#x2F;strong&gt;: Schnorr signatures are more efficient
and allow for signature aggregation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;My focus is on the middle point: how to use Merkle trees to hide the
complexity of the spending conditions.
I’m not gonna cover Schnorr signatures here, but you can check
&lt;a href=&quot;https:&#x2F;&#x2F;conduition.io&#x2F;cryptography&#x2F;schnorr&#x2F;&quot;&gt;conduition’s excellent post on Schnorr signatures&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So let’s start with Merkle trees.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;merkle-trees&quot;&gt;Merkle Trees&lt;&#x2F;h2&gt;
&lt;p&gt;A
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Merkle_tree&quot;&gt;&lt;strong&gt;Merkle tree&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
is a binary tree where the leaves are the data
and the internal nodes are the hash of their children.
The root of the tree is called the &lt;strong&gt;Merkle root&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;


&lt;noscript&gt;
    &lt;strong&gt;⚠️ JavaScript is required to render the diagram.&lt;&#x2F;strong&gt;
&lt;&#x2F;noscript&gt;
&lt;pre class=&quot;mermaid invertible-image&quot;&gt;
    flowchart TD
root[&quot;root&quot;]
h01[&quot;H(0 | 1)&quot;]
h23[&quot;H(2 | 3)&quot;]
leaf0[&quot;0&quot;]
leaf1[&quot;1&quot;]
leaf2[&quot;2&quot;]
leaf3[&quot;3&quot;]

root --- h01
root --- h23
h01 --- leaf0
h01 --- leaf1
h23 --- leaf2
h23 --- leaf3
&lt;&#x2F;pre&gt;
&lt;p&gt;In the picture above, the leaves are the numbers 0, 1, 2, and 3.
Consider these as data that you want to commit to.
We construct the tree by hashing
(applying the hash function $H$)
the leaves and then concatenating the hashes,
and hashing the result until we reach the root.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;merkle-trees-as-commitment-schemes&quot;&gt;Merkle Trees as Commitment Schemes&lt;&#x2F;h3&gt;
&lt;p&gt;In cryptography, we have something called a
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Commitment_scheme&quot;&gt;&lt;strong&gt;commitment scheme&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A commitment scheme allows you to commit to a value without revealing it.
This property is called &lt;strong&gt;hiding&lt;&#x2F;strong&gt;.
Commitment schemes are designed so that a party cannot change the value
or statement after they have committed to it.
This property is called &lt;strong&gt;binding&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The classical example is a &lt;strong&gt;hash function&lt;&#x2F;strong&gt;.
Say you have a value $x$ and you want to commit to it.
You can hash $x$ and send the hash to the other party.
In the future, you can reveal $x$ and the other party can hash it
and check if it matches the hash you sent.&lt;&#x2F;p&gt;
&lt;p&gt;This is a commitment scheme because you cannot know the value of $x$
by looking at the hash.
Hence, it is hiding.
And you cannot change the value of $x$ without changing the hash,
hence it is binding.&lt;&#x2F;p&gt;
&lt;p&gt;However, this is a commitment scheme for a single value.
What if you have multiple values you want to commit to?
This is where Merkle trees come in.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Merkle trees are commitment schemes&lt;&#x2F;strong&gt;.
You commit to the root of the tree,
and you can prove that a leaf is in the tree
by revealing the path from the leaf to the root.&lt;&#x2F;p&gt;
&lt;p&gt;It is hiding because you cannot know the value of a leaf by looking at the root.
And it is binding because you cannot change the value of a leaf
without changing the root.&lt;&#x2F;p&gt;
&lt;p&gt;Note that the inclusion proof is logarithmic in the number of leaves,
hence the complexity of the inclusion proof is $O(\log n)$,
where $n$ is the number of leaves,
or the depth of the desired leaf in the tree.
This makes Merkle trees a very efficient commitment scheme.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;taproot-and-merkle-trees&quot;&gt;Taproot and Merkle Trees&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we understand Merkle trees, let’s see how they are used in Taproot.
The anatomy of a &lt;strong&gt;Pay-to-Taproot (P2TR) address&lt;&#x2F;strong&gt;
is as follows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Internal key&lt;&#x2F;strong&gt;: the public key of the owner.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Merkle root&lt;&#x2F;strong&gt;: the root of the Merkle tree of spending conditions.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;These are also called the &lt;strong&gt;key path&lt;&#x2F;strong&gt; and the &lt;strong&gt;script path&lt;&#x2F;strong&gt;, respectively.
You can find more about the Taproot soft fork in the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitcoin&#x2F;bips&#x2F;blob&#x2F;master&#x2F;bip-0341.mediawiki&quot;&gt;BIP 341&lt;&#x2F;a&gt;
that describes Taproot spending rules.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition info&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-info&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;INFO&lt;&#x2F;strong&gt;
        &lt;p&gt;Note that there are ways to tweak the internal key
that I will not cover here for simplicity.
They are mainly used to disable the key path
in a verifiable way and force the spending
to only use script path conditions.
Again, check
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitcoin&#x2F;bips&#x2F;blob&#x2F;master&#x2F;bip-0341.mediawiki&quot;&gt;BIP 341&lt;&#x2F;a&gt;
for more details.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Here’s an example of a Taproot address:&lt;&#x2F;p&gt;


&lt;noscript&gt;
    &lt;strong&gt;⚠️ JavaScript is required to render the diagram.&lt;&#x2F;strong&gt;
&lt;&#x2F;noscript&gt;
&lt;pre class=&quot;mermaid invertible-image&quot;&gt;
    flowchart TD
p2tr[&quot;P2TR&quot;]
internal[&quot;Internal Key&quot;]
merkle[&quot;Root of the Merkle Tree&quot;]
s1[&quot;S1&quot;]
node[&quot;Node&quot;]
s2[&quot;S2&quot;]
s3[&quot;S3&quot;]

p2tr --- internal
p2tr --- merkle
merkle --- s1
merkle --- node
node --- s2
node --- s3
&lt;&#x2F;pre&gt;
&lt;p&gt;Here we can see that we have the internal key and the root of the Merkle tree.
The internal key is the key path, and the Merkle tree is the script path.
If you want to spend from this address, you can either use the internal key
or any of the spending conditions $S_n$ that are leaves in the Merkle tree.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s focus in the spending conditions $S_n$.
We have 3 conditions in the example above.
These are vanilla Pay-to-(Witness)-Script-Hash P2SH scripts,
so you can have multisig, timelocks,
etc. in these conditions.
P2SH scripts are not immediately revealed on-chain,
you just commit to the hash of the script.
They are only revealed when you spend from the address,
where you need to reveal the script and Bitcoin
consensus will not only check if the script is correct,
but also that it matches the hash committed.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition info&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-info&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;INFO&lt;&#x2F;strong&gt;
        &lt;p&gt;Yes, P2SH is a commitment scheme.
It is hiding because you cannot know the script by looking at the hash.
And it is binding because you cannot change the script without changing the hash.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In a Merkle tree,
it takes $O(\log n)$ space to prove inclusion,
where $n$ is the depth of the leaf that we want to prove,
we order the leaves in the tree in such a way that the most likely
conditions are closer to the root.&lt;&#x2F;p&gt;
&lt;p&gt;In this case we have $S_1$ as the most likely condition,
and $S_2$ and $S_3$ as less likely conditions.&lt;&#x2F;p&gt;
&lt;p&gt;Suppose you want to spend from the address using $S_2$.
How would you prove that $S_2$ is in the tree?
Well, you need to reveal the path from $S_2$ to the root.
This entails revealing the hash of the sibling of $S_2$,
that is the hash of $S_3$,
Ok now we got the “Node” in the picture above,
but we still need to reveal the hash of the sibling of “Node”,
that is $S_1$.
This is enough to prove that $S_2$ is in the tree.
See that we had to reveal the hashes of $S_1$ and $S_3$,
since $S_2$ has depth $n = 3$ in the tree it took $\lceil O(\log 3) \rceil = 2$
steps to prove inclusion.&lt;&#x2F;p&gt;
&lt;p&gt;Now, suppose you want to spend from the address using $S_1$.
Same thing, you need to reveal the path from $S_1$ to the root.
This is easily done with just revealing the hash of “Node”.
So a single operation is enough to prove inclusion.
This is due to the fact that $S_1$ has depth $n = 2$ in the tree,
hence it took $\lceil O(\log 2) \rceil = 1$ step to prove inclusion.&lt;&#x2F;p&gt;
&lt;p&gt;This is the beauty of Merkle trees.&lt;&#x2F;p&gt;
&lt;p&gt;Contrast this with other script addresses formats such as P2SH.
In P2SH, you are only tied to a single script.
You could have a bunch of nested IFs in the script,
to emulate the same behavior as the Merkle tree,
but good luck paying the fees for that monstrous script
when you want to spend from the address.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-is-this-useful&quot;&gt;Why is this useful?&lt;&#x2F;h2&gt;
&lt;p&gt;I work at &lt;a href=&quot;https:&#x2F;&#x2F;alpenlabs.io&#x2F;&quot;&gt;Alpen Labs&lt;&#x2F;a&gt;,
where we are developing &lt;a href=&quot;https:&#x2F;&#x2F;stratabtc.org&quot;&gt;Strata&lt;&#x2F;a&gt;,
a &lt;a href=&quot;https:&#x2F;&#x2F;bitvm.org&#x2F;&quot;&gt;BitVM&lt;&#x2F;a&gt;-based bridge for Bitcoin.
To put it simply, BitVM is a computing paradigm to express
Turing-complete Bitcoin contracts.&lt;&#x2F;p&gt;
&lt;p&gt;BitVM was only possible due to the Taproot soft fork.
Before we dive into details, just one minor detail
about Merkle trees in Taproot:
they can have a maximum depth of 128.
This means that you can have up to $2^{128}$ spending conditions.
And each of this spending conditions is a script that follows
the Bitcoin consensus rules.
Mostly important of these is that the transaction size
must be less than 4MB.
So, you can have a Taproot address
that encodes a Turing-complete contract with up to $2^{128}$ clauses.
And each of these clauses can be a complex script up to 4MB in size.
Hence, we can hide the complexity of a Turing-complete contract
in a single Taproot address.
This allows us to encode $2^{128} \cdot 4\text{MB}$ of data
which is more than the &lt;strong&gt;estimated data content of the surface web&lt;&#x2F;strong&gt;,
according to &lt;a href=&quot;https:&#x2F;&#x2F;www.wolframalpha.com&#x2F;input?i=2%5E128+*+4mb&quot;&gt;wolframalpha&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;More specifically, we can encode a gigabyte-sized
&lt;a href=&quot;https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2016&#x2F;260&quot;&gt;Groth16&lt;&#x2F;a&gt; verifier in
Bitcoin script as a Taproot address
by splitting the execution of the verifier
into 4MB chunks and encoding each chunk as a spending condition
as a leaf in a Taproot Merkle tree.
And we can pass state between these chunks by using one-time signatures,
such as &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lamport_signature&quot;&gt;Lamport Signatures&lt;&#x2F;a&gt;.
This involves encoding all the elliptic curve operations and pairings
required by the Groth16 verifier
along with a way to express Lamport signature verification in Bitcoin script.
But this is a topic for a future post.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;taproot&#x2F;$block.attrs(&amp;#x27;info&amp;#x27;)&quot;&gt;&lt;&#x2F;a&gt;
If you want to know more about how to encode a Groth16 verifier
using Bitcoin script, check the
&lt;a href=&quot;https:&#x2F;&#x2F;www.alpenlabs.io&#x2F;blog&#x2F;state-of-snark-verification-with-bitvm2&quot;&gt;Alpen Labs blog&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;&#x2F;h2&gt;
&lt;p&gt;The idea behind this post is to give an intuition to the Taproot protocol
and how Merkle trees are used to hide the complexity of the spending conditions.
There is a bunch of technical details that I left out for simplicity.
Please go over the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitcoin&#x2F;bips&#x2F;blob&#x2F;master&#x2F;bip-0341.mediawiki&quot;&gt;BIP 341&lt;&#x2F;a&gt;
to check all the technicalities of Taproot,
such as the different ways to tweak the internal key,
tagged hashes, and Taproot annexes.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition info&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-info&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;INFO&lt;&#x2F;strong&gt;
        &lt;p&gt;I would also recommend &lt;a href=&quot;https:&#x2F;&#x2F;base58.school&#x2F;classes&#x2F;taproot&quot;&gt;base58’s workshop on Taproot&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Merkle trees were introduced by Ralph Merkle in 1979.
If you want to know more about Merkle trees, check
&lt;a href=&quot;https:&#x2F;&#x2F;toc.cryptobook.us&#x2F;&quot;&gt;Section 8.9 of Dan Boneh’s textbook “A Graduate Course in Applied Cryptography”&lt;&#x2F;a&gt;.
They are used in many applications in computer science,
for example file systems use Merkle trees to verify the integrity of files.
Another example is the Nix package manager,
which uses Merkle trees to ensure reproducibility of builds.&lt;&#x2F;p&gt;
&lt;p&gt;There are many variations of Merkle trees,
for example Etereum uses a Patricia Merkle tree,
a combination of a Merkle tree
and a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Patricia_trie&quot;&gt;Patricia trie&lt;&#x2F;a&gt;,
which is a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Trie&quot;&gt;“Merkle” trie&lt;&#x2F;a&gt;
where the keys are hashed.&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>The road less travelled</title>
        <published>2024-11-10T10:02:30+00:00</published>
        <updated>2024-11-10T10:02:30+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/road-less-travelled/" type="text/html"/>
        <id>https://storopoli.com/blog/road-less-travelled/</id>
        
            <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;road-less-travelled&#x2F;road_less_travelled.jpg&quot; alt=&quot;The Road Less Travelled&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Recently, I’ve moved my blog from Go and Hugo towards
&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.org&quot;&gt;Rust&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;getzola.org&quot;&gt;Zola&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That made me revisit one of my favorites ideas: &lt;strong&gt;the road less travelled&lt;&#x2F;strong&gt;.
It is a metaphor for taking the unconventional path,
which can lead to a more fulfilling life.&lt;&#x2F;p&gt;
&lt;p&gt;What unusual roads have I taken that fulfilled me?
Well, I can think of a few:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Avoiding JavaScript like the devil avoids the cross&lt;&#x2F;li&gt;
&lt;li&gt;Being a polyglot programmer, and getting used with managing memory and pointers.
This means C, Rust, and Zig.&lt;&#x2F;li&gt;
&lt;li&gt;Learning the fundamentals concepts that underlie computer science,
math, and cryptography.&lt;&#x2F;li&gt;
&lt;li&gt;Mastering and customizing my tools as needed.
That’s why I use vim and the terminal for almost everything,
instead of GUIs and VS Code.&lt;&#x2F;li&gt;
&lt;li&gt;Writing a blog instead of posting on social media.&lt;&#x2F;li&gt;
&lt;li&gt;Reading books instead of watching TV shows.&lt;&#x2F;li&gt;
&lt;li&gt;Being a minimalist and a stoic.&lt;&#x2F;li&gt;
&lt;li&gt;Being a privacy advocate and one of the early adopters of Signal,
instead of WhatsApp or Telegram.&lt;&#x2F;li&gt;
&lt;li&gt;Leaving the warm cradle of academia to work as a software engineer in startups.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;hercules-at-the-crossroads&quot;&gt;Hercules at the Crossroads&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;road-less-travelled&#x2F;hercules_at_the_crossroads.jpeg&quot; alt=&quot;Hercules at the Crossroads&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Before diving into some of these roads,
I’ll share the tale of Hercules at the Crossroads.
This comes to us from the ancient Greek mythology,
and it was a story that Socrates used to tell,
reported by Xenophon in his Memorabilia.&lt;&#x2F;p&gt;
&lt;p&gt;When Hercules, the son of Zeus, was young and unknown,
he was walking along a road when he came to a crossroads.
He was met by two female figures.&lt;&#x2F;p&gt;
&lt;p&gt;The first was dressed in jewelry and was beautiful and alluring.
The second was dressed in a simple robe and was plain.
The first figure promised Hercules a life of pleasure and ease,
she swore that if he followed her, all of his desires would be fulfilled
and he would never taste unhappiness, suffering, or fear.
The second figure promised Hercules a life of struggle and hardship,
swearing that if he followed her, he would become the greatest hero of all time,
and no rewards except those that came as a result of hard work;
a journey fit for a god.&lt;&#x2F;p&gt;
&lt;p&gt;These two figures were the goddesses of Vice (&lt;em&gt;Kakía&lt;&#x2F;em&gt;) and Virtue (&lt;em&gt;Areté&lt;&#x2F;em&gt;).
And they represent the moral dilemma that all of us face at some point in our lives.
Will you take the easy path, the one that promises pleasure and comfort,
or will you take the hard path, the one that promises struggle and greatness?&lt;&#x2F;p&gt;
&lt;p&gt;This is the essence of the road less travelled.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;avoiding-javascript&quot;&gt;Avoiding JavaScript&lt;&#x2F;h2&gt;
&lt;p&gt;I can go on and on about JavaScript.
I think it is great for what it was designed for:
making web components interactive in a &lt;strong&gt;browser&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However, when it escapes its boundaries, it can wreck havoc.
This is because JavaScript is a mess.
It was designed to be very lenient and forgiving,
since we don’t want the browser to crash when a script fails.
That’s bad UX for poor old grandma Lucrecia when she’s browsing
cat memes on her 10-year-old laptop with Internet Explorer and Windows Vista.&lt;&#x2F;p&gt;
&lt;p&gt;It has a bunch of undefined behaviors and quirks that can lead to bugs.
It is also very unintuitive and has a lot of gotchas.
Just see the meme below:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;road-less-travelled&#x2F;javascript_meme.png&quot; alt=&quot;JavaScript meme&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is exactly what you not want when coding your whole business logic.
Imagine getting pwned and losing all your customer data or even your funds
due to a JavaScript gotcha that you didn’t know about.&lt;&#x2F;p&gt;
&lt;p&gt;Another issue is that JavaScript is slow and memory-hungry.
In contexts where performance is critical, and especially in startups,
where the cloud bill is a concern, you don’t want to be running
fucking JavaScript on the server.&lt;&#x2F;p&gt;
&lt;p&gt;So yeah, don’t use JavaScript outside of making flashy buttons and forms
in a browser window.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;being-a-polyglot-programmer&quot;&gt;Being a Polyglot Programmer&lt;&#x2F;h2&gt;
&lt;p&gt;This is kinda easy to justify.
If you only know how to use a hammer, everything looks like a nail.
In a sense, you would want to learn multiple tools and languages,
even if you just use the stupid hammer for everything.
&lt;strong&gt;It will make you a better programmer&lt;&#x2F;strong&gt;
due to the fact that you will be exposed to different paradigms,
thinking styles, and problem-solving strategies.&lt;&#x2F;p&gt;
&lt;p&gt;As a bonus, you should learn at least a “systems language”,
like C, Rust, or Zig, to understand how the computer works;
and you should also learn a functional language,
like Haskell, to understand how to reason about programs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;learning-the-fundamentals&quot;&gt;Learning the Fundamentals&lt;&#x2F;h2&gt;
&lt;p&gt;Let me tell you a secret.
There’s a type of knowledge that will always be true,
given certain assumptions.
Imagine that, you can always be right!
Even if a judge somewhere wakes up on the wrong side of the bed.
That knowledge is called &lt;strong&gt;mathematics&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The Euclidean geometry that you learned in high school?
Yes, it is true and will always be true:
here and in the Andromeda galaxy;
today and in a million years.
So you better learn it!&lt;&#x2F;p&gt;
&lt;p&gt;For computer science, this argument is almost the same.
Except that the assumptions are more lenient.
Assuming that computers are made of transistors and logic gates,
follow a Von Neumann-ish architecture,
and an Instruction Set Architecture (ISA) that is Turing-complete,
then your computer science knowledge will always be true.&lt;&#x2F;p&gt;
&lt;p&gt;There’s a nice tale about when &lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;road-less-travelled&#x2F;$link.page(&amp;#x27;blog&#x2F;2024-06-22-von-neumann&amp;#x27;)&quot;&gt;Von Neumann&lt;&#x2F;a&gt;
was asked, soon after the atomic bomb was dropped on Hiroshima,
what he was working on, and if he was working on a new weapon.
He kindly replied “No, I am working on something even more powerful:
computers”.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;writing-a-blog&quot;&gt;Writing a Blog&lt;&#x2F;h2&gt;
&lt;p&gt;In a world where everyone is gladly giving away their privacy
and data for free (and sometimes even paying for) to
proprietary social media platforms,
choose an open and interoperable standard like RSS.
This can be easily accomplished with a blog.&lt;&#x2F;p&gt;
&lt;p&gt;Also, writing is a great to organize your thoughts,
and to share your knowledge with the world.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reading-books&quot;&gt;Reading Books&lt;&#x2F;h2&gt;
&lt;p&gt;Do I need to say more?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;leaving-the-warm-cradle-of-academia&quot;&gt;Leaving the Warm Cradle of Academia&lt;&#x2F;h2&gt;
&lt;p&gt;I really wanted to like Academia.
It foster all the principles that I hold dear:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The pursuit of knowledge.&lt;&#x2F;li&gt;
&lt;li&gt;The sharing of knowledge.&lt;&#x2F;li&gt;
&lt;li&gt;The freedom to think and to express your thoughts.&lt;&#x2F;li&gt;
&lt;li&gt;The noble task of teaching and mentoring.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;However, it also has its dark side:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Dogmatism.&lt;&#x2F;li&gt;
&lt;li&gt;Mediocrity.&lt;&#x2F;li&gt;
&lt;li&gt;Inertia.&lt;&#x2F;li&gt;
&lt;li&gt;Corruption.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Instead, unexpectedly, I found in some startups the same principles that I hold dear.
Especially the ones that are focused on technology and innovation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Drop the JavaScript.
Learn Math and Computer Science.
Own your tools otherwise they will own you.
Read a fucking book.
Organize your thoughts and share your knowledge.
Search for places where you feel like the dumbest person in the room.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Find your road less travelled&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Zig comptime is such a powerful built-in feature</title>
        <published>2024-11-03T11:03:11+00:00</published>
        <updated>2024-11-03T11:03:11+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/zig-comptime/" type="text/html"/>
        <id>https://storopoli.com/blog/zig-comptime/</id>
        
            <content type="html">&lt;p&gt;I have been following the development of &lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;&quot;&gt;Zig&lt;&#x2F;a&gt;
for a while now.
I like the idea of a systems programming language
that is &lt;strong&gt;simple to learn and use,
&lt;em&gt;yet&lt;&#x2F;em&gt; powerful and expressive&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With Rust, I can get the powerful and expressive part,
&lt;em&gt;but&lt;&#x2F;em&gt; the &lt;strong&gt;learning curve is a bit steep&lt;&#x2F;strong&gt;,
and some parts of the language are &lt;strong&gt;complex
and hard to understand&lt;&#x2F;strong&gt;.
For example &lt;code&gt;async&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;await&lt;&#x2F;code&gt; (specially if you have to deal with &lt;code&gt;Stream&lt;&#x2F;code&gt;s and &lt;code&gt;Pin&lt;&#x2F;code&gt;s);
and the macro domain-specific language (DSL).&lt;&#x2F;p&gt;
&lt;p&gt;Now back to Zig.
The language can be learned in one lazy morning.
That’s exactly what I did and then played around
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;storopoli&#x2F;graphs-complexity&#x2F;pull&#x2F;21&quot;&gt;migrating some C code to Zig from an old course&lt;&#x2F;a&gt;
that I used to teach about algorithmic complexity.
The code is now simpler and more readable than the original C code.
I have hugely benefited from Zig’s built-in features such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;master&#x2F;#Optionals&quot;&gt;&lt;strong&gt;Optionals&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;master&#x2F;#Errors&quot;&gt;&lt;strong&gt;Error handling&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;master&#x2F;#comptime&quot;&gt;&lt;strong&gt;&lt;code&gt;comptime&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; (more on that, since it is the main topic of this post)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;master&#x2F;#Operators&quot;&gt;&lt;strong&gt;safe integer&#x2F;floating-point arithmetic&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;master&#x2F;#defer&quot;&gt;&lt;strong&gt;deferring memory deallocation&lt;&#x2F;strong&gt; to the end of the scope&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;master&#x2F;#struct&quot;&gt;&lt;strong&gt;&lt;code&gt;struct&lt;&#x2F;code&gt;s with functions&lt;&#x2F;strong&gt; (methods)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;master&#x2F;#Choosing-an-Allocator&quot;&gt;&lt;strong&gt;BYOA&lt;&#x2F;strong&gt; (Bring Your Own Allocator)&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-BYOA-1&quot;&gt;&lt;a href=&quot;#fn-BYOA&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Writing in Zig, comparing to C, is such a joy and you are always sure that
you won’t spend hours debugging because Zig has:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No hidden control flow&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No hidden memory allocations&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No preprocessor, no macros&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I highly recommend you to give Zig a try.
It is the &lt;strong&gt;ultimate C killer&lt;&#x2F;strong&gt;.
In fact, you can &lt;strong&gt;compile and interop C and Zig&lt;&#x2F;strong&gt; code with Zig.
So you can start migrating your C codebase to Zig incrementally.
As an additional caveat, &lt;strong&gt;Zig can be faster than C&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zig-s-comptime&quot;&gt;Zig’s &lt;code&gt;comptime&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve been wanting to write about Zig for a while now.
But I had no topic in mind.
Then, I was inspired by this talk by &lt;a href=&quot;https:&#x2F;&#x2F;matklad.github.io&quot;&gt;@matklad&lt;&#x2F;a&gt;
on modern systems programming comparing
Rust and Zig interwoven with his
professional journey from Rust to Zig,
and the amazing work he’s doing at
&lt;a href=&quot;https:&#x2F;&#x2F;tigerbeetle.com&quot;&gt;TigerBeetle&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;style&gt;
  .embed-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    max-width: 100%;
  }
  .embed-container iframe,
  .embed-container object,
  .embed-container embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
&lt;&#x2F;style&gt;
&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe
    src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;4aLy6qjhHeo?t=1904&quot;
    frameborder=&quot;0&quot;
    allowfullscreen
  &gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The talk goes on to compare Rust and Zig in terms of systems programming.
Then, at the middle of the talk, he starts to talk about Zig.
One of the Zig’s features that he covers is Zig’s &lt;code&gt;comptime&lt;&#x2F;code&gt; feature
which allows to &lt;strong&gt;run code and evaluate expressions at compile-time&lt;&#x2F;strong&gt;
&lt;em&gt;without&lt;&#x2F;em&gt; the need for meta-programming&#x2F;macros or code generation.&lt;&#x2F;p&gt;
&lt;p&gt;Let me explain now what is &lt;code&gt;comptime&lt;&#x2F;code&gt; in Zig.
You can do &lt;code&gt;comptime&lt;&#x2F;code&gt; in Zig in different places, such as:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Parameters of functions&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Variables&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Expressions&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Here are some examples thanks to &lt;a href=&quot;https:&#x2F;&#x2F;kristoff.it&#x2F;blog&#x2F;what-is-zig-comptime&#x2F;&quot;&gt;Loris Cro&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;master&#x2F;#comptime&quot;&gt;Zig’s documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;parameters-of-functions&quot;&gt;Parameters of functions&lt;&#x2F;h3&gt;
&lt;p&gt;The first Zig code example is about using &lt;code&gt;comptime&lt;&#x2F;code&gt;
to decide the length of a statically-allocated array:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; class=&quot;language-zig z-code&quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-zig&quot;&gt;fn&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function&quot;&gt;multiply&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-zig&quot;&gt;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-zig&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-zig&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-zig&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-zig&quot;&gt;b&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-zig&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-zig&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-zig&quot;&gt;i64&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-braces z-begin z-zig&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-zig&quot;&gt;return&lt;&#x2F;span&gt; a &lt;span class=&quot;z-keyword z-operator z-arithmetic z-zig&quot;&gt;*&lt;&#x2F;span&gt; b&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-zig&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-zig&quot;&gt;fn&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function&quot;&gt;main&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-zig&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-braces z-begin z-zig&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;const&lt;&#x2F;span&gt; len &lt;span class=&quot;z-keyword z-operator z-assignment z-zig&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;comptime&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-function z-zig&quot;&gt;multiply&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-zig&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-zig&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-zig&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-member z-zig&quot;&gt;my_static_array&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-zig&quot;&gt;:&lt;&#x2F;span&gt; [len]&lt;span class=&quot;z-storage z-type z-zig&quot;&gt;u8&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-zig&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-zig&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-zig&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;variables&quot;&gt;Variables&lt;&#x2F;h3&gt;
&lt;p&gt;The second example is about using &lt;code&gt;comptime&lt;&#x2F;code&gt; to define a variable.
This Zig code evaluates a Fibonacci number at compile-time:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; class=&quot;language-zig z-code&quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;const&lt;&#x2F;span&gt; expect &lt;span class=&quot;z-keyword z-operator z-assignment z-zig&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-import z-zig&quot;&gt;@import&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-zig&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt;.testing.expect&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-zig&quot;&gt;fn&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function&quot;&gt;fibonacci&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-zig&quot;&gt;index&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-zig&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-zig&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-zig&quot;&gt;u32&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-braces z-begin z-zig&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-conditional z-zig&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;index &lt;span class=&quot;z-keyword z-operator z-logical z-zig&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-zig&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-zig&quot;&gt;return&lt;&#x2F;span&gt; index&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-zig&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-function z-zig&quot;&gt;fibonacci&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;index &lt;span class=&quot;z-keyword z-operator z-arithmetic z-zig&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-zig&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-zig&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-function z-zig&quot;&gt;fibonacci&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;index &lt;span class=&quot;z-keyword z-operator z-arithmetic z-zig&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-zig&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-zig&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-storage z-type z-test z-zig&quot;&gt;test&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-zig&quot;&gt;&amp;quot;fibonacci&amp;quot;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-braces z-begin z-zig&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-comment z-line z-zig&quot;&gt;&#x2F;&#x2F; test fibonacci at run-time
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-conditional z-zig&quot;&gt;try&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-function z-zig&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-function z-zig&quot;&gt;fibonacci&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-zig&quot;&gt;7&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-zig&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-zig&quot;&gt;13&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-comment z-line z-zig&quot;&gt;&#x2F;&#x2F; test fibonacci at compile-time
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-conditional z-zig&quot;&gt;try&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;comptime&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-function z-zig&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-function z-zig&quot;&gt;fibonacci&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-zig&quot;&gt;7&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-zig&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-zig&quot;&gt;13&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-zig&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;expressions&quot;&gt;Expressions&lt;&#x2F;h3&gt;
&lt;p&gt;The final example is about using &lt;code&gt;comptime&lt;&#x2F;code&gt; to evaluate an expression.
The following Zig code evaluates a &lt;code&gt;for&lt;&#x2F;code&gt;-loop at compile-time.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; class=&quot;language-zig z-code&quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;const&lt;&#x2F;span&gt; max &lt;span class=&quot;z-keyword z-operator z-assignment z-zig&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-zig&quot;&gt;10&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;comptime&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;var&lt;&#x2F;span&gt; total &lt;span class=&quot;z-keyword z-operator z-assignment z-zig&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-zig&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;comptime&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-braces z-begin z-zig&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-zig&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;1&lt;span class=&quot;z-keyword z-operator z-other z-zig&quot;&gt;..&lt;&#x2F;span&gt;max&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-zig&quot;&gt;|&lt;&#x2F;span&gt;i&lt;span class=&quot;z-keyword z-operator z-bitwise z-zig&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-braces z-begin z-zig&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;        total &lt;span class=&quot;z-keyword z-operator z-assignment z-zig&quot;&gt;+=&lt;&#x2F;span&gt; i&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-braces z-end z-zig&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-zig&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bonus-example-zig-s-generics&quot;&gt;Bonus example: Zig’s Generics&lt;&#x2F;h3&gt;
&lt;p&gt;Now you can see how impressive &lt;code&gt;comptime&lt;&#x2F;code&gt; is.
In fact, Zig’s generics are implemented using &lt;code&gt;comptime&lt;&#x2F;code&gt;.
Check the Zig code below that creates a generic &lt;code&gt;List&lt;&#x2F;code&gt; data structure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; class=&quot;language-zig z-code&quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-zig&quot;&gt;fn&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-zig&quot;&gt;comptime&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-zig&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-zig&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-zig&quot;&gt;type&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-zig&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-braces z-begin z-zig&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-zig&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-struct z-zig&quot;&gt;struct&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-braces z-begin z-zig&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;        &lt;span class=&quot;z-variable z-other z-member z-zig&quot;&gt;items&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-zig&quot;&gt;:&lt;&#x2F;span&gt; []&lt;span class=&quot;z-storage z-type z-zig&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-zig&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;        &lt;span class=&quot;z-variable z-other z-member z-zig&quot;&gt;len&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-zig&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-zig&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-zig&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-braces z-end z-zig&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-zig&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-comment z-line z-zig&quot;&gt;&#x2F;&#x2F; The generic List data structure can be instantiated by passing in a type:
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;var&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-member z-zig&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-zig&quot;&gt;:&lt;&#x2F;span&gt; [&lt;span class=&quot;z-constant z-numeric z-integer z-zig&quot;&gt;10&lt;&#x2F;span&gt;]&lt;span class=&quot;z-storage z-type z-zig&quot;&gt;i32&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-zig&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-zig&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;var&lt;&#x2F;span&gt; list &lt;span class=&quot;z-keyword z-operator z-assignment z-zig&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-function z-zig&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;i32&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-zig&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    .items &lt;span class=&quot;z-keyword z-operator z-assignment z-zig&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-zig&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;buffer&lt;span class=&quot;z-punctuation z-separator z-zig&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    .len &lt;span class=&quot;z-keyword z-operator z-assignment z-zig&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-zig&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-zig&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-zig&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;the-caveats-of-comptime&quot;&gt;The caveats of &lt;code&gt;comptime&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;comptime&lt;&#x2F;code&gt; has some caveats.
&lt;code&gt;comptime&lt;&#x2F;code&gt; expressions must be known at compile-time.
That means:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;At the callsite, the value must be known at compile-time, or it is a compile error.&lt;&#x2F;li&gt;
&lt;li&gt;In the function definition, the value is known at compile-time.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;If you guarantee that the value is known at compile-time,
you can use &lt;code&gt;comptime&lt;&#x2F;code&gt; to evaluate anything at compile-time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-motivating-example&quot;&gt;The motivating example&lt;&#x2F;h2&gt;
&lt;p&gt;The motivating example for this blog post is an explanation
that matklad gives in his talk about how they use &lt;code&gt;comptime&lt;&#x2F;code&gt; at TigerBeetle
to make sure that a &lt;code&gt;struct&lt;&#x2F;code&gt; that represents a header has no padding in its fields.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;zig-comptime&#x2F;header_padding.png&quot; alt=&quot;TigerBeetle’s header struct&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Then, he said that to have the same checks at compile-time in Rust,
you would need to bring a lot of complexity with &lt;code&gt;proc-macro&lt;&#x2F;code&gt;s.
That made me curious about how hard it would be to do the same in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;So here’s a toy problem that I came up with to compare Zig and Rust.
Instead of checking for padding in fields of a &lt;code&gt;struct&lt;&#x2F;code&gt;,
I decided to simplify and check for zero-padding in a string.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zero-padding-check-in-zig&quot;&gt;Zero padding check in Zig&lt;&#x2F;h3&gt;
&lt;p&gt;In Zig, strings are arrays of bytes,
and you can iterate over them at compile-time:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; class=&quot;language-zig z-code&quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;const&lt;&#x2F;span&gt; std &lt;span class=&quot;z-keyword z-operator z-assignment z-zig&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-import z-zig&quot;&gt;@import&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-zig&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-zig&quot;&gt;fn&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function&quot;&gt;checkZeroPadding&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-zig&quot;&gt;comptime&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-zig&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-zig&quot;&gt;:&lt;&#x2F;span&gt; []&lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-zig&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-zig&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-braces z-begin z-zig&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-zig&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;s&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-zig&quot;&gt;|&lt;&#x2F;span&gt;c&lt;span class=&quot;z-keyword z-operator z-bitwise z-zig&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-braces z-begin z-zig&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-conditional z-zig&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;c &lt;span class=&quot;z-keyword z-operator z-logical z-zig&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-single z-zig&quot;&gt;&amp;#39;0&amp;#39;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-braces z-begin z-zig&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;            &lt;span class=&quot;z-support z-function z-zig&quot;&gt;@compileError&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-zig&quot;&gt;&amp;quot;String contains zero-padding&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;        &lt;span class=&quot;z-punctuation z-section z-braces z-end z-zig&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-braces z-end z-zig&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-zig&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-zig&quot;&gt;fn&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function&quot;&gt;main&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-zig&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-braces z-begin z-zig&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;comptime&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-braces z-begin z-zig&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;        &lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;const&lt;&#x2F;span&gt; str1 &lt;span class=&quot;z-keyword z-operator z-assignment z-zig&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-zig&quot;&gt;&amp;quot;12345&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;        &lt;span class=&quot;z-storage z-modifier z-zig&quot;&gt;const&lt;&#x2F;span&gt; str2 &lt;span class=&quot;z-keyword z-operator z-assignment z-zig&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-zig&quot;&gt;&amp;quot;01234&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;        &lt;span class=&quot;z-variable z-function z-zig&quot;&gt;checkZeroPadding&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;str1&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-zig&quot;&gt;&#x2F;&#x2F; This will compile
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;        &lt;span class=&quot;z-variable z-function z-zig&quot;&gt;checkZeroPadding&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-zig&quot;&gt;(&lt;&#x2F;span&gt;str2&lt;span class=&quot;z-punctuation z-section z-parens z-end z-zig&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-zig&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-zig&quot;&gt;&#x2F;&#x2F; This will cause a compile-time error
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-braces z-end z-zig&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-zig&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-zig&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code above uses &lt;code&gt;comptime&lt;&#x2F;code&gt; to check if a string has zero-padding.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zero-padding-check-in-rust&quot;&gt;Zero padding check in Rust&lt;&#x2F;h3&gt;
&lt;p&gt;Compare this to how to do the same thing in Rust.
We need to use a procedural macro to achieve the same result.
Note that &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;macros.html&quot;&gt;macros in Rust&lt;&#x2F;a&gt;
have their own domain-specific language (DSL) that is not Rust itself.
Hence, you need to learn a new language to write a macro in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;First create a library crate named &lt;code&gt;zero-padding-checker&lt;&#x2F;code&gt;
that exports a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;procedural-macros.html&quot;&gt;&lt;code&gt;proc-macro&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
and add a procedural macro to check for zero-padding in a string:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;proc_macro&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;TokenStream&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;quote&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;quote&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;syn&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;parse_macro_input&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; LitStr&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-annotation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-annotation z-rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-annotation z-rust&quot;&gt;proc_macro&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;check_zero_padding&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;input&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; TokenStream&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; TokenStream&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; input &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;parse_macro_input!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;input &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;as&lt;&#x2F;span&gt; LitStr&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; value &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; input&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;if&lt;&#x2F;span&gt; value&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;starts_with&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;0&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;quote!&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;            &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;compile_error!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;String contains zero-padding&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;into&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;quote!&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;#&lt;&#x2F;span&gt;input
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;into&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then you call the macro in your code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;zero_padding_checker&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;check_zero_padding&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;check_zero_padding!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;12345&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; This will compile
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;check_zero_padding!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;01234&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; This will cause a compile-time error
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Rust code above is far more complex than the Zig code.
First, it requires dependency on &lt;code&gt;syn&lt;&#x2F;code&gt; and &lt;code&gt;quote&lt;&#x2F;code&gt; crates
(note that the &lt;code&gt;proc-macro&lt;&#x2F;code&gt; crate is provided by Rust’s compiler).
Second, despite the fact that this is a simple example,
procedural macros in Rust have their own domain-specific language (DSL)
and the complexity can grow quickly as the problem becomes more complex.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Yeah, &lt;strong&gt;Zig is a great language and has a bright future ahead&lt;&#x2F;strong&gt;.
&lt;strong&gt;&lt;code&gt;comptime&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; is a powerful feature that allows you to &lt;strong&gt;run almost &lt;em&gt;any&lt;&#x2F;em&gt; code at compile-time&lt;&#x2F;strong&gt;.
It is built into the language and you don’t need to learn a new language to use it
or bring external dependencies to make it work.&lt;&#x2F;p&gt;
&lt;p&gt;If you like to &lt;strong&gt;learn more about Zig&lt;&#x2F;strong&gt;, I recommend reading the
&lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;learn&#x2F;&quot;&gt;learn section of Zig’s documentation&lt;&#x2F;a&gt;.
Also, to learn more about &lt;strong&gt;Zig’s &lt;code&gt;comptime&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; feature,
check &lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;master&#x2F;#comptime&quot;&gt;Zig’s documentation on &lt;code&gt;comptime&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;footer class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-BYOA&quot;&gt;
&lt;p&gt;Zig doesn’t have a built-in allocator.
And I don’t know it the acronym BYOA is a thing.
I just made it up. But it makes sense, right? &lt;a href=&quot;#fr-BYOA-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;footer&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Von Neumann: the sharpest mind of the 20th century</title>
        <published>2024-06-22T05:54:46+00:00</published>
        <updated>2024-06-22T05:54:46+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/von-neumann/" type="text/html"/>
        <id>https://storopoli.com/blog/von-neumann/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;von-neumann&#x2F;von_neumann.jpg&quot; alt=&quot;Von Neumann’s wartime Los Alamos ID badge photo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;John von Neumann was a Hungarian-American mathematician.
But to define him as a simple mathematician would be an understatement.
He is a &lt;strong&gt;fucking legend&lt;&#x2F;strong&gt; and one of my heroes!
He single-handedly:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;proposed an axiomatization of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Von_Neumann%E2%80%93Bernays%E2%80%93G%C3%B6del_set_theory&quot;&gt;set theory&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;
along with a definition of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Von_Neumann_cardinal_assignment&quot;&gt;cardinality&lt;&#x2F;a&gt;
that remains the standard one in mathematics today.
Funny enough he started working on solving the paradoxes
of set theory while he was only 11 years old!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;laid the mathematical foundations of quantum mechanics&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;made the atomic bomb possible&lt;&#x2F;strong&gt; by conceptualizing and designing
the explosive lenses that were needed to compress the plutonium core
of the Fat Man weapon that was later dropped on Nagasaki.
He also invented the term “kiloton” of TNT as a unit of energy
released in a nuclear explosion.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;invented the modern computer&lt;&#x2F;strong&gt;. Yes, I know, Alan Turing came up with
the idea while trying to solve the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Halting_problem&quot;&gt;halting problem&lt;&#x2F;a&gt;,
but it was von Neumann that recognized the true potential of
computing machines and designed the first computers.
We even have the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Von_Neumann_architecture&quot;&gt;von Neumann architecture&lt;&#x2F;a&gt; that pretty much underlies in every working
universal Turing machine in the world.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;created the field of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Game_theory&quot;&gt;game theory&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;,
along with the most important game theory’s theorem: the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Minimax_theorem&quot;&gt;minimax theorem&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;co-invented the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Monte_Carlo_method&quot;&gt;Monte Carlo method&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;
while trying to solve the problem of neutron diffusion.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;created the field of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cellular_automaton&quot;&gt;cellular automata&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;
and paved the way for the discovery of DNA.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The list above is just a quick summary of his achievements.
Everywhere you look in mathematics, physics, computer science, and even biology and economics,
you’ll find von Neumann’s fingerprints.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-sharpest-mind-of-the-20th-century&quot;&gt;The Sharpest Mind of the 20th Century&lt;&#x2F;h2&gt;
&lt;p&gt;Von Neumann was recognized by his peers as one of the most intelligent people
to have ever lived.
Johnny, as he was known to his friends, was a prodigy since early childhood.
Some sources suggest that he could multiply two 8-digit numbers together in his head when he was six.
As a child, von Neumann absorbed Ancient Greek and Latin, and spoke French, German and English as well as his native Hungarian.
He devoured a forty-five-volume history of the world and was able to recite whole chapters verbatim decades later.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some quotes from his contemporaries:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Enrico_Fermi&quot;&gt;Enrico Fermi&lt;&#x2F;a&gt; (Nobel Prize winner)&lt;&#x2F;strong&gt; while talking to &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Herbert_L._Anderson&quot;&gt;Herbert Anderson&lt;&#x2F;a&gt;:
“You know, Herb, Johnny can do calculations in his head ten times as fast as I can! And I can do them ten times as fast as you can, Herb, so you can see how impressive Johnny is!”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;George_P%C3%B3lya&quot;&gt;George Pólya&lt;&#x2F;a&gt; (mathematician, and whose lectures von Neumann attended as a student)&lt;&#x2F;strong&gt;:
“Johnny was the only student I was ever afraid of. If in the course of a lecture I stated an unsolved problem, the chances were he’d come to me at the end of the lecture with the complete solution scribbled on a slip of paper.”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Edward_Teller&quot;&gt;Edward Teller&lt;&#x2F;a&gt; (father of the hydrogen bomb)&lt;&#x2F;strong&gt;:
“Von Neumann would carry on a conversation with my 3-year-old son, and the two of them would talk as equals, and I sometimes wondered if he used the same principle when he talked to the rest of us.”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hans_Bethe&quot;&gt;Hans Bethe&lt;&#x2F;a&gt; (Nobel Prize winner)&lt;&#x2F;strong&gt;:
“I have sometimes wondered whether a brain like von Neumann’s does not indicate a species superior to that of man.”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Stanislaw_Ulam&quot;&gt;Stanislaw Ulam&lt;&#x2F;a&gt; (co-inventor of the Monte Carlo method)&lt;&#x2F;strong&gt;:
“I have had a brain, and von Neumann had a computer.”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Claude_Shannon&quot;&gt;Claude Shannon&lt;&#x2F;a&gt; (father of information theory)&lt;&#x2F;strong&gt;:
“the smartest person I’ve ever met.”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Marina_von_Neumann_Whitman&quot;&gt;Marina von Neumann Whitman&lt;&#x2F;a&gt; (his daughter)&lt;&#x2F;strong&gt;:
“Although he genuinely adored my mother, my father’s first love in life was thinking, a pursuit that occupied most of his waking hours.”&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;von-neumann&#x2F;von_neumann_oppenheimer.jpeg&quot; alt=&quot;Von Neumann and Oppenheimer together in-front of one of the computing machines used on the hydrogen bomb project. Von Neumann could do calculations in his head faster than these early computers and would sometimes face off against them in competitions meant to entertain the other people in the labs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you want to know more about von Neumann, I recommend his biography:
&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;61089520-the-man-from-the-future&quot;&gt;The Man from the Future: The Visionary Life of John von Neumann&lt;&#x2F;a&gt;
by Ananyo Bhattacharya.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-fly-puzzle&quot;&gt;The Fly Puzzle&lt;&#x2F;h2&gt;
&lt;p&gt;One of the most famous stories about von Neumann is the fly puzzle.
This was reported by &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Eugene_Wigner&quot;&gt;Eugene Wigner&lt;&#x2F;a&gt;
in the 1966 documentary on Von Neumann.
Below is the exact part where Wigner tells the story:&lt;&#x2F;p&gt;
&lt;style&gt;
  .embed-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    max-width: 100%;
  }
  .embed-container iframe,
  .embed-container object,
  .embed-container embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
&lt;&#x2F;style&gt;
&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe
    src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;HpJgBcE-cFQ?start=184&quot;
    frameborder=&quot;0&quot;
    allowfullscreen
  &gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The tale takes place in Los Alamos during the Manhattan Project.
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Max_Born&quot;&gt;Max Born (Nobel Prize winner)&lt;&#x2F;a&gt;
told von Neumann’s the following puzzle:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Two bicycles begin 20 miles apart,
and each travels toward the other at 10 miles per hour until they collide;
meanwhile, a fly travels continuously back and forth between the bicycles
at 15 miles per hour until it is squashed in the collision.
How far does the fly travel in total?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;One can solve this rather easily by not paying attention to the inherent infinite geometric series that the fly travels.
Instead, focus on the fact that the fly is squashed when the bicycles collide,
and that the two bicycles will collide in one hour.
Thus, the fly travels 15 miles in total.&lt;&#x2F;p&gt;
&lt;p&gt;By the time Born had finished the question, von Neumann had already solved it.
He said “Why? 15 miles, of course.”
Born was surprise and said that Johnny was “one of my first scientist friends that saw the solution immediately.”
Johnny then replied “I can’t understand that. It is a simple infinite geometrical series.”&lt;&#x2F;p&gt;
&lt;p&gt;Now, to understand how fast von Neumann’s mind was, let’s solve the problem the way he did.
Note that the fly reaches the second bicycle when&lt;&#x2F;p&gt;
&lt;p&gt;$$ 15t = 20 - 10t,$$&lt;&#x2F;p&gt;
&lt;p&gt;where $t$ is the time in hours.
Note that $t_1$ is&lt;&#x2F;p&gt;
&lt;p&gt;$$ t_1 = \frac{20}{25} = \frac{4}{5}.$$&lt;&#x2F;p&gt;
&lt;p&gt;This means that the total time it takes for the fly to reach the second bicycle for the first time
is $\frac{4}{5}$ hours and the total distance traveled by the fly is
$d_1 = 15 \times \frac{4}{5} = 12$ miles.
It then turns around and reaches the first bicycle when&lt;&#x2F;p&gt;
&lt;p&gt;$$ 12 - 15t = 8 + 10t.$$&lt;&#x2F;p&gt;
&lt;p&gt;Solving for $t_2$ we get&lt;&#x2F;p&gt;
&lt;p&gt;$$ t_2 = \frac{4}{25}.$$&lt;&#x2F;p&gt;
&lt;p&gt;Continuing, the total distance traveled by the fly is given by summing the series&lt;&#x2F;p&gt;
&lt;p&gt;$$ 15 \sum_{n=1}^{\infty} \frac{4}{5^n} = 15.$$&lt;&#x2F;p&gt;
&lt;p&gt;This is a classical &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Geometric_series&quot;&gt;geometric series&lt;&#x2F;a&gt;.
In general, a geometric series is written as $a + ar + ar^{2} + ar^{3} + \ldots$,
where a $a$ is the coefficient of each term and $r$ is the common ratio between adjacent terms.&lt;&#x2F;p&gt;
&lt;p&gt;Here we have $a = 12$ and $r = \frac{4}{5}$,
and we know it converges to $\frac{a}{1-r} = 15$ when $r &amp;lt; 1$.&lt;&#x2F;p&gt;
&lt;p&gt;That’s how von Neumann solved the problem in his head in a matter of seconds.&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Some intuitions on zero-knowledge proofs</title>
        <published>2024-06-08T15:48:33+00:00</published>
        <updated>2024-06-08T15:48:33+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/zkp/" type="text/html"/>
        <id>https://storopoli.com/blog/zkp/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;zkp&#x2F;zkp_meme.jpg&quot; alt=&quot;Zero-knowledge proofs and the meaning of life&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Lately, I’ve been diving a little into the world of &lt;strong&gt;Zero-Knowledge Proofs&lt;&#x2F;strong&gt;.
The idea is to prove that you know something without revealing what you know.
More specifically, a &lt;strong&gt;Zero-Knowledge Proof&lt;&#x2F;strong&gt; is a cryptographic protocol that allows
a &lt;strong&gt;prover&lt;&#x2F;strong&gt; to convince a &lt;strong&gt;verifier&lt;&#x2F;strong&gt; that a statement is true without revealing
any information beyond the validity of the statement.
In essence, by the end of the protocol, the verifier is convinced that the prover knows the secret,
and the &lt;strong&gt;verifier hasn’t learned anything (zero-knowledge) about the secret&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Zero-Knowledge Proofs&lt;&#x2F;strong&gt; (ZKPs) are kinda hot right now,
since a lot of new Bitcoin innovations are being built on top of them.
It allows for a higher level of privacy and potential scalability improvements
in the Bitcoin network.&lt;&#x2F;p&gt;
&lt;p&gt;Zero-knowledge proofs are advantageous in a myriad of application,
including (refer to &lt;code&gt;Petkus19&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Proving statement on private data&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Person $A$ has more than $X$ in his bank account&lt;&#x2F;li&gt;
&lt;li&gt;In the last year, a bank did not transact with an entity $Y$&lt;&#x2F;li&gt;
&lt;li&gt;Matching DNA without revealing full DNA&lt;&#x2F;li&gt;
&lt;li&gt;One has a credit score higher than $Z$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Anonymous authorization&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Proving that requester $R$ has right to access web-site’s restricted area without revealing its identity (e.g., login, password)&lt;&#x2F;li&gt;
&lt;li&gt;Prove that one is from the list of allowed countries&#x2F;states without revealing from which one exactly&lt;&#x2F;li&gt;
&lt;li&gt;Prove that one owns a monthly pass to a subway&#x2F;metro without revealing card’s id&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Anonymous payments&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Payment with full detachment from any kind of identity&lt;&#x2F;li&gt;
&lt;li&gt;Paying taxes without revealing one’s earnings&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Outsourcing computation&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Outsource an expensive computation and validate that the result is correct without redoing the execution;
it opens up a category of trustless computing&lt;&#x2F;li&gt;
&lt;li&gt;Changing a blockchain model from everyone computes the same to one party computes and everyone verifies&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The idea behind this post is to give a general overview of Zero-Knowledge Proofs,
while providing further resources,
especially which papers to read,
to dive deeper into the subject.
As always, I’ll try to keep it simple and intuitive.
However, as you might guess, the subject is quite complex,
and I’ll try to simplify it as much as possible;
but some mathematical background is necessary.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-are-zkps&quot;&gt;What are ZKPs?&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s formalize the concept of &lt;strong&gt;Zero-Knowledge Proofs&lt;&#x2F;strong&gt;.
A formal definition of zero-knowledge has to use some computational model,
and without loss of generality,
we can use the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Turing_machine&quot;&gt;Turing Machine&lt;&#x2F;a&gt;
model.
So let’s create three Turing machines:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$P$ (the &lt;strong&gt;prover&lt;&#x2F;strong&gt;),&lt;&#x2F;li&gt;
&lt;li&gt;$V$ (the &lt;strong&gt;verifier&lt;&#x2F;strong&gt;),&lt;&#x2F;li&gt;
&lt;li&gt;and $S$ (the &lt;strong&gt;simulator&lt;&#x2F;strong&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let’s also spicy things up a bit and introduce an &lt;strong&gt;adversary&lt;&#x2F;strong&gt; $A$,
and assume that it is also a Turing machine.
&lt;strong&gt;The secret we want to prove knowledge without revealing is $x$&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The prover $P$ wants to prove to the verifier $V$ that it knows the secret $x$.
They both share a common simulator $S$.
The adversary $A$ is trying to fool the verifier $V$ into believing that it knows the secret $x$,
without actually knowing it.&lt;&#x2F;p&gt;
&lt;p&gt;The prover $P$ generates a proof $\pi = P(S, x)$,
and sends it to the verifier $V$.
The verifier $V$ then checks the proof $\pi$,
and decides whether to accept or reject it.&lt;&#x2F;p&gt;
&lt;p&gt;The tuple $(P, V, S)$ is a &lt;strong&gt;Zero-Knowledge Proof&lt;&#x2F;strong&gt; if the following properties hold:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Completeness&lt;&#x2F;strong&gt;: If the statement is true, the verifier will accept the proof.&lt;&#x2F;p&gt;
&lt;p&gt;$$ \Pr\big[V(S, \pi) = \text{accept} \big] = 1. $$&lt;&#x2F;p&gt;
&lt;p&gt;Here $\Pr\big[V(S, \pi) = \text{accept} \big]$ denotes the probability that the verifier accepts the proof given a simulator $S$ and a proof $\pi$.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Soundness&lt;&#x2F;strong&gt;: If the statement is &lt;em&gt;false&lt;&#x2F;em&gt;, no cheating prover can convince an honest verifier that it is true,
except with some negligible probability [^negligible].&lt;&#x2F;p&gt;
&lt;p&gt;$$ \forall A, \forall x, \forall \pi: \Pr\big[V(A, S, \pi) = \text{accept} \big] &amp;lt; \text{negligible}. $$&lt;&#x2F;p&gt;
&lt;p&gt;Here $\Pr\big[V(A, S, \pi) = \text{accept} \big]$ denotes the probability that the verifier accepts the proof given an adversary $A$, a simulator $S$, and a proof $\pi$.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Zero-Knowledge&lt;&#x2F;strong&gt;: If the statement is true, the verifier learns nothing about the secret $x$.
A proof is zero-knowledge if there exists a simulator $S$ that can simulate the verifier’s view
without knowing the secret $x$.&lt;&#x2F;p&gt;
&lt;p&gt;$$ \forall x: \text{View}_V\big[P(x) \leftrightarrow V(\pi)\big] = S(x, \pi). $$&lt;&#x2F;p&gt;
&lt;p&gt;Here $\text{View}_V$ is the view of the verifier $V$,
and $\leftrightarrow$ denotes the interaction between the prover and the verifier.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;zkp&#x2F;$block.attrs(&amp;#x27;info&amp;#x27;)&quot;&gt;&lt;&#x2F;a&gt;
A function $f$ is negligible if for every polynomial $p$,
there exists an $N$ such that for all $n &amp;gt; N$,
$$ f(n) &amp;lt; \frac{1}{p(n)}. $$
If you want to learn more about negligible functions,
read Chapter 3, Section 3.1 of the book &lt;a href=&quot;https:&#x2F;&#x2F;doi.org&#x2F;10.1201&#x2F;9781420010756&quot;&gt;Introduction to Modern Cryptography&lt;&#x2F;a&gt; by Katz &amp;amp; Lindell.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If you come up from a scheme that satisfies these properties,
congratulations, you have a &lt;strong&gt;Zero-Knowledge Proof&lt;&#x2F;strong&gt; scheme
and you can name it whatever you want,
just like a Pokemon!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zkps-taxonomy&quot;&gt;ZKPs Taxonomy&lt;&#x2F;h2&gt;
&lt;p&gt;We can classify &lt;strong&gt;Zero-Knowledge Proofs&lt;&#x2F;strong&gt; into two broad categories:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interactive Zero-Knowledge Proofs&lt;&#x2F;strong&gt;: In this case, the prover and the verifier interact multiple times.
The prover sends a proof to the verifier,
and the verifier sends a challenge to the prover,
and this interaction continues until the verifier is convinced.
The Fiat-Shamir Heuristic can transform an interactive ZKP into a non-interactive ZKP.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Non-Interactive Zero-Knowledge Proofs&lt;&#x2F;strong&gt;: In this case, the prover sends a proof to the verifier,
and the verifier accepts or rejects the proof.
No further interaction is needed.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Additionally,
the setup of the &lt;strong&gt;simulator $S$ with respect to the data it uses&lt;&#x2F;strong&gt;
can be further classified into three categories.
Generally speaking, the data used by $S$ is some random bits.
In trusted setups, if the data is compromised,
the security of the proof is also compromised.
In other words, anyone with the hold of the data can prove anything to anyone.
This is bad, and we want to avoid it.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Trusted Setup&lt;&#x2F;strong&gt;: $S$ uses data that must be kept secret.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Trusted but Universal Setup&lt;&#x2F;strong&gt;: $S$ uses data that must be kept private,
but it only uses for the initial setup.
Future proofs can be verified without the need for the initial data,
and can be considered transparent.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Transparent Setup&lt;&#x2F;strong&gt;: $S$ uses no data at all.
This is the best setup, as it doesn’t require any data to be used by $S$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Some of the most popular Zero-Knowledge Proof systems are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;zk-SNARKs&lt;&#x2F;strong&gt;: Zero-Knowledge Succinct Non-Interactive Argument of Knowledge.
This is a non-interactive ZKP system with a trusted setup.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Bulletproofs&lt;&#x2F;strong&gt;: A non-interactive ZKP system with a transparent setup.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;zk-STARKs&lt;&#x2F;strong&gt;: Zero-Knowledge Scalable Transparent Argument of Knowledge.
This is a non-interactive ZKP system with a transparent setup,
with an additional property of being (plausibly) post-quantum secure.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zk-snarks&quot;&gt;zk-SNARKs&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;zk-SNARKs&lt;&#x2F;strong&gt; are the most popular Zero-Knowledge Proof system.
They are used in the Zcash protocol,
and the defunct Tornado Cash smart contract.
Ethereum also uses zk-SNARKs in its Layer 2 scaling solution,
the zk-Rollups.
&lt;a href=&quot;https:&#x2F;&#x2F;bitvm.org&#x2F;&quot;&gt;BitVM&lt;&#x2F;a&gt; also uses a SNARK-based VM to run smart contracts
on top of Bitcoin.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s go over the concepts behind zk-SNARKs.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;zkp&#x2F;$block.attrs(&amp;#x27;info&amp;#x27;)&quot;&gt;&lt;&#x2F;a&gt;
most of this section is based on [Petkus19].&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;the-first-idea-proving-knowledge-of-a-polynomial&quot;&gt;The first idea: Proving Knowledge of a Polynomial&lt;&#x2F;h3&gt;
&lt;p&gt;First some polynomial primer.
&lt;strong&gt;A polynomial $f(x)$ is a function that can be written as&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;$$ f(x) = c_d x^d + \ldots + c_1 x^1 + c_0 x^0 $$&lt;&#x2F;p&gt;
&lt;p&gt;where $c_d, \ldots, c_1, c_0$ are the coefficients of the polynomial,
and $d$ is the degree of the polynomial.&lt;&#x2F;p&gt;
&lt;p&gt;Now, the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fundamental_theorem_of_algebra&quot;&gt;Fundamental Theorem of Algebra&lt;&#x2F;a&gt; states that
&lt;strong&gt;a polynomial of degree $d$ can have at most $d$ (real-valued-only) roots&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;zkp&#x2F;$block.attrs(&amp;#x27;info&amp;#x27;)&quot;&gt;&lt;&#x2F;a&gt;
The “at most” is because we are talking about real-valued-only roots.
If we consider complex roots, then a polynomial of degree $d$ has exactly $d$ roots.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This can be extended to the concept that &lt;strong&gt;two non-equal polynomials of degree $d$ can have at most $d$ points of intersection&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The idea of proving knowledge of a polynomial is to show that you know the polynomial,
without revealing the polynomial itself.&lt;&#x2F;p&gt;
&lt;p&gt;This simple protocol can be done in four steps,
note that both the prover and the verifier have knowledge of the polynomial:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Verifier chooses a random value for $x$ and evaluates his polynomial locally&lt;&#x2F;li&gt;
&lt;li&gt;Verifier gives $x$ to the prover and asks to evaluate the polynomial in question&lt;&#x2F;li&gt;
&lt;li&gt;Prover evaluates his polynomial at $x$ and gives the result to the verifier&lt;&#x2F;li&gt;
&lt;li&gt;Verifier checks if the local result is equal to the prover’s result,
and if so then the statement is proven with a high confidence&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;How much is “high confidence”?
Suppose that the verifier chooses an $x$ at random from a set of $2^{256}$ values,
that is a 256-bit number.
According to &lt;a href=&quot;https:&#x2F;&#x2F;www.wolframalpha.com&#x2F;input?i2d=true&amp;amp;i=Power%5B2%2C256%5D&quot;&gt;Wolfram Alpha&lt;&#x2F;a&gt;,
the decimal approximation is $\approx 1.16 \times 10^{77}$.
This is almost the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Observable_universe#Matter_content%E2%80%94number_of_atoms&quot;&gt;number of atoms in the observable universe&lt;&#x2F;a&gt;!
The number of points where evaluations are different is $10^{77} - d$,
where $d$ is the degree of the polynomial.
Therefore, we can assume with overwhelming probability that the prover knows the polynomial.
This is due to the fact that an adversary has $\frac{d}{10^{77}}$ chance of guessing the polynomial[^birthday],
which we can safely consider negligible.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;zkp&#x2F;$block.attrs(&amp;#x27;info&amp;#x27;)&quot;&gt;&lt;&#x2F;a&gt;
The &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Birthday_problem&quot;&gt;Birthday paradox&lt;&#x2F;a&gt;
states that any collision resistance scheme has a probability of $\frac{1}{2}$ of collision,
hence we take the square root of the number of possible values.
So, the security of the polynomial proof is $\sqrt{10^{77}} = 10^{38.5}$,
which is still a huge number.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;the-second-idea-proving-knowledge-of-a-polynomial-without-revealing-the-polynomial&quot;&gt;The second idea: Proving Knowledge of a Polynomial without Revealing the Polynomial&lt;&#x2F;h3&gt;
&lt;p&gt;The protocol above has some implications,
mainly that the protocol works only for a certain polynomial,
and the verifier has to know the polynomial in advance.
Which is not practical at all since we want to prove knowledge
of a secret without revealing the secret itself.&lt;&#x2F;p&gt;
&lt;p&gt;We can do better, we can use the fact,
also stated in the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fundamental_theorem_of_algebra&quot;&gt;Fundamental Theorem of Algebra&lt;&#x2F;a&gt;,
that any polynomial can be factored into linear polynomials,
i.e. a set of degree-1 polynomials representing a line.
We can represent any valid polynomial as a product of its linear-polynomial factors:&lt;&#x2F;p&gt;
&lt;p&gt;$$ (x - a_0) (x - a_1) \ldots (x - a_d) = 0 $$&lt;&#x2F;p&gt;
&lt;p&gt;where $a_0, \ldots, a_{d}$ are the roots of the polynomial.
If you wanna prove knowledge of a polynomial, it is just a matter of proving knowledge of its roots.
But how do we do that without disclosing the polynomial itself?
This can be accomplished by proving that a polynomial $p(x)$ is the multiplication
of the factors $t(x) = (x - a_0) \ldots (x - a_d)$, called the &lt;strong&gt;target polynomial&lt;&#x2F;strong&gt;,
and some arbitrary polynomial $h(x)$, called the &lt;strong&gt;residual polynomial&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;$$ p(x) = t(x) \cdot h(x). $$&lt;&#x2F;p&gt;
&lt;p&gt;The prover can show that exists some polynomial $h(x)$ such that
$p(x)$ can be made equal to $t(x)$.
You can find $h(x)$ by simply dividing $p(x)$ by $t(x)$:&lt;&#x2F;p&gt;
&lt;p&gt;$$ h(x) = \frac{p(x)}{t(x)}. $$&lt;&#x2F;p&gt;
&lt;p&gt;Now we can create a protocol that can work for any polynomial $p(x)$
with only three steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Verifier samples a random value $r$, calculates $t = t(r)$ and gives $r$ to the
prover&lt;&#x2F;li&gt;
&lt;li&gt;Prover calculates $h(x) = \frac{p(x)}{t(x)}$ and evaluates $p = p(r)$ and $h = h(r)$;
the resulting values $p$, $h$ are provided to the verifier&lt;&#x2F;li&gt;
&lt;li&gt;Verifier then checks that $p = t \cdot h$, if so those polynomials are equal,
meaning that $p(x)$ has $t(x)$ as a cofactor.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Note that the verifier has no clue about the polynomial $p(x)$,
and can be convinced that the prover knows the polynomial $p(x)$.&lt;&#x2F;p&gt;
&lt;p&gt;For example, let’s consider two polynomials $p(x)$ and $t(x)$ of degree $3$:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$p(x) = x^3 - 3x^2 + 2x$&lt;&#x2F;li&gt;
&lt;li&gt;$t(x) = (x - 1) (x - 2)$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;An example protocol interaction in this case could be:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Verifier samples a random value $23$, calculates $t = t(23) = (23 − 1)(23 − 2) = 462$ and
gives $23$ to the prover&lt;&#x2F;li&gt;
&lt;li&gt;Prover calculates $h(x) = \frac{p(x)}{t(x)} = x$, evaluates $p = p(23) = 10626$ and $h = h(23) = 23$
and provides $p$, $h$ to the verifier&lt;&#x2F;li&gt;
&lt;li&gt;Verifier then checks that $p = t \cdot h$, i.e. $10626 = 462 \cdot 23$,
which is true, and therefore the statement is proven&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Great! We can prove stuff without revealing the stuff itself!
Noice!
We know only need to find a trick to represent
any sort of computation as a polynomial.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-third-idea-representing-computations-as-polynomials&quot;&gt;The third idea: Representing Computations as Polynomials&lt;&#x2F;h3&gt;
&lt;p&gt;We can &lt;strong&gt;represent any computation as a polynomial by using &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Arithmetic_circuit&quot;&gt;Arithmetic Circuits&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.
An arithmetic circuit is a directed acyclic graph (DAG) where:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Every indegree-zero node is an input gate that represents a variable $x_i$&lt;&#x2F;li&gt;
&lt;li&gt;Every node with indegree $&amp;gt;1$ is either:
&lt;ul&gt;
&lt;li&gt;an addition gate, $+$, that represents the sum of its children&lt;&#x2F;li&gt;
&lt;li&gt;a multiplication gate, $\times$, that represents the product of its children&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example of an arithmetic circuit that represents the polynomial $p(x_1, x_2) = x_2^3 + x_1 x_2^2 + x_2^2 + x_1 x_2$:&lt;&#x2F;p&gt;


&lt;noscript&gt;
    &lt;strong&gt;⚠️ JavaScript is required to render the diagram.&lt;&#x2F;strong&gt;
&lt;&#x2F;noscript&gt;
&lt;pre class=&quot;mermaid invertible-image&quot;&gt;
    flowchart TD
x1[&quot;x₁&quot;]
x2[&quot;x₂&quot;]
one[&quot;1&quot;]
add1[&quot;\+&quot;]
add2[&quot;\+&quot;]
mult[&quot;×&quot;]
x1 --&gt; add1
x2 --&gt; add2
one --&gt; add2
add2 --&gt; add1
add1 --&gt; mult
add2 --&gt; mult
&lt;&#x2F;pre&gt;
&lt;p&gt;In the circuit above, the input gates compute (from left to right)
$x_{1},x_{2}$ and $1$,
the sum gates compute $x_{1}+x_{2}$
and $x_{2}+1$,
and the product gate computes $(x_{1}+x_{2})x_{2}(x_{2}+1)$
which evaluates to $x_{2}^{3}+x_{1}x_{2}^{2}+x_{2}^{2}+x_{1}x_{2}$.&lt;&#x2F;p&gt;
&lt;p&gt;The idea is to prove that the output of the circuit is equal to some target polynomial $t(x)$.
This can be done by proving that the output of the circuit is equal to the target polynomial $t(x)$
multiplied by some arbitrary polynomial $h(x)$,
as we did in the previous section.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;remarks&quot;&gt;Remarks&lt;&#x2F;h2&gt;
&lt;p&gt;This is a very high-level overview of Zero-Knowledge Proofs.
The subject is quite complex and requires a lot of mathematical background.
I tried to simplify it as much as possible,
to give a general intuition of how Zero-Knowledge Proofs work.
Please check the resources below for more in-depth information.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h2&gt;
&lt;div class=&quot;admonition info&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-info&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;INFO&lt;&#x2F;strong&gt;
        &lt;p&gt;We have tons of papers on the subject.
Here are some selected few.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The whole idea of ZKPs as discussed above in three properties
(Completeness, Soundness, and Zero-Knowledge)
was first conceived by &lt;code&gt;SMR85&lt;&#x2F;code&gt;.
Later &lt;code&gt;Kil92&lt;&#x2F;code&gt; showed that some of the properties’ assumptions can be relaxed,
more specifically using computational soundness instead of statistical soundness.
&lt;code&gt;Mic94&lt;&#x2F;code&gt; applied the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fiat%E2%80%93Shamir_heuristic&quot;&gt;Fiat-Shamir Heuristic&lt;&#x2F;a&gt;
to &lt;code&gt;Kil92&lt;&#x2F;code&gt;’s contributions to show that you can create any non-interactive ZKP system into
a non-interactive ZKP system using the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Random_oracle_model&quot;&gt;Random Oracle Model&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Going to the zk-SNARKs side,
the term was introduced by &lt;code&gt;Bit11&lt;&#x2F;code&gt;
and the first protocol, the Pinocchio protocol,
was introduced by &lt;code&gt;Gen12&lt;&#x2F;code&gt; and &lt;code&gt;Par13&lt;&#x2F;code&gt;.
The Bulletproofs protocol was introduced by &lt;code&gt;Bunz18&lt;&#x2F;code&gt;,
followed by the Bulletproofs++ protocol by &lt;code&gt;Eagen24&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;zk-STARKs were introduced by &lt;code&gt;Ben-Sasson19&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, if you want an intuitive but very comprehensive explanation of zk-SNARKs,
then you should read &lt;code&gt;Petkus19&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;rdi.berkeley.edu&#x2F;&quot;&gt;Blockchain Web3 MOOC from Berkeley University&lt;&#x2F;a&gt;
provides a good introduction to Zero-Knowledge Proofs,
while being quite accessible to beginners.&lt;&#x2F;p&gt;
&lt;p&gt;This &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;iRQw2RpQAVc&quot;&gt;video from YouTube&lt;&#x2F;a&gt;
explains the math behind the Arithmetic Circuits
and how to encode them as polynomials.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;div class=&quot;references&quot;&gt;
    &lt;p&gt;&lt;code&gt;SMR85&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;epubs.siam.org&#x2F;doi&#x2F;10.1137&#x2F;0218012&quot;&gt;https:&#x2F;&#x2F;epubs.siam.org&#x2F;doi&#x2F;10.1137&#x2F;0218012&lt;&#x2F;a&gt; “Goldwasser, S., Micali, S., &amp;amp; Rackoff, C. (1985). The knowledge complexity of interactive proof systems. SIAM Journal on computing, 18(1), 186-208.”&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Kil92&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;dl.acm.org&#x2F;doi&#x2F;abs&#x2F;10.1145&#x2F;129712.129782&quot;&gt;https:&#x2F;&#x2F;dl.acm.org&#x2F;doi&#x2F;abs&#x2F;10.1145&#x2F;129712.129782&lt;&#x2F;a&gt; “Kilian, J. (1992). A note on efficient zero-knowledge proofs and arguments (extended abstract). In Proceedings of the twenty-fourth annual ACM symposium on Theory of computing (pp. 723-732).”&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Mic94&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;ieeexplore.ieee.org&#x2F;abstract&#x2F;document&#x2F;365746&#x2F;&quot;&gt;https:&#x2F;&#x2F;ieeexplore.ieee.org&#x2F;abstract&#x2F;document&#x2F;365746&#x2F;&lt;&#x2F;a&gt; “Micali, S. (1994). CS proofs (extended abstract). In Proceedings 35th Annual Symposium on Foundations of Computer Science (pp. 436-445).”&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Bit11&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2011&#x2F;443&quot;&gt;https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2011&#x2F;443&lt;&#x2F;a&gt; “Bitansky, N., Canetti, R., &amp;amp; Goldwasser, S. (2011). From Extractable Collision Resistance to Succinct Non-Interactive Arguments of Knowledge, and Back Again. In Proceedings of the 3rd innovations in theoretical computer science conference (pp. 326-349).”&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Gen12&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2012&#x2F;215&quot;&gt;https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2012&#x2F;215&lt;&#x2F;a&gt; “Gennaro, R., Gentry, C., Parno, B., &amp;amp; Raykova, M. (2013). Quadratic span programs and succinct NIZKs without PCPs. In Advances in Cryptology–EUROCRYPT 2013: 32nd Annual International Conference on the Theory and Applications of Cryptographic Techniques, Athens, Greece, May 26-30, 2013. Proceedings 32 (pp. 626-645).”&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Par13&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2013&#x2F;279&quot;&gt;https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2013&#x2F;279&lt;&#x2F;a&gt; “Parno, B., Gentry, C., Howell, J., &amp;amp; Raykova, M. (2013). Pinocchio: Nearly practical verifiable computation. In Proceedings of the 2013 IEEE Symposium on Security and Privacy (SP) (pp. 238-252).”&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Bunz18&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;ieeexplore.ieee.org&#x2F;document&#x2F;8418611&quot;&gt;https:&#x2F;&#x2F;ieeexplore.ieee.org&#x2F;document&#x2F;8418611&lt;&#x2F;a&gt; “Bünz, B., Bootle, J., Boneh, D., Poelstra, A., Wuille, P., &amp;amp; Maxwell, G. (2018). Bulletproofs: Short Proofs for Confidential Transactions and More. In Proceedings of the 2018 IEEE Symposium on Security and Privacy (SP) (pp. 315-334).”&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Eagen24&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;link.springer.com&#x2F;chapter&#x2F;10.1007&#x2F;978-3-031-58740-5_9&quot;&gt;https:&#x2F;&#x2F;link.springer.com&#x2F;chapter&#x2F;10.1007&#x2F;978-3-031-58740-5_9&lt;&#x2F;a&gt; “Bulletproofs++: next generation confidential transactions via reciprocal set membership arguments. In Annual International Conference on the Theory and Applications of Cryptographic Techniques (pp. 249-279).”&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Ben-Sasson19&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;link.springer.com&#x2F;chapter&#x2F;10.1007&#x2F;978-3-030-26954-8_23&quot;&gt;https:&#x2F;&#x2F;link.springer.com&#x2F;chapter&#x2F;10.1007&#x2F;978-3-030-26954-8_23&lt;&#x2F;a&gt; “Ben-Sasson, E., Bentov, I., Horesh, Y., &amp;amp; Riabzev, M. (2019). Scalable zero knowledge with no trusted setup. In Advances in Cryptology–CRYPTO 2019: 39th Annual International Cryptology Conference, Santa Barbara, CA, USA, August 18–22, 2019, Proceedings, Part III 39 (pp. 701-732).”&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Petkus19&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;1906.07221&quot;&gt;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;1906.07221&lt;&#x2F;a&gt; “Petkus, M. (2019). Why and How zk-SNARK works. arXiv preprint 1906.07221.”&lt;&#x2F;p&gt;

&lt;&#x2F;div&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Shamir&#x27;s secret sharing</title>
        <published>2024-04-14T10:37:02+00:00</published>
        <updated>2024-04-14T10:37:02+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/shamir-secret-sharing/" type="text/html"/>
        <id>https://storopoli.com/blog/shamir-secret-sharing/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;shamir-secret-sharing&#x2F;polynomial_king.webp&quot; alt=&quot;The Polynomial king and he can do anything!&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this post, we’ll talk about
&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;Shamir’s Secret Sharing&lt;&#x2F;a&gt;
(SSS)&lt;&#x2F;strong&gt;, a cryptographic algorithm that allows us to &lt;strong&gt;split a secret into multiple parts,
called shares, in such a way that the secret can only be reconstructed
if a certain number of shares are combined&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The idea is to give a visual intuition of how the algorithm works,
and describe the mathematical details behind it.&lt;&#x2F;p&gt;
&lt;p&gt;The code for all the plots in this post can be found in
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;storopoli&#x2F;shamir-secret-sharing&quot;&gt;&lt;code&gt;storopoli&#x2F;shamir-secret-sharing&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;polynomial-interpolation&quot;&gt;Polynomial Interpolation&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;If you have two points you can draw a &lt;em&gt;unique&lt;&#x2F;em&gt; line that passes through them&lt;&#x2F;strong&gt;.
Suppose that you have the points $(3,3)$ and $(4,4)$.
Hence, there is only one line that passes through these two points.
See the plot below.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;shamir-secret-sharing&#x2F;line.svg&quot; alt=&quot;A line passing through two points&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;If you have three points you can draw a &lt;em&gt;unique&lt;&#x2F;em&gt; parabola that passes through them&lt;&#x2F;strong&gt;.
Suppose that you have the points $(-4,16)$, $(1,1)$, and $(4,16)$.
Hence, there is only one parabola that passes through these three points.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;shamir-secret-sharing&#x2F;quadratic.svg&quot; alt=&quot;A parabola passing through three points&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;If you have four points you can draw a &lt;em&gt;unique&lt;&#x2F;em&gt; cubic polynomial that passes through them&lt;&#x2F;strong&gt;.
Suppose that you have the points $(-2,8)$, $(-1,1)$, $(1,1)$, and $(2,8)$.
Hence, there is only one cubic polynomial that passes through these four points.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;shamir-secret-sharing&#x2F;cubic.svg&quot; alt=&quot;A cubic polynomial passing through four points&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As you might have guessed, &lt;strong&gt;if you have $n$ points you can draw a &lt;em&gt;unique&lt;&#x2F;em&gt; polynomial of degree $n-1$ that passes through them&lt;&#x2F;strong&gt;.
This is called &lt;strong&gt;polynomial interpolation&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;shamir-secret-sharing&#x2F;$block.attrs(&amp;#x27;info&amp;#x27;)&quot;&gt;&lt;&#x2F;a&gt;
Steams from the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lagrange_polynomial&quot;&gt;Lagrange interpolation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;More formally, say that we have a polynomial $f(x)$ of degree $n$:&lt;&#x2F;p&gt;
&lt;p&gt;$$ f(x) = ax^n + a_{n-1} x^{n-1} + \ldots + a_1 x + a_0 $$&lt;&#x2F;p&gt;
&lt;p&gt;and we have $n$ points $(x_1, y_1)$, $(x_2, y_2)$, $\ldots$, $(x_n, y_n)$.
Then, there is a unique polynomial $f(x)$ of degree $n-1$ such that $f(x_i) = y_i$ for $i = 1, 2, \ldots, n$.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shamir-s-secret-sharing&quot;&gt;Shamir’s Secret Sharing&lt;&#x2F;h2&gt;
&lt;p&gt;Ok now let’s connect this idea to Shamir’s Secret Sharing.
Suppose you encode a &lt;strong&gt;secret $k$ as a number&lt;&#x2F;strong&gt;.
Let’s say a private key for a Bitcoin wallet.
As you’ve already know, a private key is just a &lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;shamir-secret-sharing&#x2F;$link.page(&amp;#x27;blog&#x2F;2024-02-05-crypto-basics&amp;#x27;)&quot;&gt;very big number&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You want to split this secret into &lt;strong&gt;$N$ parts&lt;&#x2F;strong&gt;, called &lt;strong&gt;shares&lt;&#x2F;strong&gt;.
You also want to specify a &lt;strong&gt;threshold $T$&lt;&#x2F;strong&gt; such that the &lt;strong&gt;secret $k$ can only be reconstructed if at &lt;em&gt;least&lt;&#x2F;em&gt; $T$ shares are combined&lt;&#x2F;strong&gt;.
Here’s how you can use polynomial interpolation to achieve this.&lt;&#x2F;p&gt;
&lt;p&gt;The idea is to use polynomial interpolation to generate a polynomial $f(x)$ of degree $T-1$ such that $f(0) = k$.
In other words, the polynomial $f(x)$ when evaluated at $x = 0$ should give you the secret $k$.
Then, you can &lt;strong&gt;generate $N$ shares by evaluating $f(x)$ at $N$ different points&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example with $T = 4$ and $N = 5$.
Our secret is $k = 5$ and since $T = 4$, we generate a polynomial of degree $T-1 = 3$.
We’ve chosen the polynomial $f(x) = 2x^3 - 3x^2 + 2x + 5 $.
Then, we evaluate $f(x)$ at $N = 5$ different points to generate the shares.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;shamir-secret-sharing&#x2F;shamir.svg&quot; alt=&quot;Shamir’s Secret Sharing with $N=5$ and $T=4$&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now this polynomial is &lt;strong&gt;guaranteed to pass through the point $(0, k)$&lt;&#x2F;strong&gt;.
Hence if you evaluate &lt;strong&gt;$f(0)$ you get the secret $k$&lt;&#x2F;strong&gt;.
To know the secret, you &lt;strong&gt;need to know the polynomial $f(x)$&lt;&#x2F;strong&gt;.
And to know the polynomial $f(x)$, you &lt;strong&gt;need to know at least $T$ shares&lt;&#x2F;strong&gt;.
Otherwise, you &lt;strong&gt;can’t reconstruct the polynomial and hence the secret&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this setup we generate addresses from the extended public key (xpub) of a Bitcoin wallet that has the private key $k$.
Then, we split the private key into shares and distribute them to different people.
Only if at least $T$ people come together, they can reconstruct the private key and spend the funds.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rotating-shares&quot;&gt;Rotating Shares&lt;&#x2F;h2&gt;
&lt;p&gt;Note that there’s nothing special about the points&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$(-2, f(-2))$&lt;&#x2F;li&gt;
&lt;li&gt;$(-1, f(-1))$&lt;&#x2F;li&gt;
&lt;li&gt;$(\frac{1}{2}, f(\frac{1}{2}))$&lt;&#x2F;li&gt;
&lt;li&gt;$(1, f(1))$&lt;&#x2F;li&gt;
&lt;li&gt;$(2, f(2))$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;that we’ve used in the previous example.
You could have chosen &lt;strong&gt;any other $N$ points and the polynomial would still be the same&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Suppose now that your share buddy has lost his share.
Then, the participants can get together and &lt;strong&gt;generate a new polynomial evaluation at any point $n \notin \{ -2, -1, \frac{1}{2}, 1, 2 \}$&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is exactly what the image below shows:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;shamir-secret-sharing&#x2F;shamir_alternate_single.svg&quot; alt=&quot;Shamir’s Secret Sharing with $N=5$ and $T=4$&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here we’ve replaced the point $(-2, f(-2))$ with the point $(3, f(3))$.
We also assume that the point $(-2, f(-2))$ is lost.
The &lt;strong&gt;polynomial is still the same&lt;&#x2F;strong&gt;, and the secret can still be reconstructed if at least $T$ shares are combined.&lt;&#x2F;p&gt;
&lt;p&gt;We can also &lt;strong&gt;rotate all the shares&lt;&#x2F;strong&gt;.
This is shown in the image below:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;shamir-secret-sharing&#x2F;shamir_alternate_multiple.svg&quot; alt=&quot;Shamir’s Secret Sharing with $N=5$ and $T=4$&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here &lt;strong&gt;all previous points have been replaced by new points&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-polynomial-king&quot;&gt;The Polynomial King&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I am the &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;ashTaoGrR2o?t=642&quot;&gt;&lt;del&gt;Lizard&lt;&#x2F;del&gt; Polynomial King, I can do anything!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Jim Morrison&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In the end &lt;strong&gt;if you somehow know the polynomial $f(x)$, you can do anything&lt;&#x2F;strong&gt;.
You can rug-pull all you share buddies and take all the funds.&lt;&#x2F;p&gt;
&lt;p&gt;There are several ways that a malicious actor could learn the polynomial.
For example, if the shares are generated in a predictable way, an attacker could guess the polynomial.
Or, during the reconstruction phase, an attacker could learn the polynomial by observing the shares.
Additionally, during a distributed share generation, an attacker could disrupt the process and force the participants to reveal their shares.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;shamir-secret-sharing&#x2F;$block.attrs(&amp;#x27;info&amp;#x27;)&quot;&gt;&lt;&#x2F;a&gt;
Or force them to reuse nonces. Then, “poof”, private keys are gone.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this post, &lt;strong&gt;we’ve seen how polynomial interpolation can be used to split a secret into multiple shares&lt;&#x2F;strong&gt;.
We’ve also seen how the &lt;strong&gt;secret can be reconstructed if a certain number of shares are combined&lt;&#x2F;strong&gt;.
This is the basic idea behind &lt;strong&gt;Shamir’s Secret Sharing (SSS)&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Note that the devil is in the details.
A lot of the complexities of SSS come from the &lt;strong&gt;details of how the shares are generated and how the secret is reconstructed&lt;&#x2F;strong&gt;.
There are &lt;strong&gt;several types of attacks that can be done by a malicious actor&lt;&#x2F;strong&gt;.
Especially during the share generation and reconstruction phases.&lt;&#x2F;p&gt;
&lt;p&gt;The intent of this blog post is to show how &lt;strong&gt;elegant, simple and powerful the idea behind SSS is&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Sherlock Holmes final letter: a simple dead man&#x27;s switch in Rust</title>
        <published>2024-03-23T14:00:16+00:00</published>
        <updated>2024-03-23T14:00:16+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/dead-man-switch/" type="text/html"/>
        <id>https://storopoli.com/blog/dead-man-switch/</id>
        
            <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;dead-man-switch&#x2F;the_final_problem.png&quot; alt=&quot;Sherlock Holmes fights Moriarty at the Reichenbach Falls&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Got state secrets? Or maybe 50 BTC?
Don’t trust your government or lawyers?
And you want to make sure that if you die, your secrets are passed on?
Don’t worry, I got you covered.
In this post,
I’ll introduce you to a &lt;strong&gt;simple no-bullshit dead man’s switch&lt;&#x2F;strong&gt; written in Rust.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dead-man-s-switch&quot;&gt;Dead Man’s Switch&lt;&#x2F;h2&gt;
&lt;p&gt;According to &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dead_man%27s_switch&quot;&gt;Wikipedia&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;dead man’s switch&lt;&#x2F;strong&gt; is a switch that is designed to be &lt;strong&gt;activated or
deactivated if the human operator becomes incapacitated&lt;&#x2F;strong&gt;, such as through death,
loss of consciousness, or being bodily removed from control.
Originally applied to switches on a vehicle or machine,
it has since come to be used to describe other intangible uses,
as in &lt;strong&gt;computer software&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A Dead Man’s Switch (DMS) can be handy and common scenarios might be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Password to your encrypted files&lt;&#x2F;strong&gt;: You gave a trusted person an encrypted
USB drive and the DMS sends the password to decrypt it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Bitcoin Multisig&lt;&#x2F;strong&gt;: Sending 1 of 3 keys to a trusted person.
You hold 1 key, your friend holds another key, and the DMS holds the last key.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Instructions&lt;&#x2F;strong&gt;: Sending instructions on how to access something of value or
importance.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Goodbye Note&lt;&#x2F;strong&gt;: Sending a goodbye note to loved ones.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A DMS is specially useful when you don’t trust the government or lawyers to
handle your affairs after you die.
It’s also useful when you don’t want to disclose your secrets while you are alive.&lt;&#x2F;p&gt;
&lt;p&gt;The idea is simple:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;You set up a DMS&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;You need to check in periodically&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;If you don’t check in, the DMS is triggered&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In this post opening picture, is depicted an image from Conan Doyle’s story
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;The_Final_Problem&quot;&gt;The Final Problem&lt;&#x2F;a&gt;,
where Sherlock Holmes fights Moriarty at the Reichenbach Falls.
Eventually, both fall to their deaths.
I am pretty confident that Sherlock Holmes had a DMS in place to send Watson
a message.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve tried finding nice implementations of DMS, but to no avail.
They all were either unmaintained or plaged with spaghetti code.
My inspiration to build one came from two sources.
First, a friend of mine told me that he is using a bunch of badly-written
shell scripts with some cron jobs to manage his DMS.
Second, there might be a genuine need for a simple DMS in the privacy community.
For example, &lt;a href=&quot;https:&#x2F;&#x2F;finalmessage.io&quot;&gt;finalmessage.io&lt;&#x2F;a&gt;,
despite being closed source, and you have no idea who’s behind it,
has gathered enough users in a subscription model and they are not accepting new
users anymore.
If people are paying for this, they can pay for a Linux server somewhere.
But they would need a simple DMS to run on it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-use-it&quot;&gt;How to Use It&lt;&#x2F;h2&gt;
&lt;div class=&quot;admonition danger&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-danger&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;Disclaimer&lt;&#x2F;strong&gt;
        &lt;p&gt;Use at your own risk. Check the f****(as in &lt;em&gt;friendly&lt;&#x2F;em&gt;) code.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I invite you to check out the code on GitHub at
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;storopoli&#x2F;dead-man-switch&quot;&gt;&lt;code&gt;storopoli&#x2F;dead-man-switch&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
The license is &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;licenses&#x2F;agpl-3.0.html&quot;&gt;AGPL-3.0&lt;&#x2F;a&gt;,
which means you can use it for free as long as you share your code.
The package is also available on &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;dead-man-switch&quot;&gt;crates.io&lt;&#x2F;a&gt;,
Rust’s package manager.&lt;&#x2F;p&gt;
&lt;p&gt;DMS is very easy to use and deploy.
There are several alternatives on how to deploy it.
Here are the two easiest ways:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Building from Source&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In a fresh Debian&#x2F;Ubuntu server install the following dependencies:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; apt-get install&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;y&lt;&#x2F;span&gt; cargo pkg-config libssl-dev&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Install the DMS:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install dead-man-switch-tui&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Run the app with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;dead-man-switch-tui&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using Nix&lt;&#x2F;strong&gt;. This is the easiest just do
&lt;code&gt;nix run github:storopoli&#x2F;dead-man-switch&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;dead-man-switch&#x2F;$block.attrs(&amp;#x27;info&amp;#x27;)&quot;&gt;&lt;&#x2F;a&gt;
I’ve also released a Web Interface for the dead-man-switch.
You can easily deploy it using Docker or Docker Compose.
Check out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;storopoli&#x2F;dead-man-switch&quot;&gt;GitHub repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve also launched a &lt;a href=&quot;https:&#x2F;&#x2F;start9.com&quot;&gt;StartOS&lt;&#x2F;a&gt; app with a simple interface
for configuring and checking in with the Dead Man’s Switch.
Check out the instructions on the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;storopoli&#x2F;dead-man-switch-startos&quot;&gt;&lt;code&gt;dead-man-switch-startos&lt;&#x2F;code&gt; repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Once, you successfully run the app, you will see the following output:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;dead-man-switch&#x2F;app_first_run.png&quot; alt=&quot;Initial Screen of Dead Man’s Switch&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you read the instructions carefully, all you need to know is detailed in
these 3 steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Edit the Config at &lt;code&gt;&#x2F;root&#x2F;.config&#x2F;deadman&#x2F;config.toml&lt;&#x2F;code&gt; and modify the settings.&lt;&#x2F;li&gt;
&lt;li&gt;Check-In with &lt;code&gt;c&lt;&#x2F;code&gt; within the warning time.&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise the Dead Man’s Switch will be triggered and the message with
optional attachment will be sent.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Upon the first run, the app will create a configuration file at an OS-agnostic
config file location:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Linux: &lt;code&gt;$XDG_CONFIG_HOME&lt;&#x2F;code&gt;, i.e. &lt;code&gt;$HOME&#x2F;.config|&#x2F;home&#x2F;alice&#x2F;.config&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;macOS: &lt;code&gt;$HOME&#x2F;Library&#x2F;Application Support&lt;&#x2F;code&gt;, i.e. &lt;code&gt;&#x2F;Users&#x2F;Alice&#x2F;Library&#x2F;Application Support&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Windows: &lt;code&gt;{FOLDERID_RoamingAppData}&lt;&#x2F;code&gt;, i.e. &lt;code&gt;C:\Users\Alice\AppData\Roaming&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this example, I am running it from a Debian server as the &lt;code&gt;root&lt;&#x2F;code&gt; user.
Hence, the configuration file is at &lt;code&gt;&#x2F;root&#x2F;.config&#x2F;deadman&#x2F;config.toml&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you open the configuration file, you will see the following content.
I’ve added some default values for inspiration[^central-park]:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;dead-man-switch&#x2F;$block.attrs(&amp;#x27;info&amp;#x27;)&quot;&gt;&lt;&#x2F;a&gt;
Please don’t go to bench 137 in Central Park, NY.
That was just an example.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml z-code&quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;username&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;me@example.com&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;password&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;smtp_server&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;smtp.example.com&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;smtp_port&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-toml&quot;&gt;587&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;message&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;I&amp;#39;m probably dead, go to Central Park NY under bench #137 you&amp;#39;ll find an age-encrypted drive. Password is our favorite music in Pascal case.&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;message_warning&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Hey, you haven&amp;#39;t checked in for a while. Are you okay?&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;subject&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;[URGENT] Something Happened to Me!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;subject_warning&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;[URGENT] You need to check in!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;to&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;someone@example.com&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;from&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;me@example.com&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;timer_warning&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-toml&quot;&gt;1209600&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;timer_dead_man&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-toml&quot;&gt;604800&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The configs are self-explanatory.
You might need some help to set up and find a reliable SMTP server.
One option is to use Gmail.
Unfortunately, Proton or Tutanota are not supported because they don’t support
SMTP.
Just grab the support page of your email provider and search for SMTP settings.
Plug the values in and you are good to go.&lt;&#x2F;p&gt;
&lt;p&gt;I want to bring your attention to the &lt;strong&gt;&lt;code&gt;timer_warning&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; and &lt;strong&gt;&lt;code&gt;timer_dead_man&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;
configs.
These are very important.&lt;&#x2F;p&gt;
&lt;p&gt;The way DMS works is by &lt;strong&gt;checking in periodically&lt;&#x2F;strong&gt;.
If you &lt;strong&gt;&lt;em&gt;don’t&lt;&#x2F;em&gt; check in within the &lt;code&gt;timer_warning&lt;&#x2F;code&gt; time,
the DMS will send a warning message to your own email&lt;&#x2F;strong&gt;, i.e. the &lt;code&gt;from&lt;&#x2F;code&gt; email declared in
the config, with the message &lt;code&gt;message_warning&lt;&#x2F;code&gt;
and subject &lt;code&gt;subject_warning&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you &lt;strong&gt;&lt;em&gt;still don’t check in&lt;&#x2F;em&gt; within the &lt;code&gt;timer_dead_man&lt;&#x2F;code&gt; time,
the DMS will send the “Dead Man’s” message to the &lt;code&gt;to&lt;&#x2F;code&gt; email declared in the
config&lt;&#x2F;strong&gt;,
with the message &lt;code&gt;message&lt;&#x2F;code&gt; and subject &lt;code&gt;subject&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The timers are in &lt;strong&gt;seconds&lt;&#x2F;strong&gt;, and the &lt;strong&gt;default values&lt;&#x2F;strong&gt; are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Warning Timer&lt;&#x2F;strong&gt;: 2 weeks&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Dead Man’s Timer&lt;&#x2F;strong&gt;: 1 week&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Feel free to change these values to your liking.&lt;&#x2F;p&gt;
&lt;p&gt;You can also add an attachment to the Dead Man’s Message.
Just add an &lt;code&gt;attachment&lt;&#x2F;code&gt; field to the config file with the &lt;em&gt;absolute&lt;&#x2F;em&gt; path
to the file.
For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml z-code&quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;attachment&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&#x2F;root&#x2F;important_file.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A good idea is to make this file encrypted.
Actually, it’s even better if you encrypted the whole fucking thing.
You can use &lt;a href=&quot;https:&#x2F;&#x2F;gnupg.org&#x2F;&quot;&gt;PGP&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;age-encryption.org&quot;&gt;&lt;code&gt;age&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
For example, this is a PGP-encrypted message:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;-----BEGIN PGP MESSAGE-----
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;jA0ECQMKDpTufzWBF+&#x2F;&#x2F;0ukBT&#x2F;vslTBHGlMeri&#x2F;cqpkxO2X7ZY1SYwiYwDqvdFAV
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;FGzPHUaGh8tQiuoh7tj0HJEIqBaktJoDNe3XsszFVSp3eQAAiWUh+t&#x2F;5pTIcQhW9
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;iKJHPUKGhqf9vg0Q4LS0F1RMhLejoeXt&#x2F;TvtHfsHE+kymbvp8p5gNiwoyugEZlta
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;qLd0ZJvMDg5c0&#x2F;Qw81+e6jW0ApwcT7MVf&#x2F;Y0dFKW1epsA1QfGH5rQYUWPJDP+SZR
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;hBd5034eKNKTUZYwAAoR0UJ6eqcnev9z9sTuct3uGPeXnNqK0zDKaP3rV&#x2F;9hnVPN
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;3gwEQEWL2Dl39pjv+x+QdViCirlrjPa0BaHzwveid2N8Ik3QBsxKGkyAXd0w3G+g
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;VAGwKDLUkXUIDytk&#x2F;PI8vRGLUhSmyG29KdeGdEiKde+DG5MUtjC4UyFCWxa5ZX5y
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;WNEg7049bd5Nx3B5WlFmKyWbsHynoziDJU2aq2uvaBLYA48roDN&#x2F;0sEUsuGFpxm3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;0&#x2F;3vd0kGxMt20HlsVpDRQz75mWJEmzxY2itRJbR84bEyN0ItWE9G5WwQ4mjmU+XL
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;0xYazglNYoAG0FXCxD6EpbDbQZxO&#x2F;OKIaGWI4d2Zs1zcwbcEfZnhsKB5kI4tYJZ2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ZTq+Q4xY4sFEoYzmNQbHY+mpgskgmHbRdBAGea+raiAXK&#x2F;wL4Qc9x1bDdNIKNBup
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;lsCRA1Dj&#x2F;5s0Qy64d2cbfWvCvx3R9B0JsHTcFq4DBELSOzSyzC&#x2F;mpCXCAi9K&#x2F;jE5
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;5VAnsnqaTZm+DVpciMTRxuRPD50MDYogTA&#x2F;N+Jer9WmQOgc0e1VrWsho2CgX0Z8I
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ycF56Wm+lBjTGRMLXexA1Ietm88wg&#x2F;OrY6BE57xpBMVemRc0P0A2g0KC1WkX8J3I
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;fw5IKoiGsd9mvuHNxJ40Rm14iTYV0z9t97GFTmWji5BZtKoQ8vNmy8skgEgEUuHS
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;LtwCU8D5XsHQY2EWsQv23KPyxpbdvl7vGP75xCzRqcWmeCMSyH1qYPsO87sPJ4eL
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Z4ywlr9ULagMgNMK&#x2F;KO7F45yJRCqGKCaYB3cpcEpgUIIlZRCiXZSUifb&#x2F;0EMWNAb
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;DzV&#x2F;otFp8aMrhwGxIEYv1wOmot9OrBRVgLVSNTU9EtJVzISEowbhe+7ZP1jUaAaW
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;WrjvDA==
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;=cfGG
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;-----END PGP MESSAGE-----
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this message there’s a nice Easter Egg for you, my friend.
The password is the name of the waterfall depicted in this post,
all together and in PascalCase.&lt;&#x2F;p&gt;
&lt;p&gt;Upon checking in, the timer will be reset to the Warning Timer,
even if you are already in the Dead Man’s Timer.&lt;&#x2F;p&gt;
&lt;p&gt;If both timers run out, the messages will be sent and DMS will exit.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-implementation-details&quot;&gt;The Implementation Details&lt;&#x2F;h2&gt;
&lt;div class=&quot;admonition info&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-info&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;INFO&lt;&#x2F;strong&gt;
        &lt;p&gt;For the stupid smelly nerds that want to go beyond the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sherlock-project&#x2F;sherlock&#x2F;issues&#x2F;2019&quot;&gt;“JUST MAKE A FUCKING .EXE AND GIVE IT TO ME”&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Before we dive into the code, here are the &lt;strong&gt;dependencies&lt;&#x2F;strong&gt; that I am using.
I’ve tried to keep them to a minimum, since I want this to be a dead-simple
program.
This also helps with reducing the incidence of bugs and narrowing the
attack surface:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ratatui.rs&quot;&gt;&lt;code&gt;ratatui&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; for the Terminal User Interface (TUI)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;serde.rs&quot;&gt;&lt;code&gt;serde&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;toml&quot;&gt;&lt;code&gt;toml&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
and &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;directories-next&quot;&gt;&lt;code&gt;directories-next&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
for managing the TOML configuration file.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lettre.rs&quot;&gt;&lt;code&gt;lettre&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to manage email sending,
and &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mime_guess&quot;&gt;&lt;code&gt;mime_guess&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to robustly
handle optional attachments.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;chrono&quot;&gt;&lt;code&gt;chrono&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to handle timers and date&#x2F;time
formatting.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;dead-man-switch&#x2F;$block.attrs(&amp;#x27;info&amp;#x27;)&quot;&gt;&lt;&#x2F;a&gt;
The Dead Man’s Switch Web Interface uses &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;axum&quot;&gt;&lt;code&gt;axum&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;djc.github.io&#x2F;askama&#x2F;&quot;&gt;&lt;code&gt;askama&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tower-rs&#x2F;tower&quot;&gt;&lt;code&gt;tower&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The app is divided into a library and a binary.
The library is contained in the &lt;code&gt;lib.rs&lt;&#x2F;code&gt; file and the binary in the &lt;code&gt;main.rs&lt;&#x2F;code&gt;,
both under the &lt;code&gt;src&#x2F;&lt;&#x2F;code&gt; directory.
Here’s a representation of the structure of &lt;code&gt;src&#x2F;&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;src&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;├──&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; config.rs&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;├──&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; email.rs&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;├──&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; lib.rs&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;├──&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; main.rs&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;├──&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; timer.rs&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;└──&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; tui.rs&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As we can see, it is divided into 4 modules:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;config.rs&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Handles the configuration file.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;email.rs&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Handles the email sending.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;timer.rs&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Handles the timers and timer logic.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;tui.rs&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Handles the Terminal User Interface (TUI).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Feel free to dive in any of these files to understand the implementation details.
I’ve made sure that the code is &lt;em&gt;both&lt;&#x2F;em&gt; &lt;strong&gt;well-tested&lt;&#x2F;strong&gt; and &lt;strong&gt;well-documented&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;contributions-are-welcome&quot;&gt;Contributions are Welcome&lt;&#x2F;h2&gt;
&lt;p&gt;If you want to contribute to the project, feel free to open a pull request.
I’ve marked a few issues as &lt;code&gt;good first issue&lt;&#x2F;code&gt; to help you get started.
Check out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;storopoli&#x2F;dead-man-switch&quot;&gt;GitHub repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve built a simple no-bullshit Dead Man’s Switch so that any person can use it.
Feel free to use it and share it with your friends.
Let’s hope that we don’t go to a dystopian future where everyone needs to use it.
Although, I am pretty sure that Sherlock Holmes would have used it no matter what.
Probably the way he would have used it is by:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Set-up a non-KYC email account that supports SMTP.&lt;&#x2F;li&gt;
&lt;li&gt;Sign-up for a non-KYC VPS with Bitcoin or Monero.&lt;&#x2F;li&gt;
&lt;li&gt;Access the VPS via Tor using Tails.&lt;&#x2F;li&gt;
&lt;li&gt;Change the server’s default SSH port to a random one.&lt;&#x2F;li&gt;
&lt;li&gt;Disallow password authentication and only allow key-based authentication.&lt;&#x2F;li&gt;
&lt;li&gt;Encrypt everything in the case the server is seized.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;div class=&quot;admonition tip&quot;&gt;
    &lt;div class=&quot;admonition-icon admonition-icon-tip&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;admonition-content&quot;&gt;
        &lt;strong class=&quot;admonition-title&quot;&gt;TIP&lt;&#x2F;strong&gt;
        &lt;p&gt;Sherlock could also use a coreboot non-KYC piece of hardware that
runs StartOS and the newly launched Dead Man’s Switch StartOS app that already
uses an onion service for handling the check-ins via Tor.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Seed phrases and entropy</title>
        <published>2024-02-11T15:59:02+00:00</published>
        <updated>2024-02-11T15:59:02+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/mnemonic/" type="text/html"/>
        <id>https://storopoli.com/blog/mnemonic/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;mnemonic&#x2F;password_strength.png&quot; alt=&quot;Password meme&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this post, let’s dive into a topic that is very important for anyone who uses the internet: &lt;strong&gt;passwords&lt;&#x2F;strong&gt;.
We’ll cover what the hell is &lt;strong&gt;Entropy&lt;&#x2F;strong&gt;,
good &lt;strong&gt;password practices&lt;&#x2F;strong&gt;,
and how it relates to &lt;strong&gt;Bitcoin “seed phrases”&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;mnemonic&#x2F;$block.attrs(&amp;#x27;info&amp;#x27;)&quot;&gt;&lt;&#x2F;a&gt;
seed phrases are technically called “mnemonic phrases”,
but I’ll use the term “seed phrases” for the rest of the post.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;entropy&quot;&gt;Entropy&lt;&#x2F;h2&gt;
&lt;p&gt;Before we go into passwords,
I’ll introduce the concept of &lt;strong&gt;&lt;em&gt;Entropy&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Entropy&quot;&gt;Entropy&lt;&#x2F;a&gt;
is a measure of the &lt;strong&gt;amount of disorder in a system&lt;&#x2F;strong&gt;.
It has its origins in &lt;strong&gt;Thermodynamics&lt;&#x2F;strong&gt;,
where it’s used to measure the amount of energy in a system that is not available to do work.&lt;&#x2F;p&gt;
&lt;p&gt;The etymology of the word “Entropy” is after the Greek word for “transformation”.&lt;&#x2F;p&gt;
&lt;p&gt;It was given a proper statistical definition by &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ludwig_Boltzmann&quot;&gt;Ludwig Boltzmann&lt;&#x2F;a&gt; in 1870s.
while establishing the field of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Statistical_dynamics&quot;&gt;Statistical Dynamics&lt;&#x2F;a&gt;,
a field of physics that studies the behavior of large collections of particles.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;mnemonic&#x2F;boltzmann.jpg&quot; alt=&quot;Ludwig Boltzmann&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the context of Statistical Dynamics,
&lt;strong&gt;Entropy is a measure of the number of ways a system can be arranged&lt;&#x2F;strong&gt;.
The more ways a system can be arranged,
the higher its Entropy.
Specifically, &lt;strong&gt;Entropy is a logarithmic measure of the number of system states with significant probability of being occupied&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;$$S = -k \cdot \sum_i p_i \ln p_i$$&lt;&#x2F;p&gt;
&lt;p&gt;Where:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$S$: Entropy.&lt;&#x2F;li&gt;
&lt;li&gt;$k$: Boltzmann’s constant, a physical constant that relates temperature to energy.&lt;&#x2F;li&gt;
&lt;li&gt;$p_i$: probability of the system being in state $i$.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this formula, if all states are equally likely,
i.e $p_i = \frac{1}{N}$,
where $N$ is the number of states,
then the entropy is maximized.
You can see this since a probability $p$ is a real number between 0 and 1,
and as $N$ approaches infinity,
the sum of the logarithms approaches negative infinity.
Then, multiplying by $-k$ yields positive infinity.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-the-hell-physics-came-to-passwords&quot;&gt;How the hell Physics came to Passwords?&lt;&#x2F;h3&gt;
&lt;p&gt;There’s once a great men called &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Claude_Shannon&quot;&gt;Claude Shannon&lt;&#x2F;a&gt;,
who single-handedly founded the field of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Information_theory&quot;&gt;&lt;strong&gt;Information Theory&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
invented the concept of a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bit&quot;&gt;&lt;strong&gt;Bit&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
and was the first to think about Boolean algebra in the context of electrical circuits.
He laid the foundation for the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Digital_Revolution&quot;&gt;&lt;strong&gt;Digital Revolution&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you are happy using your smartphone, laptop, or any other digital device,
in you high speed fiber internet connection,
through a wireless router to send cats pictures to your friends,
then you should thank Claude Shannon.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;mnemonic&#x2F;shannon.jpg&quot; alt=&quot;Claude Shannon&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;He was trying to find a formula to quantify the amount of information in a message.
He wanted three things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The measure should be a &lt;strong&gt;function of the probability of the message&lt;&#x2F;strong&gt;.
Messages that are more likely should have less information.&lt;&#x2F;li&gt;
&lt;li&gt;The measure should be &lt;strong&gt;additive&lt;&#x2F;strong&gt;.
The information in a message should be the sum of the information in its parts.&lt;&#x2F;li&gt;
&lt;li&gt;The measure should be &lt;strong&gt;continuous&lt;&#x2F;strong&gt;.
Small changes in the message should result in small changes in the measure.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;He pretty much found that the formula for Entropy in statistical mechanics
was a good measure of information.
He called it &lt;em&gt;Entropy&lt;&#x2F;em&gt; to honor Boltzmann’s work.
To differentiate it from the Statistical Dynamics’ Entropy,
he changed the letter to $H$,
in honor of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;H-theorem&quot;&gt;Boltzmann’s $H$-theorem&lt;&#x2F;a&gt;.
So the formula for the Entropy of a message is:&lt;&#x2F;p&gt;
&lt;p&gt;$$H(X) = −\Sigma_{x \in X} P(x_i​) \log ​P(x_i​)$$&lt;&#x2F;p&gt;
&lt;p&gt;Where:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$X$: random discrete variable.&lt;&#x2F;li&gt;
&lt;li&gt;$H(X)$: Entropy of $X$&lt;&#x2F;li&gt;
&lt;li&gt;$P(x_i)$: probability of the random variable $X$ taking the value $x_i$.
Also known as the probability mass function (PMF) of the discrete random variable $X$.&lt;&#x2F;li&gt;
&lt;li&gt;$\log$: base 2 logarithm, to measure the Entropy in bits.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In information theory,
the &lt;strong&gt;Entropy of a random variable is the average level of “information”, “surprise”,
or “uncertainty” inherent to the variable’s possible outcomes&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s take the simple example of a fair coin.
The Entropy of the random variable $X$ that represents the outcome of a fair coin flip is:&lt;&#x2F;p&gt;
&lt;p&gt;$$H(X) = −\Sigma_{x \in X} P(x_i​) \log ​P(x_i​) = -\left(\frac{1}{2} \log \frac{1}{2} + \frac{1}{2} \log \frac{1}{2}\right) = 1 \text{ bit}$$&lt;&#x2F;p&gt;
&lt;p&gt;So the outcome of a fair coin flip has 1 bit of Entropy.
This means that the outcome of a fair coin flip has 1 bit of information,
or 1 bit of uncertainty.
Once the message is received,
that the coin flip was heads or tails,
the receiver has 1 bit of information about the outcome.&lt;&#x2F;p&gt;
&lt;p&gt;Alternatively, we only need 1 bit to encode the outcome of a fair coin flip.
Hence, there’s a connection between Entropy, search space, and information.&lt;&#x2F;p&gt;
&lt;p&gt;Another good example is the outcome of a fair 6-sided die.
The Entropy of the random variable $X$ that represents the outcome of a fair 6-sided die is:&lt;&#x2F;p&gt;
&lt;p&gt;$$H(X) = −\Sigma_{x \in X} P(x_i​) \log ​P(x_i​) = - \sum_{i=1}^6\left(\frac{1}{6} * \log \frac{1}{6} \right) \approx 2.58 \text{ bits}$$&lt;&#x2F;p&gt;
&lt;p&gt;This means that the outcome of a fair 6-sided die has 2.58 bits of Entropy.
we need $\operatorname{ceil}(2.58) = 3$ bits to encode the outcome of a fair 6-sided die.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;entropy-and-passwords&quot;&gt;Entropy and Passwords&lt;&#x2F;h3&gt;
&lt;p&gt;Ok now we come full circle.
Let’s talk, finally, about passwords.&lt;&#x2F;p&gt;
&lt;p&gt;In the context of passwords, &lt;strong&gt;Entropy&lt;&#x2F;strong&gt; is a measure of how unpredictable a password is.
The higher the Entropy, the harder it is to guess the password.
The Entropy of a password is measured in bits,
and it’s calculated using the formula:&lt;&#x2F;p&gt;
&lt;p&gt;$$H = L \cdot \log_2(N)$$&lt;&#x2F;p&gt;
&lt;p&gt;Where:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$H$: Entropy in bits&lt;&#x2F;li&gt;
&lt;li&gt;$N$: number of possible characters in the password&lt;&#x2F;li&gt;
&lt;li&gt;$L$: length of the password&lt;&#x2F;li&gt;
&lt;li&gt;$\log_2$:​ (N) calculates how many bits are needed to represent each character from the set.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For example,
if we have a password with 8 characters and each character can be any of the 26 lowercase letters,
the standard english alphabet,
the Entropy would be:&lt;&#x2F;p&gt;
&lt;p&gt;$$H = 8 \cdot \log_2(26) \approx 37.6 \text{ bits}$$&lt;&#x2F;p&gt;
&lt;p&gt;This means that an attacker would need to try $2^{37.6} \approx 2.01 \cdot 10^{11}$ combinations to guess the password.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;mnemonic&#x2F;$block.attrs(&amp;#x27;info&amp;#x27;)&quot;&gt;&lt;&#x2F;a&gt;
Technically, we need to divide the number of combinations by 2,
since we are assuming that the attacker is using a brute-force attack,
which means that the attacker is trying all possible combinations,
and the password could be at the beginning or at the end of the search space.
This is called the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Birthday_problem&quot;&gt;birthday paradox&lt;&#x2F;a&gt;,
and it assumes that the password is uniformly distributed in the search space.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If the password were to include uppercase letters, numbers, and symbols
(let’s assume 95 possible characters in total),
the Entropy for an 8-character password would be:&lt;&#x2F;p&gt;
&lt;p&gt;$$H = 8 \cdot \log_2(95) \approx 52.6 \text{ bits}$$&lt;&#x2F;p&gt;
&lt;p&gt;This means that an attacker would need to try $2^{52.6} \approx 6.8 \cdot 10^{15}$ combinations to guess the password.&lt;&#x2F;p&gt;
&lt;p&gt;This sounds a lot but it’s not that much.&lt;&#x2F;p&gt;
&lt;p&gt;For the calculations below, we’ll assume that the attacker now your dictionary set,
i.e. the set of characters you use to create your password,
and the password length.&lt;&#x2F;p&gt;
&lt;p&gt;If an attacker get a hold of an NVIDIA RTX 4090,
MSRP USD 1,599, which can do
&lt;a href=&quot;https:&#x2F;&#x2F;www.tomshardware.com&#x2F;news&#x2F;rtx-4090-password-cracking-comparison&quot;&gt;300 GH&#x2F;s (300,000,000,000 hashes&#x2F;second)&lt;&#x2F;a&gt;,
i.e. $3 \cdot 10^{11}$ hashes&#x2F;second,
it would take:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;8-length lowercase-only password:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;$$\frac{2.01 \cdot 10^{11}}{3 \cdot 10^{11}} \approx 0.67 \text{ seconds}$$&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;8-length password with uppercase letters, numbers, and symbols:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;$$\frac{6.8 \cdot 10^{15}}{3 \cdot 10^{11}} \approx 22114 \text{ seconds} \approx 6.14 \text{ hours}$$&lt;&#x2F;p&gt;
&lt;p&gt;So, the first password would be cracked in less than a second,
while the second would take a few hours.
This with just one 1.5k USD GPU.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bitcoin-seed-phrases&quot;&gt;Bitcoin Seed Phrases&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we understand Entropy and how it relates to passwords,
let’s talk about bitcoin seed phrases.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that our private key is a big-fucking number?
If not, check my &lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;mnemonic&#x2F;$link.page(&amp;#x27;blog&#x2F;2024-02-05-crypto-basics&amp;#x27;)&quot;&gt;post on cryptographics basics&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitcoin&#x2F;bips&#x2F;blob&#x2F;master&#x2F;bip-0039.mediawiki&quot;&gt;BIP-39&lt;&#x2F;a&gt;
specifies how to use easy-to-remember seed phrases to store and recover
private keys.
The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitcoin&#x2F;bips&#x2F;blob&#x2F;master&#x2F;bip-0039&#x2F;english.txt&quot;&gt;wordlist&lt;&#x2F;a&gt;
adheres to the following principles:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;smart selection of words&lt;&#x2F;strong&gt;:
the wordlist is created in such a way that it’s enough to type the first four
letters to unambiguously identify the word.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;similar words avoided&lt;&#x2F;strong&gt;:
word pairs like “build” and “built”, “woman” and “women”, or “quick” and “quickly”
not only make remembering the sentence difficult but are also more error
prone and more difficult to guess.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Here is a simple 7-word seed phrase: &lt;code&gt;brave sadness grocery churn wet mammal tube&lt;&#x2F;code&gt;.
Surprisingly enough, this badboy here gives you $77$ bits of Entropy,
while also being easy to remember.
This is due to the fact that the wordlist has 2048 words,
so each word gives you $\log_2(2048) = 11$ bits of Entropy.&lt;&#x2F;p&gt;
&lt;p&gt;There’s a minor caveat to cover here.
The last word in the seed phrase is a checksum,
which is used to verify that the phrase is valid.&lt;&#x2F;p&gt;
&lt;p&gt;So, if you have a 12-word seed phrase,
you have $11 \cdot 11 = 121$ bits of Entropy.
And for a 24-word seed phrase,
you have $23 \cdot 11 = 253$ bits of Entropy.&lt;&#x2F;p&gt;
&lt;p&gt;The National Institute of Standards and Technology (NIST) recommends a
&lt;a href=&quot;https:&#x2F;&#x2F;crypto.stackexchange.com&#x2F;a&#x2F;87059&quot;&gt;minimum of 112 bits of Entropy for all things cryptographic&lt;&#x2F;a&gt;.
And Bitcoin has a &lt;a href=&quot;https:&#x2F;&#x2F;bitcoin.stackexchange.com&#x2F;a&#x2F;118929&quot;&gt;minimum of 128 bits of Entropy&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Depending on your threat model,
&lt;a href=&quot;https:&#x2F;&#x2F;www.nytimes.com&#x2F;2013&#x2F;08&#x2F;18&#x2F;magazine&#x2F;laura-poitras-snowden.html&quot;&gt;“Assume that your adversary is capable of a trillion guesses per second”&lt;&#x2F;a&gt;,
it can take a few years to crack a 121-bit Entropy seed phrase:&lt;&#x2F;p&gt;
&lt;p&gt;$$\frac{2^{121}}{10^{12}} \approx 2.66 \cdot 10^{24} \text{ seconds} \approx 3.08 \cdot 10^{19} \text{ days} \approx 8.43 \cdot 10^{16} \text{ years}$$&lt;&#x2F;p&gt;
&lt;p&gt;That’s a lot of years.
Now for a 253-bit Entropy seed phrase:&lt;&#x2F;p&gt;
&lt;p&gt;$$\frac{2^{253}}{10^{12}} \approx 1.45 \cdot 10^{64} \text{ seconds} \approx 1.68 \cdot 10^{59} \text{ days} \approx 4.59 \cdot 10^{56} \text{ years}$$&lt;&#x2F;p&gt;
&lt;p&gt;That’s another huge number of years.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;seed-phrases-and-passwords&quot;&gt;Seed Phrases and Passwords&lt;&#x2F;h2&gt;
&lt;p&gt;You can also use a seed phrase as a password.
The bonus point is that you don’t need to use the last word as a checksum,
so you get 11 bits of Entropy free, compared to a Bitcoin seed phrase.&lt;&#x2F;p&gt;
&lt;p&gt;Remember the 7-words badboy seed phrase we generated earlier?
&lt;code&gt;brave sadness grocery churn wet mammal tube&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It has $66$ bits of Entropy.
This would take, assuming
&lt;a href=&quot;https:&#x2F;&#x2F;www.nytimes.com&#x2F;2013&#x2F;08&#x2F;18&#x2F;magazine&#x2F;laura-poitras-snowden.html&quot;&gt;“that your adversary is capable of a trillion guesses per second”&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;$$\frac{2^{77}}{10^{12}} \approx 1.51 \cdot 10^{11} \text{ seconds} \approx 1.75 \cdot 10^{6} \text{ days} \approx 4.79 \cdot 10^{3} \text{ years}$$&lt;&#x2F;p&gt;
&lt;p&gt;That’s why tons of people use seed phrases as passwords.
Even if you know the dictionary set and the length of the password,
i.e. the number of words in the seed phrase,
it would take a lot of years to crack it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Entropy is a measure of the amount of disorder in a system.
In the context of passwords, it’s a measure of how unpredictable a password is.
The higher the Entropy, the harder it is to guess the password.&lt;&#x2F;p&gt;
&lt;p&gt;Bitcoin seed phrases are a great way to store and recover private keys.
They are easy to remember and have a high amount of Entropy.
You can even use a seed phrase as a password.&lt;&#x2F;p&gt;
&lt;p&gt;Even it your attacker is capable of a trillion guesses per second,
like the &lt;a href=&quot;https:&#x2F;&#x2F;www.nytimes.com&#x2F;2013&#x2F;08&#x2F;18&#x2F;magazine&#x2F;laura-poitras-snowden.html&quot;&gt;NSA&lt;&#x2F;a&gt;,
it would take them a lot of years to crack even a 7-word seed phrase.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to generate a seed phrase,
you can use &lt;a href=&quot;https:&#x2F;&#x2F;keepassxc.org&#x2F;&quot;&gt;KeePassXC&lt;&#x2F;a&gt;,
which is a great open-source &lt;strong&gt;&lt;em&gt;offline&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; password manager that supports seed phrases.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;mnemonic&#x2F;$block.attrs(&amp;#x27;info&amp;#x27;)&quot;&gt;&lt;&#x2F;a&gt;
Technically, KeePassXC uses the &lt;a href=&quot;https:&#x2F;&#x2F;www.eff.org&#x2F;files&#x2F;2016&#x2F;07&#x2F;18&#x2F;eff_large_wordlist.txt&quot;&gt;EFF wordlist&lt;&#x2F;a&gt;,
which has 7,776 words, so each word gives you $\log_2(7776) \approx 12.9$ bits of Entropy.
They were created to be easy to use with 6-sided dice.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Basics of cryptographic signatures</title>
        <published>2024-02-05T18:53:28+00:00</published>
        <updated>2024-02-05T18:53:28+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/crypto-basics/" type="text/html"/>
        <id>https://storopoli.com/blog/crypto-basics/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;crypto-basics&#x2F;euclid.webp&quot; alt=&quot;Euclid’s one-way function&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is the companion post to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;storopoli&#x2F;cryptography-workshop&quot;&gt;cryptography workshop&lt;&#x2F;a&gt;
that I gave at a local BitDevs.
Let’s explore the basics of cryptography.
We’ll go through the following topics:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;One-way functions&lt;&#x2F;li&gt;
&lt;li&gt;Hash functions&lt;&#x2F;li&gt;
&lt;li&gt;Public-key cryptography&lt;&#x2F;li&gt;
&lt;li&gt;DSA&lt;&#x2F;li&gt;
&lt;li&gt;Schnorr&lt;&#x2F;li&gt;
&lt;li&gt;Why we don’t reuse nonces?&lt;&#x2F;li&gt;
&lt;li&gt;Why we can combine Schnorr Signatures and not DSA?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;one-way-functions&quot;&gt;One-way functions&lt;&#x2F;h2&gt;
&lt;p&gt;A one-way function is a &lt;strong&gt;function that is easy to compute on every input,
but hard to invert given the image of a random input&lt;&#x2F;strong&gt;.
For example, imagine an omelet.
It’s easy to make an omelet from eggs,
but it’s hard to make eggs from an omelet.
In a sense we can say that the function $\text{omelet}$ is a one-way function&lt;&#x2F;p&gt;
&lt;p&gt;$$\text{omelet}^{-1}(x) = \ldots$$&lt;&#x2F;p&gt;
&lt;p&gt;That is, we don’t know how to invert the function $\text{omelet}$ to get the original eggs back.
Or, even better, &lt;strong&gt;the benefit we get from reverting the omelet to eggs is not worth the effort,
either in time or money&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Not all functions are one-way functions.
The exponential function, $f(x) = e^x$, is not a one-way function.
It is easy to undo the exponential function by taking the natural logarithm,&lt;&#x2F;p&gt;
&lt;p&gt;$$f^{-1}(x) = \ln(x)$$&lt;&#x2F;p&gt;
&lt;p&gt;To showcase one-way functions, let’s take a look at the following example.
Let’s play around with some numbers.
Not any kind of numbers, but very special numbers called &lt;strong&gt;primes&lt;&#x2F;strong&gt;.
A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.&lt;&#x2F;p&gt;
&lt;p&gt;If I give you a big number $n$ and ask you to find its prime factors,
and point a gun at your head,
you’ll pretty much screwed.
There’s no known efficient algorithm to factorize a big number into its prime factors.
You’ll be forced to test all numbers from 2 to $\sqrt{n}$ to see if they divide $n$.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a number:&lt;&#x2F;p&gt;
&lt;p&gt;$$90809$$&lt;&#x2F;p&gt;
&lt;p&gt;What are its prime factors?
It’s $1279 \cdot 71$.
Easy to check, right?
Hard to find.
That’s because prime factorization, if you choose a fucking big number, is a one-way function.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hash-functions&quot;&gt;Hash Functions&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s spice things up.
There is a special class of one-way functions called &lt;strong&gt;hash functions&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;A hash function is any function that can be used to map data of arbitrary size to fixed-size values&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But we are most interested in &lt;strong&gt;&lt;em&gt;cryptographic&lt;&#x2F;em&gt; hash functions&lt;&#x2F;strong&gt;,
which are hash functions that have statistical properties desirable for cryptographic application:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;One-way function&lt;&#x2F;strong&gt;: easy to compute $y = f(x)$, hard as fuck to do the opposite, $x = f^{-1}(y)$.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Deterministic&lt;&#x2F;strong&gt;: given a function that maps elements from set $X$ to set $Y$, $f: X \to Y$,
for every $x \in X$ there’s &lt;em&gt;at least one&lt;&#x2F;em&gt; $y \in Y$.
This means that if I give you a certain input, it will always map to the same output.
It is deterministic.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Collision resistance&lt;&#x2F;strong&gt;: the possible values of $f: X \to Y$ follows a uniform distribution,
that is, given the size of the set $Y$,
it is hard to find two $x_1, x_2 \in X$ that have the same $y \in Y$ value.
This property is really important because if an attacker wants to brute-force the
hash function, there’s no option than searching uniformly across the whole possible
space of possible values that the hash function outputs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These properties make enable cryptographic hash functions to be used in a wide range of applications,
including but not limited to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Digital signatures&lt;&#x2F;strong&gt;: Hash functions are used to create a digest of the message to be signed.
The digital signature is then generated using the hash, rather than the message itself,
to ensure integrity and non-repudiation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Password hashing&lt;&#x2F;strong&gt;: Storing passwords as hash values instead of plain text.
Even if the hash values are exposed,
the original passwords remain secure due to the pre-image resistance property.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Blockchain and cryptocurrency&lt;&#x2F;strong&gt;: Hash functions are used to maintain the integrity of the blockchain.
Each block contains the hash of the previous block, creating a secure link.
Cryptographic hashes also underpin various aspects of cryptocurrency transactions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data integrity verification&lt;&#x2F;strong&gt;: Hash functions are used to ensure that files, messages,
or data blocks have not been altered.
By comparing hash values computed before and after transmission or storage,
any changes in the data can be detected.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We’ll cover just the &lt;strong&gt;digital signatures&lt;&#x2F;strong&gt; part in this post.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sha-2-and-its-variants&quot;&gt;SHA-2 and its variants&lt;&#x2F;h3&gt;
&lt;p&gt;The Secure Hash Algorithm 2 (SHA-2) is a set of cryptographic hash functions designed by the National Security Agency (NSA).
It was first published in 2001.&lt;&#x2F;p&gt;
&lt;p&gt;It is composed of six hash functions with digests that are 224, 256, 384, 512, 512&#x2F;224, and 512&#x2F;256 bits long:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SHA-224&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SHA-256&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SHA-384&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SHA-512&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SHA-512&#x2F;224&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SHA-512&#x2F;256&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Amongst these, let’s focus on SHA-256, which is the most widely used while also being notoriously adopted by bitcoin.&lt;&#x2F;p&gt;
&lt;p&gt;SHA-256 does not have any known vulnerabilities and is considered secure.
It comprises of 32-bit words and operates on 64-byte blocks.
The algorithm does 64 rounds of the following operations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AND&lt;&#x2F;code&gt;: bitwise boolean AND&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;XOR&lt;&#x2F;code&gt;: bitwise boolean XOR&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;OR&lt;&#x2F;code&gt;: bitwise boolean OR&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ROT&lt;&#x2F;code&gt;: right rotation bit shift&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ADD&lt;&#x2F;code&gt;: addition modulo $2^{32}$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can check &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;SHA-2#Pseudocode&quot;&gt;SHA-256 Pseudocode on Wikipedia&lt;&#x2F;a&gt;.
It really scrambles the input message in a way that is very hard to reverse.&lt;&#x2F;p&gt;
&lt;p&gt;These operations are non-linear and very difficult to keep track of.
In other words, you can’t reverse-engineer the hash to find the original message.
There’s no &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Automatic_differentiation&quot;&gt;“autodiff”&lt;&#x2F;a&gt; for hash functions.&lt;&#x2F;p&gt;
&lt;p&gt;Since it is a cryptographic hash function,
if we change just one bit of the input,
the output will be completely different.
Check this example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; echo &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;The quick brown fox jumps over the lazy dog&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;shasum&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;a&lt;&#x2F;span&gt; 256&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;c03905fcdab297513a620ec81ed46ca44ddb62d41cbbd83eb4a5a3592be26a69&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;  -&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; echo &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;The quick brown fox jumps over the lazy dog.&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;shasum&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;a&lt;&#x2F;span&gt; 256&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;b47cc0f104b62d4c7c30bcd68fd8e67613e287dc4ad8c310ef10cbadea9c4380&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;  -&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we are only adding a period at the end of the sentence,
and the hash is completely different.
This is due to the property of collision resistance that we mentioned earlier.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fields&quot;&gt;Fields&lt;&#x2F;h2&gt;
&lt;p&gt;Before we dive into public-key cryptography,
we need a brief interlude on fields.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Field_(mathematics)&quot;&gt;Fields&lt;&#x2F;a&gt; are sets with two binary operations,
called addition $+$ and multiplication $\times$&lt;&#x2F;strong&gt;.
We write&lt;&#x2F;p&gt;
&lt;p&gt;$$F = (F, +, \times)$$&lt;&#x2F;p&gt;
&lt;p&gt;to denote a field,
where $F$ is the set, $+$ is the addition operation,
and $\times$ is the multiplication operation.&lt;&#x2F;p&gt;
&lt;p&gt;Addition and multiplication behave similar to the addition and multiplication of real numbers.
For example, addition is &lt;strong&gt;commutative&lt;&#x2F;strong&gt; and &lt;strong&gt;associative&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;$$a + b = b + a,$$&lt;&#x2F;p&gt;
&lt;p&gt;and multiplication is &lt;strong&gt;distributive&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;$$a \times (b + c) = a \times b + a \times c.$$&lt;&#x2F;p&gt;
&lt;p&gt;Also, there are two special elements in the field,
called the &lt;strong&gt;additive identity&lt;&#x2F;strong&gt; $-a$ and the &lt;strong&gt;multiplicative identity&lt;&#x2F;strong&gt; $a^{-1}$,
such that&lt;&#x2F;p&gt;
&lt;p&gt;$$a + (-a) = I,$$&lt;&#x2F;p&gt;
&lt;p&gt;and&lt;&#x2F;p&gt;
&lt;p&gt;$$a \times a^{-1} = I,$$&lt;&#x2F;p&gt;
&lt;p&gt;where $I$ is the identity element.&lt;&#x2F;p&gt;
&lt;p&gt;Note that this allows us to define &lt;strong&gt;subtraction&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;$$a - b = a + (-b),$$&lt;&#x2F;p&gt;
&lt;p&gt;and &lt;strong&gt;division&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;$$a \div b = a \times b^{-1}.$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;finite-fields&quot;&gt;Finite Fields&lt;&#x2F;h3&gt;
&lt;p&gt;Now we are ready for finite fields.
A &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Finite_field&quot;&gt;&lt;em&gt;finite field&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;, also called a Galois field (in honor of Évariste Galois),
is a &lt;strong&gt;field with a finite number of elements.
As with any field, a finite field is a set on which the operations of multiplication,
addition, subtraction and division are defined and satisfy the rules above for fields&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Finite fields is a very rich topic in mathematics,
and there are many ways to construct them.
The easiest way to construct a finite field is to take the &lt;strong&gt;integers modulo a prime number $p$&lt;&#x2F;strong&gt;.
For example $\mathbb{Z}_5$ is a finite field with 5 elements:&lt;&#x2F;p&gt;
&lt;p&gt;$$\mathbb{Z}_5 = \lbrace 0, 1, 2, 3, 4 \rbrace.$$&lt;&#x2F;p&gt;
&lt;p&gt;In general, $\mathbb{Z}_n$ is a finite field with $n$ elements:&lt;&#x2F;p&gt;
&lt;p&gt;$$\mathbb{Z}_n = \lbrace 0, 1, 2, \ldots, n - 1 \rbrace.$$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The number of elements in a finite field is called the &lt;em&gt;order&lt;&#x2F;em&gt; of the field&lt;&#x2F;strong&gt;.
The order of a finite field is &lt;strong&gt;always a prime number $p$&lt;&#x2F;strong&gt;.
The $\mathbb{Z}_5$ example above is a finite field of order 5.
However, $\mathbb{Z}_4$ is not a finite field,
because 4 is not a prime number, but rather a composite number.&lt;&#x2F;p&gt;
&lt;p&gt;$$4 = 2 \times 2.$$&lt;&#x2F;p&gt;
&lt;p&gt;And we can write $\mathbb{Z}_4$ as&lt;&#x2F;p&gt;
&lt;p&gt;$$\mathbb{Z}_4 = 2 \times \mathbb{Z}_2.$$&lt;&#x2F;p&gt;
&lt;p&gt;This means that every element in $a \in \mathbb{Z}_4$ can be written as&lt;&#x2F;p&gt;
&lt;p&gt;$$a = 2 \times b,$$&lt;&#x2F;p&gt;
&lt;p&gt;where $b$ is an element in $\mathbb{Z}_2$.&lt;&#x2F;p&gt;
&lt;p&gt;Hence, not every element of $\mathbb{Z}_4$ is unique, and they are equivalent to the elements in $\mathbb{Z}_2$.&lt;&#x2F;p&gt;
&lt;p&gt;In general if $n$ is a composite number,
then $\mathbb{Z}_n$ is not a finite field.
However, if $n = r \times s$ where $r$ and $s$ are prime numbers,
and $r &amp;lt; s$,
then $\mathbb{Z}_n$ is a finite field of order $r$.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;operations-in-finite-fields&quot;&gt;Operations in Finite Fields&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Addition&lt;&#x2F;strong&gt; in finite fields is defined as the remainder of the sum of two elements modulo the order of the
field.&lt;&#x2F;p&gt;
&lt;p&gt;For example, in $\mathbb{Z}_3$,&lt;&#x2F;p&gt;
&lt;p&gt;$$1 + 2 = 3 \mod 3 = 0.$$&lt;&#x2F;p&gt;
&lt;p&gt;We can also define subtraction in finite fields as the remainder of the difference of two elements modulo the order of the field.&lt;&#x2F;p&gt;
&lt;p&gt;For example, in $\mathbb{Z}_3$,&lt;&#x2F;p&gt;
&lt;p&gt;$$1 - 2 = -1 \mod 3 = 2.$$&lt;&#x2F;p&gt;
&lt;p&gt;Multiplication in finite fields can be written as multiple additions.
For example, in $\mathbb{Z}_3$,&lt;&#x2F;p&gt;
&lt;p&gt;$$2 \times 2 = 2 + 2 = 4 \mod 3 = 1.$$&lt;&#x2F;p&gt;
&lt;p&gt;Exponentiation in finite fields can be written as multiple multiplications.
For example, in $\mathbb{Z}_3$,&lt;&#x2F;p&gt;
&lt;p&gt;$$2^2 = 2 \times 2 = 4 \mod 3 = 1.$$&lt;&#x2F;p&gt;
&lt;p&gt;As you can see addition, subtraction, and multiplication becomes linear operations.
This is very trivial for any finite field.&lt;&#x2F;p&gt;
&lt;p&gt;However, for division we are pretty much screwed.
It is really hard to find the multiplicative inverse of an element in a finite field.
For example, suppose that we have numbers $a,b$ in a very large finite field $\mathbb{Z}_p$,
such that&lt;&#x2F;p&gt;
&lt;p&gt;$$c = a \times b \mod p.$$&lt;&#x2F;p&gt;
&lt;p&gt;Then we can write division as&lt;&#x2F;p&gt;
&lt;p&gt;$$a = c \div b = c \times b^{-1} \mod p.$$&lt;&#x2F;p&gt;
&lt;p&gt;Now we need to find $b^{-1}$, which is the multiplicative inverse of $b$.
This is called the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Discrete_logarithm&quot;&gt;&lt;strong&gt;&lt;em&gt;discrete logarithm problem&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
Because we need to find $b^{-1}$ such that&lt;&#x2F;p&gt;
&lt;p&gt;$$b^{-1} = \log_b c \mod p.$$&lt;&#x2F;p&gt;
&lt;p&gt;Since this number is a discrete number and not a real number,
that’s why it’s called the discrete logarithm problem.&lt;&#x2F;p&gt;
&lt;p&gt;Good luck my friend, no efficient method is known for computing them in general.
You can try brute force, but that’s not efficient.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;why-the-discrete-logarithm-problem-is-hard-as-fuck&quot;&gt;Why the Discrete Logarithm Problem is Hard as Fuck&lt;&#x2F;h4&gt;
&lt;p&gt;To get a feeling why the discrete logarithm problem is difficult,
let’s add one more concept to our bag of knowledge.
Every finite field has &lt;em&gt;&lt;strong&gt;generators&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;,
also known as &lt;em&gt;&lt;strong&gt;primitive roots&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;,
which is also a member of the group,
such that applying multiplication to this one single element
makes possible to generate the whole finite field.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s illustrate this with an example.
Below we have a table of all the results of the following operation&lt;&#x2F;p&gt;
&lt;p&gt;$$b^x \mod 7$$&lt;&#x2F;p&gt;
&lt;p&gt;for every possible value of $x$.
As you’ve guessed right this is the $\mathbb{Z}_7$ finite field.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;$b$&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;$b^1 \mod 7$&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;$b^2 \mod 7$&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;$b^3 \mod 7$&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;$b^4 \mod 7$&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;$b^5 \mod 7$&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;$b^6 \mod 7$&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;$2$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$2$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$4$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$2$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$4$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;$3$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$3$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$2$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$6$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$4$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$5$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;$4$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$4$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$2$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$4$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$2$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;$5$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$5$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$4$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$6$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$2$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$3$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;$6$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$6$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$6$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;$1$&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;You see that something interesting is happening here.
For specific values of $b$, such as $b = 3$, and $b = 5$, we are able to &lt;strong&gt;generate the whole finite field&lt;&#x2F;strong&gt;.
Hence, say that $3$ and $5$ are &lt;em&gt;&lt;strong&gt;generators&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; or &lt;em&gt;&lt;strong&gt;primitive roots&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; of $\mathbb{Z}_7$.&lt;&#x2F;p&gt;
&lt;p&gt;Now suppose I ask you to find $x$ in the following equation&lt;&#x2F;p&gt;
&lt;p&gt;$$3^x \mod p = 11$$&lt;&#x2F;p&gt;
&lt;p&gt;where $p$ is a very large prime number.
Then you don’t have any other option than brute forcing it.
&lt;strong&gt;You’ll need to try each exponent $x \in \mathbb{Z}_p$ until you find the one that satisfies the equation&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Notice that this operation is very asymmetric.
It is very easy to compute $3^x \mod p$ for any $x$,
but it is very hard to find $x$ given $3^x \mod p$.&lt;&#x2F;p&gt;
&lt;p&gt;Now we are ready to dive into public-key cryptography.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;numerical-example-of-the-discrete-logarithm-problem&quot;&gt;Numerical Example of the Discrete Logarithm Problem&lt;&#x2F;h4&gt;
&lt;p&gt;Let’s illustrate the discrete logarithm problem with a numerical example.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Choose a prime number $p$&lt;&#x2F;strong&gt;. Let’s pick $p = 17$.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Choose a generator $g$ of the group&lt;&#x2F;strong&gt;.
For $p = 17$, we can choose $g = 3$ because $3$ is a primitive root of $\mathbb{Z}_{17}$.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Choose an element $x$&lt;&#x2F;strong&gt;.
Let’s pick $x = 15$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The discrete logarithm problem is to find $x$ given $g^x \mod p$.
So let’s plug in the numbers; find $x$ in&lt;&#x2F;p&gt;
&lt;p&gt;$$3^x = 15 \mod 17 $$&lt;&#x2F;p&gt;
&lt;p&gt;Try to find it.
Good luck.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;crypto-basics&#x2F;$block.attrs(&amp;#x27;info&amp;#x27;)&quot;&gt;&lt;&#x2F;a&gt;
The answer is $x = 6$. This means that $3^6 = 15 \mod 17$.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;public-key-cryptography&quot;&gt;Public-key cryptography&lt;&#x2F;h2&gt;
&lt;p&gt;Public-key cryptography, or asymmetric cryptography, is a cryptographic system that uses pairs of keys:
private and public.
The public key you can share with anyone,
but the private key you must keep secret.
The keys are related mathematically,
but it is computationally infeasible to derive the private key from the public key.
In other words, the public key is a one-way function of the private key.&lt;&#x2F;p&gt;
&lt;p&gt;Before we dive into the details of the public-key cryptography, and signing and verifying messages,
let me introduce some notation:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$p$: big fucking huge prime number (4096 bits or more)&lt;&#x2F;li&gt;
&lt;li&gt;$\mathbb{Z}_p$: the finite field of order $p$&lt;&#x2F;li&gt;
&lt;li&gt;$g$: a generator of $\mathbb{Z}_p$&lt;&#x2F;li&gt;
&lt;li&gt;$S_k$: secret key, a random integer in the finite field $\mathbb{Z}_p$&lt;&#x2F;li&gt;
&lt;li&gt;$P_k$: public key derived by $P_k = g^{S_k}$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you know $S_k$ and $g$ (which is almost always part of the spec),
then it’s easy to derive the $P_k$.
However, if you only know $g$ and $P_k$, good luck finding $S_k$.
It’s the discrete log problem again.
And as long $p$ is HUGE you are pretty confident that no one will find your secret key
from your public key.&lt;&#x2F;p&gt;
&lt;p&gt;Now what we can do with these keys and big prime numbers?
We’ll we can sign a message with our secret key and everyone can verify the authenticity of
the message using our public key.
The message in our case it is commonly a hash function of the “original message”.
Due to the collision resistance property, we can definitely assert that:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;the message has not been altered&lt;&#x2F;li&gt;
&lt;li&gt;the message was signed by the owner of the private key&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Fun fact, I once gave a recommendation letter to a very bright student,
that was only a plain text file signed with my private key.
I could rest assured that the letter was not altered,
and the student and other people could verify that I was the author of the letter.&lt;&#x2F;p&gt;
&lt;p&gt;Next, we’ll dive into the details of the Digital Signature Algorithm (DSA)
and the Schnorr signature algorithm.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dsa&quot;&gt;DSA&lt;&#x2F;h2&gt;
&lt;p&gt;DSA stands for &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Digital_Signature_Algorithm&quot;&gt;Digital Signature Algorithm&lt;&#x2F;a&gt;.
It was first proposed by the National Institute of Standards and Technology (NIST) in 1991.
Note that &lt;a href=&quot;https:&#x2F;&#x2F;lwn.net&#x2F;Articles&#x2F;958048&#x2F;&quot;&gt;OpenSSH announced that DSA is scheduled for removal in 2025&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s how you can sign a message using DSA:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Choose two prime numbers $p, q$ such that $p - 1 \mod q = 0$ (e.g., 1279 and 71).&lt;&#x2F;li&gt;
&lt;li&gt;Choose your private key $S_k$ as a random integer $\in [1, q-1]$.&lt;&#x2F;li&gt;
&lt;li&gt;Choose a generator $g$.&lt;&#x2F;li&gt;
&lt;li&gt;Compute your public key $P_k$: $g^{S_k} \mod p$.&lt;&#x2F;li&gt;
&lt;li&gt;Choose your nonce $k$: as a random integer $\in [1, q-1]$.&lt;&#x2F;li&gt;
&lt;li&gt;Compute your “public nonce” $K$: $(g^k \mod p) \mod q$ (also known as $r$).&lt;&#x2F;li&gt;
&lt;li&gt;Get your message ($m$) through a cryptographic hash function $H$: $H(m)$.&lt;&#x2F;li&gt;
&lt;li&gt;Compute your signature $s$: $(k^{-1} (H(m) + S_k K)) \mod q$.&lt;&#x2F;li&gt;
&lt;li&gt;Send to your buddy $(p, q, g)$, $P_k$, and $(K, s)$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;And here’s how you can verify the signature:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Compute $w = s^{-1} \mod q$.&lt;&#x2F;li&gt;
&lt;li&gt;Compute $u_1 = H{m} \cdot w \mod q$.&lt;&#x2F;li&gt;
&lt;li&gt;Compute $u_2 = K \cdot w \mod q$.&lt;&#x2F;li&gt;
&lt;li&gt;Compute $K^* = {g^{u_1} P^{u_2}_k \mod p} \mod q$.&lt;&#x2F;li&gt;
&lt;li&gt;Assert $K = K^*$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;How this works?
Let’s go through a proof of correctness.
I added some comments to every operation in parentheses to make it easier to follow.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$s = k^{-1} \cdot {H + S_k K} \mod q$ ($\mod p$ and $H(m)$ implicit).&lt;&#x2F;li&gt;
&lt;li&gt;$k = s^{-1} \cdot {H + S_k K} \mod q$ (move $s$ to $k$).&lt;&#x2F;li&gt;
&lt;li&gt;$k = H \cdot s^{-1} + S_k K \cdot s^{-1} \mod q$ (distribute $s^{-1}$).&lt;&#x2F;li&gt;
&lt;li&gt;$k = H \cdot w + S_k K \cdot w \mod q$ ($w = s^{-1}$).&lt;&#x2F;li&gt;
&lt;li&gt;$g^k = g^{H \cdot w + S_k K \cdot w \mod q}$ (put $g$ in both sides).&lt;&#x2F;li&gt;
&lt;li&gt;$g^k = g^{H \cdot w \mod q} \cdot g^{S_k K \cdot w \mod q}$ (product of the exponents).&lt;&#x2F;li&gt;
&lt;li&gt;$g^k = g^{H \cdot w \mod q} \cdot P^{K \cdot w \mod q}_k$ ($P_k = g^{S_k}$).&lt;&#x2F;li&gt;
&lt;li&gt;$g^k = g^{u_1} \cdot P^{u_2}_k$ (replace $u_1$ and $u_2$).&lt;&#x2F;li&gt;
&lt;li&gt;$K = K^*$ (replace $K$ and $K^*$).&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;There you go.
This attest that the signature is correct and the message was signed by the owner of the private key.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;schnorr&quot;&gt;Schnorr&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Schnorr_signature&quot;&gt;Schnorr signature algorithm&lt;&#x2F;a&gt;
is a very similar algorithm to DSA.
It was proposed by Claus-Peter Schnorr in 1989.
It is considered to be more secure than DSA and is also more efficient.
The patent for Schnorr signatures expired in 2008,
just in time for Satoshi to include it in Bitcoin.
However, it was probably not included due to the fact that there wasn’t
good battle-tested software implementations of it at the time.
However, it was added to Bitcoin in the Taproot upgrade.&lt;&#x2F;p&gt;
&lt;p&gt;Schnorr is a marvelous algorithm.
It is so much simpler than DSA.
Here’s how you sign a message using Schnorr:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Choose a prime number $p$.&lt;&#x2F;li&gt;
&lt;li&gt;Choose your private key $S_k$ as a random integer $\in [1, p-1]$.&lt;&#x2F;li&gt;
&lt;li&gt;Choose a generator $g$.&lt;&#x2F;li&gt;
&lt;li&gt;Compute your public key $P_k$: $g^{S_k}$.&lt;&#x2F;li&gt;
&lt;li&gt;Choose your nonce $k$: as a random integer $\in [1, p-1]$.&lt;&#x2F;li&gt;
&lt;li&gt;Compute your “public nonce” $K$: $g^k \mod p$ (also known as $r$).&lt;&#x2F;li&gt;
&lt;li&gt;Get your message ($m$) through a cryptographic hash function $H$ concatenating with $K$: $e = H(K || m)$.&lt;&#x2F;li&gt;
&lt;li&gt;Compute your signature $s$: $k - S_k e$.&lt;&#x2F;li&gt;
&lt;li&gt;Send to your buddy $(p, g)$, $P_k$, and $(K, s)$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;And here’s how you can verify the signature:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Compute $e = H(K || m)$.&lt;&#x2F;li&gt;
&lt;li&gt;Compute $K^* = g^s P_k^e$.&lt;&#x2F;li&gt;
&lt;li&gt;Compute $e^* = H(K^* || m)$.&lt;&#x2F;li&gt;
&lt;li&gt;Assert $e = e^*$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;How this works?
Let’s go through a proof of correctness.
As before, I added some comments to every operation in parentheses to make it easier to follow.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$K^* = g^s P_k^e$ ($\mod p$ implicit).&lt;&#x2F;li&gt;
&lt;li&gt;$K^* = g^{k - S_k e} g^{S_k e}$ ($s = k - S_k e$ and $P_k = g^{S_k}$).&lt;&#x2F;li&gt;
&lt;li&gt;$K^* = g^k$ (cancel $S_k e$ in the exponent of $g$).&lt;&#x2F;li&gt;
&lt;li&gt;$K^* = K$ ($K = g^k$).&lt;&#x2F;li&gt;
&lt;li&gt;Hence $H(K^* || m) = H(K || m)$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;There you go.
This attest that the signature is correct and the message was signed by the owner of the private key.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-we-don-t-reuse-nonces&quot;&gt;Why we don’t reuse nonces?&lt;&#x2F;h2&gt;
&lt;p&gt;Never, ever, reuse a nonce.
Why?
First, because nonce is short for “number used once”.
It is supposed to be used only once.
Because if you reuse a nonce, then you are pretty much screwed.
An attacker can derive your private key from two signatures with the same nonce.
This is called the “nonce reuse attack”.&lt;&#x2F;p&gt;
&lt;p&gt;Fun fact: this is what happened to the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;PlayStation_3_homebrew#Private_key_compromised&quot;&gt;PlayStation 3&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see how we can derive the private key from two signatures with the same nonce.
Here we are in a context that we have two signatures $s$ and $s^\prime$,
both using the same nonce $k = k^\prime$.&lt;&#x2F;p&gt;
&lt;p&gt;First, let’s do the &lt;del&gt;ugly&lt;&#x2F;del&gt; DSA math:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
s^\prime - s &amp;amp;= (k^{\prime {-1}} (H(m_1) + S_k K’)) - (k^{-1} (H(m_2) + S_k K)) \\
s^\prime - s &amp;amp;= k^{-1} (H(m_1) - H(m_2)) \\
k &amp;amp;= (H(m_1) - H(m_2)) (s^\prime - s)^{-1}
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Now remember you know $s$, $s^\prime$, $H(m_1)$, $H(m_2)$ $K$, and $K^\prime$.
Let’s do the final step and solve for $S_k$:&lt;&#x2F;p&gt;
&lt;p&gt;$$S_k = K^{-1}  (k s - H(m_1))$$&lt;&#x2F;p&gt;
&lt;p&gt;Now let’s do the Schnorr math.
But in Schnorr, everything is simpler.
Even nonce reuse attacks.&lt;&#x2F;p&gt;
&lt;p&gt;$$s^\prime - s = (k^\prime - k) - S_k (e^\prime - e)$$&lt;&#x2F;p&gt;
&lt;p&gt;If $k^\prime = k$ (nonce reuse) then you can easily isolate $S_k$ with simple algebra.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: you know $s^\prime, s, e, e^\prime$ and $k^\prime - k = 0$.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-we-can-combine-schnorr-signatures-and-not-dsa&quot;&gt;Why we can combine Schnorr Signatures and not DSA?&lt;&#x2F;h2&gt;
&lt;p&gt;In Bitcoin, we can combine Schnorr signatures and not DSA.
Why?
Because Schnorr signatures are linear.
This means that you can add two Schnorr signatures and get a valid signature for the sum of the messages.
This is not possible with DSA.
This is called the “linearity property” of Schnorr signatures.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that in $Z_p$ addition, multiplication, and exponentiation,
i.e anything with $+, \cdot, -$, are linear operations
However, division (modular inverse),
.i.e anything that is $^{-1}$, is not linear.
That is:&lt;&#x2F;p&gt;
&lt;p&gt;$$x^{-1} + y^{-1} \ne (x + y)^{-1}.$$&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a trivial python code that shows that modular inverse is not linear:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;p&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;71&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-python&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;13&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-python&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;y&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;17&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-python&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;pow&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;p&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;pow&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;y&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;p&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;pow&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;y&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;p&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;False&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s revisit the signature step of DSA and Schnorr:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DSA: $s = k^{-1} (H(m) + S_k K)$&lt;&#x2F;li&gt;
&lt;li&gt;Schnorr: $s = k - S_k H(K || m)$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So if you have two Schnorr signatures $s_1$ and $s_2$ for two messages $m_1$ and $m_2$,
then you can easily compute a valid signature for the sum of the messages $m_1 + m_2$:&lt;&#x2F;p&gt;
&lt;p&gt;$$s = s_1 + s_2$$&lt;&#x2F;p&gt;
&lt;p&gt;Also note that we can combine Schnorr public keys:&lt;&#x2F;p&gt;
&lt;p&gt;$$P^\prime_k + P_k = g^{S^\prime_k} + g^{S_k} = g^{S_k^\prime + S_k}$$&lt;&#x2F;p&gt;
&lt;p&gt;And the signature $s$ for the sum of the messages $m_1 + m_2$
can be verified with the public key $P^\prime_k + P_k$.&lt;&#x2F;p&gt;
&lt;p&gt;This is not possible with DSA.&lt;&#x2F;p&gt;
&lt;p&gt;Because the signature step in DSA is not linear,
it has a $k^{-1}$ in it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;technical-interlude-elliptic-curves&quot;&gt;Technical Interlude: Elliptic Curves&lt;&#x2F;h2&gt;
&lt;p&gt;Technically speaking, Bitcoin uses the Elliptic Curve Digital Signature Algorithm (ECDSA),
and the Schnorr signature algorithm is based on the same elliptic curve (EC) as ECDSA.&lt;&#x2F;p&gt;
&lt;p&gt;And trivially speaking EC public-key cryptography in the end is just a finite field
on $\mathbb{Z}_p$.
It has everything that we’ve seen so far:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Addition&lt;&#x2F;li&gt;
&lt;li&gt;Subtraction&lt;&#x2F;li&gt;
&lt;li&gt;Multiplication&lt;&#x2F;li&gt;
&lt;li&gt;Division&lt;&#x2F;li&gt;
&lt;li&gt;Exponentiation&lt;&#x2F;li&gt;
&lt;li&gt;Generators&lt;&#x2F;li&gt;
&lt;li&gt;Discrete Logarithm Problem&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I hope you enjoyed this companion post to the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;storopoli&#x2F;cryptography-workshop&quot;&gt;cryptography workshop&lt;&#x2F;a&gt;.
Remember don’t reuse nonces.&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Fullstack and progressive web apps in Rust: a tale of a sudoku spyware</title>
        <published>2024-01-30T08:57:33+00:00</published>
        <updated>2024-01-30T08:57:33+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/sudoku/" type="text/html"/>
        <id>https://storopoli.com/blog/sudoku/</id>
        
            <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;sudoku&#x2F;rust_webdev_meme.jpg&quot; alt=&quot;rust webdev meme&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It all started when I had to accompany my mom to the hospital.
It was just a routine checkup, but I had to wait for a few hours.
I brought my laptop with me, since they have good WiFi and I could work on my projects.
Then I realized that my mom was playing a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Sudoku&quot;&gt;Sudoku&lt;&#x2F;a&gt;
game on her phone.
I couln’t help but notice that the game was full of ads and it was asking for a lot of permissions,
like location and sensor data.
So I decided to make a &lt;strong&gt;Sudoku game for her, without ads or using any permission&lt;&#x2F;strong&gt;.
It wouldn’t even need to ask for the blessing of Google or &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;XHVxm12NbrY&quot;&gt;Tim Apple&lt;&#x2F;a&gt;
since it was a Progressive Web App (PWA) and it would work offline.&lt;&#x2F;p&gt;
&lt;p&gt;You can play the game at &lt;a href=&quot;https:&#x2F;&#x2F;sudoku.storopoli.com&quot;&gt;sudoku.storopoli.com&lt;&#x2F;a&gt;
or check the source code at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;storopoli&#x2F;sudoku&quot;&gt;&lt;code&gt;storopoli&#x2F;sudoku&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a screenshot of the game:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;sudoku&#x2F;sudoku_screenshot.png&quot; alt=&quot;Sudoku screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tools-of-choice&quot;&gt;Tools of Choice&lt;&#x2F;h2&gt;
&lt;p&gt;So what would I use to build this game?
Only one thing: &lt;a href=&quot;https:&#x2F;&#x2F;dioxuslabs.com&#x2F;&quot;&gt;&lt;strong&gt;Dioxus&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
Dioxus is a fullstack framework for Rust,
that allows you to build web applications with Rust.
You can benefit from the safety and performance of Rust,
powerful type system and borrow checker,
along with the low memory footprint.&lt;&#x2F;p&gt;
&lt;p&gt;That’s it. &lt;strong&gt;Just Rust and HTML with some raw CSS&lt;&#x2F;strong&gt;.
No “YavaScript”. No Node.js. No npm. No webpack. No Tailwind CSS.
Just &lt;code&gt;cargo run --release&lt;&#x2F;code&gt; and you’re done.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;package-management&quot;&gt;Package Management&lt;&#x2F;h2&gt;
&lt;p&gt;Using Rust for fullstack development is an amazing thing.
First, &lt;strong&gt;package management is a breeze with Cargo&lt;&#x2F;strong&gt;.
Second, you don’t have to worry about &lt;strong&gt;“npm vulnerabilities”&lt;&#x2F;strong&gt;.
Have you ever gone into your project and ran &lt;code&gt;npm audit&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;sudoku&#x2F;npm_vulnerabilities.png&quot; alt=&quot;NPM vulnerabilities&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is solvable with Rust.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;runtime-errors&quot;&gt;Runtime Errors&lt;&#x2F;h2&gt;
&lt;p&gt;An additional advantage is that you &lt;strong&gt;don’t have to worry about common
runtime errors&lt;&#x2F;strong&gt; like &lt;code&gt;undefined is not a function&lt;&#x2F;code&gt; or &lt;code&gt;null is not an object&lt;&#x2F;code&gt;.
These are all picked-up by &lt;strong&gt;Rust on compile time&lt;&#x2F;strong&gt;.
So you can focus on the logic of your application knowing that it will work as &lt;strong&gt;expected&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A common workflow in Rust fullstack applications is to use Rust’s powerful type system
to parse any user input into a type that you can trust, and then propagate that type
throughout your application. This way you can be sure that you’re not going to have
any runtime errors due to invalid input. This is not the case with “YavaScript”.
You need to validate the input at every step of the way, and you can’t be sure
that the input is valid at any point in time.&lt;&#x2F;p&gt;
&lt;p&gt;You can sleep soundly at night knowing that your application won’t crash
and as long as the &lt;strong&gt;host machine has electricity and internet access,
your app is working as expected&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;&#x2F;h2&gt;
&lt;p&gt;Rust is known for its &lt;strong&gt;performance&lt;&#x2F;strong&gt;.
This is due to the fact that Rust gives you control over deciding on which type you’ll use for a variable.
This is not the case with “YavaScript”, where you can’t decide if a variable is a number or a string.
Also you can use references and lifetimes to avoid copying data around.&lt;&#x2F;p&gt;
&lt;p&gt;So, if you make sane decisions, like &lt;code&gt;u8&lt;&#x2F;code&gt; (unsigned 8-bit integer) instead of &lt;code&gt;i32&lt;&#x2F;code&gt; (signed 32-bit integer)
for a number that will never be greater than 255, you can have a very low memory footprint.
Also you can use &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; (string slice) instead of &lt;code&gt;String&lt;&#x2F;code&gt; to avoid copying strings around.&lt;&#x2F;p&gt;
&lt;p&gt;You just don’t have this level of control with “YavaScript”.
You get either strings or numbers and you can’t decide on the size of the number.
And all of your strings will be heap-allocated and copied around.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;progressive-web-apps&quot;&gt;Progressive Web Apps&lt;&#x2F;h2&gt;
&lt;p&gt;Progressive Web Apps (PWAs) are web applications that are regular web pages or websites,
but can appear to the user like traditional applications or native mobile applications.
Since they use the device’s browser, they don’t need to be installed through an app store.
This is a great advantage, since you don’t have to ask for permissions to Google or
&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;XHVxm12NbrY&quot;&gt;Tim Apple&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;In Dioxus making a PWA was really easy&lt;&#x2F;strong&gt;.
There is a PWA template in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DioxusLabs&#x2F;dioxus&#x2F;tree&#x2F;main&#x2F;examples&#x2F;pwa&quot;&gt;&lt;code&gt;examples&#x2F;&lt;&#x2F;code&gt; directory in their repository&lt;&#x2F;a&gt;.
You just have to follow the instructions in the README and you’re done.
In my case, I only had to change the metadata in the &lt;code&gt;manifest.json&lt;&#x2F;code&gt; file
and add what I wanted to cache in the service worker &lt;code&gt;.js&lt;&#x2F;code&gt; file.
These were only the favicon icon and the CSS style file.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sudoku-algorithm&quot;&gt;Sudoku Algorithm&lt;&#x2F;h2&gt;
&lt;p&gt;I didn’t have to worry about the algorithm to generate the Sudoku board.
This was already implemented in the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;sudoku&quot;&gt;&lt;code&gt;sudoku&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate.
But I had to implement some &lt;strong&gt;Sudoku logic to make the user interface work&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Some things that I had to implement were:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;find the related cells&lt;&#x2F;strong&gt;.
Given a cell, find the cells in the same row, column and sub-grid.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;find the conflicting cells&lt;&#x2F;strong&gt;.
Given a cell, find the cells in the same row, column and sub-grid that have the same value.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;find-the-related-cells&quot;&gt;Find the Related Cells&lt;&#x2F;h3&gt;
&lt;p&gt;This was a simple task, yet it was very fun to implement.&lt;&#x2F;p&gt;
&lt;p&gt;To get the related cells, you need to find the row and column of the cell.
Then you can find the start row and start column of the 3x3 sub-grid.
After that, you can add the cells in the same row, column and sub-grid to a vector.
Finally, you can remove the duplicates and the original cell from the vector.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s the code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;get_related_cells&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;index&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; related_cells &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;new&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; row &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; index &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;9&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; col &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; index &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;%&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;9&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; start_row &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; row &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;3&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; start_col &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; col &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;3&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Add cells in the same row
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;for&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-rust&quot;&gt;..&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;9&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        related_cells&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;push&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;row &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;9&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;+&lt;&#x2F;span&gt; i&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Add cells in the same column
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;for&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-rust&quot;&gt;..&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;9&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        related_cells&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;push&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;i &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;9&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;+&lt;&#x2F;span&gt; col&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Add cells in the same 3x3 sub-grid
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;for&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;in&lt;&#x2F;span&gt; start_row&lt;span class=&quot;z-keyword z-operator z-range z-rust&quot;&gt;..&lt;&#x2F;span&gt;start_row &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;3&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;for&lt;&#x2F;span&gt; j &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;in&lt;&#x2F;span&gt; start_col&lt;span class=&quot;z-keyword z-operator z-range z-rust&quot;&gt;..&lt;&#x2F;span&gt;start_col &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;3&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;            related_cells&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;push&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;i &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;9&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;+&lt;&#x2F;span&gt; j&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Remove duplicates and the original cell
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    related_cells&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;sort_unstable&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    related_cells&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;dedup&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    related_cells&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;x&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;x &lt;span class=&quot;z-keyword z-operator z-comparison z-rust&quot;&gt;!=&lt;&#x2F;span&gt; index&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    related_cells
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;find-the-conflicting-cells&quot;&gt;Find the Conflicting Cells&lt;&#x2F;h3&gt;
&lt;p&gt;To find the conflicting cells, you need to get the value of the target cell.
Then you can get the related cells and filter the ones that have the same value as the target cell.
Easy peasy.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s the code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;get_conflicting_cells&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;board&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;SudokuState, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;index&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Get the value of the target cell
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; value &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; board&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;index &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Ignore if the target cell is empty (value 0)
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;if&lt;&#x2F;span&gt; value &lt;span class=&quot;z-keyword z-operator z-comparison z-rust&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;new&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Get related cells
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; related_cells &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-function z-rust&quot;&gt;get_related_cells&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;index&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Find cells that have the same value as the target cell
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    related_cells
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;index&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;board&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;index &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-comparison z-rust&quot;&gt;==&lt;&#x2F;span&gt; value&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that I am using &lt;code&gt;0&lt;&#x2F;code&gt; to represent empty cells.&lt;&#x2F;p&gt;
&lt;p&gt;But if the user ignores the conflicting cells and adds a number to the board,
there will be more conflicting cells than the ones related to the target cell.
This can be done with another helper function.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s the code, and I took the liberty of adding the docstrings (the &lt;code&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;code&gt; comments that renders as documentation):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; Get all the conflictings cells for all filled cells in a Sudoku board
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; # Parameters
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; - `current_sudoku: SudokuState` - A reference to the current [`SudokuState`]
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; # Returns
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; Returns a `Vec&amp;lt;u8&amp;gt;` representing all cell&amp;#39;s indices that are conflicting
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; with the current Sudoku board.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;get_all_conflicting_cells&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;current_sudoku&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;SudokuState&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; filled&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; current_sudoku
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;filter_map&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;idx&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &amp;amp;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;value&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;            &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;if&lt;&#x2F;span&gt; value &lt;span class=&quot;z-keyword z-operator z-comparison z-rust&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;                &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;try_from&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;idx&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;            &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;                &lt;span class=&quot;z-support z-type z-rust&quot;&gt;None&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Filter out the item if the value is 0
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;            &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Get all conflicting cells for the filled cells
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; conflicting&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; filled
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;flat_map&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;v&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;get_conflicting_cells&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;current_sudoku&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; v&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;collect&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Retain unique
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    conflicting&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;sort_unstable&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    conflicting&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;dedup&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    conflicting
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The trick here is that we are using a &lt;code&gt;flat_map&lt;&#x2F;code&gt; since a naive &lt;code&gt;map&lt;&#x2F;code&gt; would return a nested &lt;code&gt;Vec&amp;lt;Vec&amp;lt;Vec&amp;lt;...&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;code&gt;
of &lt;code&gt;u8&lt;&#x2F;code&gt;s, and we don’t want that.
We want a flat &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;&#x2F;code&gt; of all conflicting cells.
Recursion is always tricky, go ask Alan Turing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sudoku-app-state&quot;&gt;Sudoku App State&lt;&#x2F;h2&gt;
&lt;p&gt;As you can see, I used a &lt;code&gt;SudokuState&lt;&#x2F;code&gt; type to represent the state of the game.
This is just a type alias for a &lt;code&gt;[u8; 81]&lt;&#x2F;code&gt; array.
This is a very simple and efficient way to represent the state of the game.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s the code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-type z-rust&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-rust&quot;&gt;SudokuState&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;81&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Sudoku app has also an undo button.
This is implemented by using a &lt;code&gt;Vec&amp;lt;SudokuState&amp;gt;&lt;&#x2F;code&gt; to store the history of the game.
Every time that the user adds a number to the board, the new update state is pushed to the history vector.
When the user clicks the undo button, the last state is popped from the history vector and the board is updated.&lt;&#x2F;p&gt;
&lt;p&gt;There’s one additional problem with the undo button.
It needs to switch the clicked cell to the one that was clicked before.
Yet another simple, but fun, task.
First you need to find the index at which two given &lt;code&gt;SudokuState&lt;&#x2F;code&gt;, the current and the last,
differ by exactly one item.&lt;&#x2F;p&gt;
&lt;p&gt;Again I’ll add the docstrings since they incorporate some good practices that are worth mentioning:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; Finds the index at which two given [`SudokuState`]
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; differ by exactly one item.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; This function iterates over both arrays in lockstep and checks for a
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; pair of elements that are not equal.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; It assumes that there is exactly one such pair and returns its index.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; # Parameters
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; * `previous: SudokuState` - A reference to the first [`SudokuState`] to compare.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; * `current: SudokuState` - A reference to the second [`SudokuState`] to compare.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; # Returns
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; Returns `Some(usize)` with the index of the differing element if found,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; otherwise returns `None` if the arrays are identical (which should not
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; happen given the problem constraints).
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; # Panics
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; The function will panic if cannot convert any of the Sudoku&amp;#39;s board cells
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; indexes from `usize` into a `u8`
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; # Examples
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; ```
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; let old_board: SudokuState = [0; 81];
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; let mut new_boad: SudokuState = [0; 81];
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; new_board[42] = 1; &#x2F;&#x2F; Introduce a change
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; let index = find_changed_cell(&amp;amp;old_board, &amp;amp;new_board);
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; assert_eq!(index, Some(42));
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-documentation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt; ```
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;find_changed_cell&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;previous&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;SudokuState, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;current&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;SudokuState&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;index&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;cell1&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;cell2&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;in&lt;&#x2F;span&gt; previous&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;current&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;if&lt;&#x2F;span&gt; cell1 &lt;span class=&quot;z-keyword z-operator z-comparison z-rust&quot;&gt;!=&lt;&#x2F;span&gt; cell2 &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;            &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;try_from&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;index&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;cannot convert from u8&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-support z-type z-rust&quot;&gt;None&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Return None if no change is found (which should not happen in your case)
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The function &lt;code&gt;find_changed_cell&lt;&#x2F;code&gt; can panic if it cannot convert any of the Sudoku’s board cells indexes from &lt;code&gt;usize&lt;&#x2F;code&gt; into a &lt;code&gt;u8&lt;&#x2F;code&gt;.
Hence, we add a &lt;code&gt;## Panics&lt;&#x2F;code&gt; section to the docstring to inform the user of this possibility.
Additionally, we add an &lt;code&gt;## Examples&lt;&#x2F;code&gt; section to show how to use the function.
These are good practices that are worth mentioning and I highly encourage you to use them in your Rust code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tests&quot;&gt;Tests&lt;&#x2F;h2&gt;
&lt;p&gt;Another advantage of using Rust is that you can write tests for your code
without needing to use a third-party library.
It is baked into the language and you can run your tests with &lt;code&gt;cargo test&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example of a test for the &lt;code&gt;get_conflicting_cells&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-annotation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-annotation z-rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-annotation z-rust&quot;&gt;test&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;    &lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;test_conflicts_multiple&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; board &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;            &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Row 1 with conflict
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;            &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Row 2 with conflict
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;            &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Row 3
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;            &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Row 4
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;            &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Row 5
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;            &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Row 6
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;            &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Row 7
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;            &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Row 8
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;            &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Row 9 with conflict
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;        &lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;get_conflicting_cells&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;board&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;10&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;72&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And also two tests for the &lt;code&gt;find_changed_cell&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-annotation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-annotation z-rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-annotation z-rust&quot;&gt;test&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;    &lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;test_find_changed_cell_single_difference&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; old_board&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; SudokuState &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;81&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; new_board&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; SudokuState &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;81&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        new_board&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;42&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Introduce a change
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;find_changed_cell&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;old_board&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;new_board&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;42&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;    &lt;span class=&quot;z-meta z-annotation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-annotation z-rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-annotation z-rust&quot;&gt;test&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;    &lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;test_find_changed_cell_no_difference&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; old_board&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; SudokuState &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;81&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; This should return None since there is no difference
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;find_changed_cell&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;old_board&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;old_board&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-rust&quot;&gt;None&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I had a lot of fun building this game.
I gave my mother an amazing gift that she’ll treasure forever.
Her smartphone has one less spyware now.
I deployed a fullstack web app with Rust that is fast, safe and efficient;
with the caveat that I didn’t touched any “YavaScript” or complexes build tools.&lt;&#x2F;p&gt;
&lt;p&gt;I hope you enjoyed this post and that you’ll give Rust a try in your next fullstack project.&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>htmx: an oasis in a desert of soy</title>
        <published>2024-01-14T06:13:19+00:00</published>
        <updated>2024-01-14T06:13:19+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/htmx/" type="text/html"/>
        <id>https://storopoli.com/blog/htmx/</id>
        
            <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;htmx&#x2F;bellcurve.png&quot; alt=&quot;htmx bell curve&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I love to learn new things and I’m passionate about Stoic philosophy.
So, when I acquired the domain
&lt;a href=&quot;https:&#x2F;&#x2F;stoicquotes.io&quot;&gt;&lt;code&gt;stoicquotes.io&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
I’ve decided to give &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&quot;&gt;&lt;code&gt;htmx&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; a try.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-htmx&quot;&gt;What is &lt;code&gt;htmx&lt;&#x2F;code&gt;?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;htmx&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; is a small JavaScript library that allows you to enhance your HTML with
attributes to perform AJAX (Asynchronous JavaScript and XML) without writing
JavaScript. It focuses on extending HTML by adding custom attributes
that describe how to perform common dynamic web page behaviors like partial page
updates, form submission, etc. &lt;code&gt;htmx&lt;&#x2F;code&gt; is designed to be easy to use, requiring
minimal JavaScript knowledge, so that you can add interactivity to web pages
with just HTML.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s contrast this with the &lt;a href=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;htmx&#x2F;$link.page(&amp;#x27;blog&#x2F;2023-11-10-soydev&amp;#x27;)&quot;&gt;Soy stuff&lt;&#x2F;a&gt;
like the notorious React framework. &lt;strong&gt;React&lt;&#x2F;strong&gt;, on the other hand, is a JavaScript
library for building user interfaces, primarily through a component-based
architecture. It manages the creation of user interface elements, updates the UI
efficiently when data changes, and helps keep your UI in sync with the state of
your application. React requires a deeper knowledge of JavaScript and understanding
of its principles, such as components, state, and props.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;In simple terms:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;htmx&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; enhances plain HTML by letting you add attributes for dynamic
behaviors, so you can make webpages interactive with no JavaScript coding;
you can think of it as boosting your HTML to do more.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;React&lt;&#x2F;strong&gt; is more like building a complex machine from customizable parts that
you program with JavaScript, giving you full control over how your application
looks and behaves but also requiring more from you in terms of code complexity
and architecture.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Additionally, React can be slower and less performant than &lt;code&gt;htmx&lt;&#x2F;code&gt;.
This is due to &lt;code&gt;htmx&lt;&#x2F;code&gt; manipulating the actual
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Document_Object_Model&quot;&gt;DOM&lt;&#x2F;a&gt; itself,
while React updates objects in the Virtual DOM. Afterward, React compares the
new Virtual DOM with a pre-update version and calculates the
most efficient way to make these changes to the real DOM.
So React has to do this whole trip around diff’ing all the time the Virtual DOM
against the actual DOM for &lt;strong&gt;every fucking change&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, &lt;code&gt;htmx&lt;&#x2F;code&gt; receives pure HTML from the server.
React needs to the &lt;strong&gt;JSON busboy thing&lt;&#x2F;strong&gt;: the server sends JSON, React parses
JSON into JavaScript code, then it parses it again to HTML for the browser.&lt;&#x2F;p&gt;
&lt;p&gt;A consequence of these different paradigms is that &lt;code&gt;htmx&lt;&#x2F;code&gt; don’t care about
what the server sends back and will happily include in the DOM.
Hence, front-end and back-end are decoupled and less complex.
Whereas in Reactland, we need to have a tight synchronicity between front-end
and back-end. If the JSON that the server sends doesn’t conform to the exact
specifications of the front-end, the application &lt;del&gt;becomes a dumpster fire&lt;&#x2F;del&gt;
breaks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hypermedia&quot;&gt;Hypermedia&lt;&#x2F;h2&gt;
&lt;p&gt;When the web was created it was based on the concept of
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hypermedia&quot;&gt;&lt;strong&gt;Hypermedia&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
Hypermedia refers to a system of interconnected multimedia elements, which can
include text, graphics, audio, video, and hyperlinks. It allows users to
navigate between related pieces of content across the web or within
applications, creating a non-linear way of accessing information.&lt;&#x2F;p&gt;
&lt;p&gt;HTML follows the Hypermedia protocol. HTML is the native language of browsers.
That’s why all the React-like frameworks have to convert JavaScript into HTML.
So it’s only natural to rely primarily on HTML to deliver content and sprinkle
JavaScript sparingly when you need something that HTML cannot offer.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, HTML has stopped in time. Despite all the richness of
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;HTTP&quot;&gt;HTTP&lt;&#x2F;a&gt; with the diverse request methods:
&lt;code&gt;GET&lt;&#x2F;code&gt;, &lt;code&gt;HEAD&lt;&#x2F;code&gt;, &lt;code&gt;POST&lt;&#x2F;code&gt;, &lt;code&gt;PUT&lt;&#x2F;code&gt;, &lt;code&gt;DELETE&lt;&#x2F;code&gt;, &lt;code&gt;CONNECT&lt;&#x2F;code&gt;, &lt;code&gt;OPTIONS&lt;&#x2F;code&gt;, &lt;code&gt;TRACE&lt;&#x2F;code&gt;, &lt;code&gt;PATCH&lt;&#x2F;code&gt;;
HTML only has &lt;em&gt;two&lt;&#x2F;em&gt; elements that interact with the server:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;&#x2F;code&gt;: sends a &lt;code&gt;GET&lt;&#x2F;code&gt; request to fetch new data.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form&amp;gt;&lt;&#x2F;code&gt;: sends a &lt;code&gt;POST&lt;&#x2F;code&gt; request to create new data.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That’s the main purpose of &lt;code&gt;htmx&lt;&#x2F;code&gt;: allowing HTML elements to leverage all the
capabilities of HTTP.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;htmx-in-practice&quot;&gt;&lt;code&gt;htmx&lt;&#x2F;code&gt; in Practice&lt;&#x2F;h2&gt;
&lt;p&gt;OK, enough of abstract and theoretical concepts. Let’s see how &lt;code&gt;htmx&lt;&#x2F;code&gt; works in
practice.&lt;&#x2F;p&gt;
&lt;p&gt;First, the only thing you need to do enable &lt;code&gt;htmx&lt;&#x2F;code&gt; is to insert this &lt;code&gt;&amp;lt;script&amp;gt;&lt;&#x2F;code&gt;
tag in your HTML:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; class=&quot;language-html z-code&quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-script z-begin z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-script z-html&quot;&gt;script&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-script z-begin z-html&quot;&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;src&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;https:&#x2F;&#x2F;unpkg.com&#x2F;htmx.org@{version}&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-script z-end z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-script z-html&quot;&gt;script&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;{version}&lt;&#x2F;code&gt; is the desired &lt;code&gt;htmx&lt;&#x2F;code&gt; version that you’ll want to use.
I has around 40kb of size.&lt;&#x2F;p&gt;
&lt;p&gt;Inside the code behind &lt;a href=&quot;https:&#x2F;&#x2F;stoicquotes.io&quot;&gt;&lt;code&gt;stoicquotes.io&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
we have the following HTML:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; class=&quot;language-html z-code&quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-block z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-block z-any z-html&quot;&gt;div&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;  &lt;span class=&quot;z-meta z-tag z-block z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-block z-any z-html&quot;&gt;blockquote&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-attribute-with-value z-id z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-id z-html&quot;&gt;id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-meta z-toc-list z-id z-html&quot;&gt;quote&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Some nice Stoic quote...&lt;span class=&quot;z-meta z-tag z-block z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-block z-any z-html&quot;&gt;blockquote&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-block z-any z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-block z-any z-html&quot;&gt;div&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-inline z-form z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-form z-html&quot;&gt;button&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-inline z-form z-html&quot;&gt;  &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;hx-get&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&#x2F;quote&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-inline z-form z-html&quot;&gt;  &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;hx-trigger&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;click&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-inline z-form z-html&quot;&gt;  &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;hx-target&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;#quote&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-inline z-form z-html&quot;&gt;  &lt;span class=&quot;z-meta z-attribute-with-value z-html&quot;&gt;&lt;span class=&quot;z-entity z-other z-attribute-name z-html&quot;&gt;hx-swap&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-html&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;outerHTML&lt;span class=&quot;z-punctuation z-definition z-string z-end z-html&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-inline z-form z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;  New
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-html z-basic&quot;&gt;&lt;span class=&quot;z-meta z-tag z-inline z-form z-html&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-html&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-inline z-form z-html&quot;&gt;button&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-html&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the user clicks (&lt;code&gt;hx-trigger&lt;&#x2F;code&gt;) in the “New” button, &lt;code&gt;htmx&lt;&#x2F;code&gt; sends a &lt;code&gt;GET&lt;&#x2F;code&gt;
request to the &lt;code&gt;&#x2F;quote&lt;&#x2F;code&gt; endpoint (&lt;code&gt;hx-get&lt;&#x2F;code&gt;). Then it swaps the whole HTML
(&lt;code&gt;hx-swap&lt;&#x2F;code&gt;) of the element that has id “quote” (&lt;code&gt;hx-target&lt;&#x2F;code&gt;).
This is accomplished without a single character of JavaScript.
Instead we extend HTML by adding new attributes to the HTML elements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hx-get&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hx-trigger&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hx-target&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hx-swap&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The server replies with a new &lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;&#x2F;code&gt; element every time it gets a &lt;code&gt;GET&lt;&#x2F;code&gt;
request in the &lt;code&gt;&#x2F;quote&lt;&#x2F;code&gt; endpoint.&lt;&#x2F;p&gt;
&lt;p&gt;This is truly amazing. We just used one line of &lt;code&gt;htmx&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;htmx&#x2F;4-lines.png&quot; alt=&quot;htmx 4 lines&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;htmx&lt;&#x2F;code&gt; adheres to my trifecta of amazing tools:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;powerful&lt;&#x2F;li&gt;
&lt;li&gt;expressive&lt;&#x2F;li&gt;
&lt;li&gt;concise&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s a breakdown of what the trifecta of amazing tools means:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Powerful:&lt;&#x2F;strong&gt;
A powerful tool has the capability to handle complex, demanding tasks with
relative ease. It possesses the strength, performance, and features necessary to
accomplish a wide range of functions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Expressive:&lt;&#x2F;strong&gt;
An expressive tool gives users the ability to articulate complex ideas,
designs, or concepts with simplicity and nuance. It provides a rich set of
capabilities that allow for diverse and sophisticated forms of expression.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Concise:&lt;&#x2F;strong&gt;
A concise tool allows for achieving goals with minimal effort or complexity.
It focuses on efficiency and effectiveness, often through simplification and the
removal of unnecessary components. It should be capable of performing tasks
without requiring verbose instructions or processes.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;how-we-would-do-this-in-react&quot;&gt;How we would do this in React?&lt;&#x2F;h3&gt;
&lt;p&gt;Now compare this with React.&lt;&#x2F;p&gt;
&lt;p&gt;First, we need to install React.
This is not simple, but here’s a breakdown:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;install Node.js&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;install React: &lt;code&gt;npm install react react-dom&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;create an &lt;code&gt;index.js&lt;&#x2F;code&gt; file with some variant of:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript z-code&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-import z-ts&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-ts&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-alias z-ts&quot;&gt;createRoot&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-from z-ts&quot;&gt;from&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;react-dom&#x2F;client&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-support z-variable z-dom z-ts&quot;&gt;document&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-variable z-property z-dom z-ts&quot;&gt;body&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-property z-ts&quot;&gt;innerHTML&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&amp;lt;&#x2F;div&amp;gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;root&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;createRoot&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-variable z-dom z-ts&quot;&gt;document&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-dom z-ts&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;app&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-variable z-object z-node z-ts&quot;&gt;root&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;render&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-cast z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-brace z-angle z-ts&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-type z-ts&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-angle z-ts&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;world&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-relational z-ts&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-relational z-ts&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;And now here’s the code for the &lt;code&gt;Quote&lt;&#x2F;code&gt; component:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript z-code&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-import z-ts&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-ts&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-alias z-ts&quot;&gt;React&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-alias z-ts&quot;&gt;useState&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-from z-ts&quot;&gt;from&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;react&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;Quote&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt; &lt;span class=&quot;z-meta z-parameters z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-begin z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-end z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-ts&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-array-binding-pattern-variable z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-binding-pattern z-array z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;quote&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;setQuote&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-binding-pattern z-array z-ts&quot;&gt;]&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;useState&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Some nice Stoic quote...&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;fetchNewQuote&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-async z-ts&quot;&gt;async&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-parameters z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-begin z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-end z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-ts&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-trycatch z-ts&quot;&gt;try&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;      &lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;response&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-ts&quot;&gt;await&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&#x2F;quote&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;      &lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;newQuote&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-ts&quot;&gt;await&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;text&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;      &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-ts&quot;&gt;setQuote&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;newQuote&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;    &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-trycatch z-ts&quot;&gt;catch&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;error&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;      &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-class z-console z-ts&quot;&gt;console&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-console z-ts&quot;&gt;error&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Error fetching new quote:&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;error&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;    &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-flow z-ts&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-cast z-expr z-ts&quot;&gt;    &lt;span class=&quot;z-meta z-brace z-angle z-ts&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-type z-ts&quot;&gt;div&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-angle z-ts&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;      &lt;span class=&quot;z-keyword z-operator z-relational z-ts&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;blockquote&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;id&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;quote&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-relational z-ts&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;quote&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-relational z-ts&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;blockquote&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-relational z-ts&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;      &lt;span class=&quot;z-keyword z-operator z-relational z-ts&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;button&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;onClick&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-objectliteral z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-object z-member z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;fetchNewQuote&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-relational z-ts&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;New&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-relational z-ts&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;button&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-relational z-ts&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;    &lt;span class=&quot;z-keyword z-operator z-relational z-ts&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-ts&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;div&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-relational z-ts&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-export z-default z-ts&quot;&gt;&lt;span class=&quot;z-keyword z-control z-export z-ts&quot;&gt;export&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-default z-ts&quot;&gt;default&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;Quote&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That’s a LOT of JavaScript code.
The Soy Gods must be smiling upon you, my friend.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I highly recommend that you check out &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&quot;&gt;&lt;code&gt;htmx&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
especially the free &lt;a href=&quot;https:&#x2F;&#x2F;htmx.org&#x2F;#book&quot;&gt;Hypermedia systems book&lt;&#x2F;a&gt; which
goes into details and it is way more comprehensive than this short blog post.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;htmx&lt;&#x2F;code&gt; is a fresh and elegant approach to build simple reactive web pages.
It extends HTML to be able to use all of the capabilities of any JavaScript-based
reactive framework without a single drop of JavaScript.
You just add some new HTML attributes to your HTML elements.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve had such joy using &lt;code&gt;htmx&lt;&#x2F;code&gt; lately.
It made me go back into my early teens, when I was doing HTML pages in
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;GeoCities&quot;&gt;GeoCities&lt;&#x2F;a&gt;.
Good times, no JavaScript-bloated code.&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Zero-cost abstractions</title>
        <published>2023-11-28T18:19:36+00:00</published>
        <updated>2023-11-28T18:19:36+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/zero-cost-abstractions/" type="text/html"/>
        <id>https://storopoli.com/blog/zero-cost-abstractions/</id>
        
            <content type="html">&lt;p&gt;In programming language circles there’s a recently trend of discussing a concept
called &lt;strong&gt;zero-cost abstractions&lt;&#x2F;strong&gt;:
the ability to use higher-levels abstractions without suffering any loss of performance.&lt;&#x2F;p&gt;
&lt;p&gt;Zero-cost abstractions allows you to write performant code without having to
give up a single drop of convenience and expressiveness:&lt;&#x2F;p&gt;
&lt;p&gt;You want for-loops?
&lt;em&gt;You can have it&lt;&#x2F;em&gt;.
Generics?
&lt;em&gt;Yeah, why not&lt;&#x2F;em&gt;?
Data structures?
&lt;em&gt;Sure, keep’em coming&lt;&#x2F;em&gt;.
Async operations?
&lt;em&gt;You bet ya&lt;&#x2F;em&gt;!
Multi-threading?
&lt;em&gt;Hell yes&lt;&#x2F;em&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;To put more formally,
I like &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;69178445&quot;&gt;this definition from StackOverflow&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Zero Cost Abstractions means adding higher-level programming concepts, like generics,
collections and so on do not come with a run-time cost,
only compile time cost (the code will be slower to compile).
Any operation on zero-cost abstractions is as fast as you would write out
matching functionality by hand using lower-level programming concepts like
for loops, counters, ifs and using raw pointers.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here’s an analogy:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Imagine that you are going to buy a car.
The sales person offers you a fancy car praising how easy it is to drive it,
that you don’t need to think about RPM, clutch and stick shift,
parking maneuver, fuel type, and other shenanigans.
You just turn it on and drive.
However, once you take a look at the car’s data sheet, you are horrified.
The car is bad in every aspect except easy of use.
It has dreadful fuel consumption,
atrocious safety ratings,
disastrous handling, and so on…&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Believe me, you wouldn’t want to own that car.&lt;&#x2F;p&gt;
&lt;p&gt;Metaphors aside, that’s &lt;strong&gt;exactly what professional developers and whole teams
choose to use every day: unacceptable inferior tools&lt;&#x2F;strong&gt;.
Tools that, not only don’t have &lt;strong&gt;zero-cost abstractions&lt;&#x2F;strong&gt;,
rather don’t allow you to even have non-zero-cost anything!&lt;&#x2F;p&gt;
&lt;p&gt;Let’s do some Python bashing in the meantime.
I know that’s easy to bash Python,
but that’s not the point.
If Python wasn’t used so widely in production,
I would definitely leave it alone.
Don’t get me wrong, Python is the second-best language for everything.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-curious-case-of-the-python-boolean&quot;&gt;The curious case of the Python boolean&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;zero-cost-abstractions&#x2F;non-zero-cost-abstraction.png&quot; alt=&quot;Python WTF?&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I wish this meme was a joke, but it isn’t.
A boolean is one of the simplest data type taking only two possible values:
true or false.
Just grab your nearest Python REPL:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-from z-python&quot;&gt;from&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-meta z-import-source z-python&quot;&gt; &lt;span class=&quot;z-meta z-import-path z-python&quot;&gt;&lt;span class=&quot;z-meta z-import-name z-python&quot;&gt;sys&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-python&quot;&gt;import&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;getsizeof&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;getsizeof&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;True&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;28&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The function &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;sys.html#sys.getsizeof&quot;&gt;&lt;code&gt;sys.getsizeof&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
returns the size of an object in bytes.
&lt;strong&gt;How the hell Python needs 28 bytes to represent something
that needs at most 1 byte&lt;&#x2F;strong&gt;?
Imagine incurring a 28x penalty in memory size requirements for every boolean
that you use.
Now multiply this by every operation that your code is going to run in production
over time.
Again: &lt;strong&gt;unacceptable&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That’s because all objects in Python,
in the sense that everything that you can instantiate,
i.e. everything that you can put on the left hand-side of the &lt;code&gt;=&lt;&#x2F;code&gt; assignment,
is a &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;c-api&#x2F;structures.html#c.PyObject&quot;&gt;&lt;code&gt;PyObject&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;All Python objects ultimately share a small number of fields at the
beginning of the object’s representation in memory.
These are represented by the &lt;code&gt;PyObject&lt;&#x2F;code&gt; and &lt;code&gt;PyVarObject&lt;&#x2F;code&gt; types.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Python is dynamically-typed, which means that you don’t have primitives like
8-, 16-, 32-bit (un)signed integers and so on.
Everything is a huge mess allocated in the heap that must carry not only its value,
but also information about its type.&lt;&#x2F;p&gt;
&lt;p&gt;Most important, everything that is fast in Python is &lt;em&gt;not Python-based&lt;&#x2F;em&gt;.
Take a look at the image below,
I grabbed some popular Python libraries from GitHub,
namely &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;numpy&#x2F;numpy&quot;&gt;NumPy&lt;&#x2F;a&gt; (linear algebra package)
and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pytorch&#x2F;pytorch&quot;&gt;PyToch&lt;&#x2F;a&gt; (deep learning package),
and checked the
language codebase percentage.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;zero-cost-abstractions&#x2F;python-my-ass.jpg&quot; alt=&quot;Python my ass&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Surprise, they are &lt;strong&gt;&lt;em&gt;not&lt;&#x2F;em&gt; Python libraries&lt;&#x2F;strong&gt;.
They are &lt;strong&gt;C&#x2F;C++ codebases&lt;&#x2F;strong&gt;.
Even if Python is the main language used in these codebases,
I still think that this is not the case due to the nature of the Python code:
&lt;strong&gt;all docstrings are written in Python&lt;&#x2F;strong&gt;.
If you have a very fast C function in your codebase that takes 50 lines of code,
followed by a Python wrapper function that calls it using 10 lines of code,
&lt;em&gt;but&lt;&#x2F;em&gt; with a docstring that is 50 lines of code;
you have a “Python”-majority codebase.&lt;&#x2F;p&gt;
&lt;p&gt;In a sense the most efficient Python programmer is a C&#x2F;C++ programmer…&lt;&#x2F;p&gt;
&lt;p&gt;Here’s &lt;a href=&quot;https:&#x2F;&#x2F;julialang.org&quot;&gt;Julia&lt;&#x2F;a&gt;, which is also dynamically-typed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; Base.summarysize&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-language z-julia&quot;&gt;true&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And to your surprise,
Julia is coded in …. Julia!
Check the image below for the language codebase percentage of
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JuliaLang&#x2F;julia&quot;&gt;Julia&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;LuxDL&#x2F;Lux.jl&quot;&gt;&lt;code&gt;Lux.jl&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (deep learning package).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;zero-cost-abstractions&#x2F;julia.jpg&quot; alt=&quot;Julia: turtles all the way&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Finally, here’s &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.org&quot;&gt;Rust&lt;&#x2F;a&gt;, which is not dynamically-,
but static-typed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; main.rs
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;mem&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Size of bool: &lt;span class=&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{}&lt;&#x2F;span&gt; byte&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;mem&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;size_of&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; cargo run&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;release&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;   &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Compiling&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; size_of_bool v0.1.0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Finished&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; release &lt;span class=&quot;z-keyword z-control z-regexp z-set z-begin z-shell&quot;&gt;[&lt;&#x2F;span&gt;optimized&lt;span class=&quot;z-keyword z-control z-regexp z-set z-end z-shell&quot;&gt;]&lt;&#x2F;span&gt; target(s&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0.00s&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;     &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Running&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-command z-backticks z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-shell&quot;&gt;`&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;target&#x2F;release&#x2F;size_of_bool&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-shell&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Size&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; of bool: 1 byte&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;more-zero-costs-abstractions&quot;&gt;More zero-costs abstractions&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s cover two more zero-costs abstractions, both in Julia and in Rust:
&lt;strong&gt;for-loops&lt;&#x2F;strong&gt; and &lt;strong&gt;enums&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;for-loops&quot;&gt;For-loops&lt;&#x2F;h3&gt;
&lt;p&gt;A friend and a Julia-advocate once told me that Julia’s master plan is to secretly
“make everyone aware about &lt;em&gt;compilers&lt;&#x2F;em&gt;”.
The &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Compiler&quot;&gt;compiler&lt;&#x2F;a&gt;
is a program that translate source code from a high-level programming language
to a low-level programming language
(e.g. assembly language, object code, or machine code) to create an
executable program.&lt;&#x2F;p&gt;
&lt;p&gt;Python uses &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;python&#x2F;cpython&quot;&gt;CPython&lt;&#x2F;a&gt; as the compiler.
If you search around on why CPython&#x2F;Python is so slow and inefficient,
you’ll find that the culprits are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Python is &lt;strong&gt;dynamic-typed language&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Python’s &lt;strong&gt;Global Interpreter Lock (GIL) restricts multi-threading capabilities&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Python is &lt;strong&gt;interpreted&lt;&#x2F;strong&gt;, which means that Python code is executed sequentially:
line-by-line.&lt;&#x2F;li&gt;
&lt;li&gt;Python is &lt;strong&gt;garbage-collected&lt;&#x2F;strong&gt;: all memory its tracked,
and allocated or deallocated which introduces overhead.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I completely disagree with almost all the above reasons, except the GIL.
&lt;strong&gt;Python is slow because of its design decisions&lt;&#x2F;strong&gt;,
more specifically the way CPython works under the hood.
It is not built for performance in mind.
Actually, the main objective of Python was to be a
“language that would be easy to read, write, and maintain”.
I salute that: Python has remained true to its main objective.&lt;&#x2F;p&gt;
&lt;p&gt;Now let’s switch to Julia:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Julia is &lt;strong&gt;dynamic-typed language&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Julia is &lt;strong&gt;interpreted&lt;&#x2F;strong&gt;, which means that Julia code is executed sequentially:
line-by-line.&lt;&#x2F;li&gt;
&lt;li&gt;Julia is &lt;strong&gt;garbage-collected&lt;&#x2F;strong&gt;: all memory its tracked,
and allocated or deallocated which introduces overhead.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I’ve copy-pasted all Python’s arguments for inefficiency, except the GIL.
And, contrary to Python, &lt;a href=&quot;https:&#x2F;&#x2F;julialang.org&#x2F;benchmarks&#x2F;&quot;&gt;Julia is fast&lt;&#x2F;a&gt;!
Sometimes even faster than C.
Actually, that was the goal all along since Julia’s inception.
If you check the &lt;a href=&quot;https:&#x2F;&#x2F;julialang.org&#x2F;blog&#x2F;2012&#x2F;02&#x2F;why-we-created-julia&#x2F;&quot;&gt;notorious Julia announcement blog post from 2012&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;We want a language that’s open source, with a liberal license.
We want the speed of C with the dynamism of Ruby.
We want a language that’s homoiconic, with true macros like Lisp,
but with obvious, familiar mathematical notation like Matlab.
We want something as usable for general programming as Python,
as easy for statistics as R, as natural for string processing as Perl,
as powerful for linear algebra as Matlab, as good at gluing programs together as the shell.
Something that is dirt simple to learn,
yet keeps the most serious hackers happy.
We want it interactive and we want it compiled.&lt;&#x2F;p&gt;
&lt;p&gt;(Did we mention it should be as fast as C?)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It mentions “speed” twice.
Not only that, but also specifically says that it should match C’s speed.&lt;&#x2F;p&gt;
&lt;p&gt;Julia is fast because of its design decisions.
One of the major reasons why Julia is fast is because of the choice of compiler
that it uses: &lt;a href=&quot;https:&#x2F;&#x2F;llvm.org&#x2F;&quot;&gt;LLVM&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;LLVM originally stood for &lt;strong&gt;l&lt;&#x2F;strong&gt;ow &lt;strong&gt;l&lt;&#x2F;strong&gt;evel &lt;strong&gt;v&lt;&#x2F;strong&gt;irtual &lt;strong&gt;m&lt;&#x2F;strong&gt;achine.
Despite its name, LLVM has little to do with traditional virtual machines.
LLVM can take &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Intermediate_representation&quot;&gt;intermediate representation (IR)&lt;&#x2F;a&gt;
code and compile it into machine-dependent instructions.
It has &lt;a href=&quot;https:&#x2F;&#x2F;foundation.llvm.org&#x2F;sponsors&quot;&gt;support and sponsorship&lt;&#x2F;a&gt;
from a lot of big-tech corporations,
such as Apple, Google, IBM, Meta, Arm, Intel, AMD, Nvidia, and so on.
It is a pretty fast compiler that can do wonders in optimizing IR code to a
plethora of computer architectures.&lt;&#x2F;p&gt;
&lt;p&gt;In a sense, Julia is a front-end for LLVM.
It turns your easy-to-read and easy-to-write Julia code into LLVM IR code.
Take this for-loop example inside a function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-function z-julia&quot;&gt;function&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-julia&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-julia&quot;&gt;sum_10&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;    acc &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-julia&quot;&gt;for&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-control z-julia&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;10&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;        acc &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;+=&lt;&#x2F;span&gt; i
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;    &lt;span class=&quot;z-keyword z-other z-julia&quot;&gt;end&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;    &lt;span class=&quot;z-keyword z-other z-julia&quot;&gt;return&lt;&#x2F;span&gt; acc
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;&lt;span class=&quot;z-keyword z-other z-julia&quot;&gt;end&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s check what Julia generates as LLVM IR code for this function.
We can do that with the &lt;code&gt;@code_llvm&lt;&#x2F;code&gt; macro.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-macro z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-macro z-julia&quot;&gt;@&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-macro z-julia&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-julia&quot;&gt;code_llvm&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; debuginfo&lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-julia&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-julia&quot;&gt;none&lt;&#x2F;span&gt; sum_&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;10&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;define i&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-macro z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-macro z-julia&quot;&gt;@&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-macro z-julia&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-julia&quot;&gt;julia_sum_10_172&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-number-sign z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-julia&quot;&gt;#&lt;&#x2F;span&gt;0 {&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;top&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;  ret i&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;55&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can’t easily fool the compiler.
Julia understands that the answer is 55,
and the LLVM IR generated code is pretty much just “return 55 as a 64-bit integer”.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s also check the machine-dependent instructions with the &lt;code&gt;@code_native&lt;&#x2F;code&gt; macro.
I am using an Apple Silicon machine, so these instructions might differ from yours:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-macro z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-macro z-julia&quot;&gt;@&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-macro z-julia&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-julia&quot;&gt;code_native&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; debuginfo&lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-julia&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-julia&quot;&gt;none&lt;&#x2F;span&gt; sum_&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;10&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;        .section        __TEXT,__text,regular,pure_instructions
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;        .build_version macos, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;14&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;        .globl  _julia_sum_&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;10_214&lt;&#x2F;span&gt;               ; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt; Begin &lt;span class=&quot;z-meta z-function z-julia&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-function z-julia&quot;&gt;function&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-julia&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-julia&quot;&gt;julia_sum_10_214&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;        .p&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;2&lt;&#x2F;span&gt;align        &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;_julia_sum_&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;10_214&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;:&lt;&#x2F;span&gt;                      ; &lt;span class=&quot;z-meta z-function-call z-macro z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-macro z-julia&quot;&gt;@&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-macro z-julia&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-julia&quot;&gt;julia_sum_10_214&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;        .cfi_startproc
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt;bb&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;.0&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;:&lt;&#x2F;span&gt;                                ; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt;top
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;        mov     w&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0&lt;&#x2F;span&gt;, &lt;span class=&quot;z-comment z-line z-number-sign z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-julia&quot;&gt;#&lt;&#x2F;span&gt;55&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;        ret
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;        .cfi_endproc
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;                                        ; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt; End &lt;span class=&quot;z-meta z-function z-julia&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-function z-julia&quot;&gt;function&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;.subsections_via_symbols
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The only important instruction for our argument here is the &lt;code&gt;mov w0, #55&lt;&#x2F;code&gt;.
This means “move the value 55 into the &lt;code&gt;w0&lt;&#x2F;code&gt; register”,
where &lt;code&gt;w0&lt;&#x2F;code&gt; is one of registers available in ARM-based architectures
(which Apple Silicon chips are).&lt;&#x2F;p&gt;
&lt;p&gt;This is a &lt;strong&gt;zero-cost abstraction&lt;&#x2F;strong&gt;!
I don’t need to give up for-loops, because they might be slow and inefficient;
like some Python users suggest newcomers.
I can have the full convenience and expressiveness of for-loops without
paying performance costs.
Pretty much the definition of a zero-cost abstraction from above.&lt;&#x2F;p&gt;
&lt;p&gt;Using LLVM as a compiler backend is not something unique to Julia.
Rust also uses LLVM under the hood.
Take for example this simple Rust code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; main.rs
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;sum_10&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; acc &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;for&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-rust&quot;&gt;..&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;10&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        acc &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;+=&lt;&#x2F;span&gt; i
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    acc
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;sum_10: &lt;span class=&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-function z-rust&quot;&gt;sum_10&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can inspect both LLVM IR code and machine instructions with the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pacak&#x2F;cargo-show-asm&quot;&gt;&lt;code&gt;cargo-show-asm&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; cargo asm&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;llvm&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;sum_10::main&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;grep&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 55&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Finished&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; release &lt;span class=&quot;z-keyword z-control z-regexp z-set z-begin z-shell&quot;&gt;[&lt;&#x2F;span&gt;optimized&lt;span class=&quot;z-keyword z-control z-regexp z-set z-end z-shell&quot;&gt;]&lt;&#x2F;span&gt; target(s&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0.00s&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;store&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; i32 55, ptr &lt;span class=&quot;z-meta z-group z-expansion z-job z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-job z-shell&quot;&gt;%&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;_9&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, align 4&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; cargo asm &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;sum_10::main&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;grep&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 55&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Finished&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; release &lt;span class=&quot;z-keyword z-control z-regexp z-set z-begin z-shell&quot;&gt;[&lt;&#x2F;span&gt;optimized&lt;span class=&quot;z-keyword z-control z-regexp z-set z-end z-shell&quot;&gt;]&lt;&#x2F;span&gt; target(s&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0.00s&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;        &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;mov&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; w8, &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;55&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;No coincidence that the LLVM IR code is very similar,
with the difference that integers, by default,
in Julia are 64 bits and in Rust 32 bits.
However, the machine code is &lt;strong&gt;identical&lt;&#x2F;strong&gt;:
“move the value 55 into a &lt;code&gt;w&lt;&#x2F;code&gt; something register”.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;enums&quot;&gt;Enums&lt;&#x2F;h3&gt;
&lt;p&gt;Another zero-cost abstraction, in Julia and Rust, is &lt;strong&gt;enums&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In Julia all enums, by default have a &lt;code&gt;BaseType&lt;&#x2F;code&gt; of &lt;code&gt;Int32&lt;&#x2F;code&gt;:
a signed 32-bit integer.
However, we can override this with type annotations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-macro z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-macro z-julia&quot;&gt;@&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-macro z-julia&quot;&gt;&lt;span class=&quot;z-support z-function z-macro z-julia&quot;&gt;enum&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; Thing&lt;span class=&quot;z-keyword z-operator z-colons z-julia&quot;&gt;::&lt;&#x2F;span&gt;Bool One Two
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; Base.summarysize&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;Thing&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-language z-julia&quot;&gt;false&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we have an enum &lt;code&gt;Thing&lt;&#x2F;code&gt; with two variants: &lt;code&gt;One&lt;&#x2F;code&gt; and &lt;code&gt;Two&lt;&#x2F;code&gt;.
Since we can safely represent all the possible variant space of &lt;code&gt;Thing&lt;&#x2F;code&gt;
with a boolean type, we override the &lt;code&gt;BaseType&lt;&#x2F;code&gt; of &lt;code&gt;Thing&lt;&#x2F;code&gt; to be the &lt;code&gt;Bool&lt;&#x2F;code&gt; type.
Unsurprised, any object of &lt;code&gt;Thing&lt;&#x2F;code&gt; occupies 1 byte in memory.&lt;&#x2F;p&gt;
&lt;p&gt;We can achieve the same with Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; main.rs
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;mem&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-annotation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-annotation z-rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-annotation z-rust&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;dead_code&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-enum z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-enum z-rust&quot;&gt;enum&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-enum z-rust&quot;&gt;Thing&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-enum z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    One&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-enum z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    Two&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-enum z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Size of Thing: &lt;span class=&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{}&lt;&#x2F;span&gt; byte&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;mem&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;size_of&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;Thing&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; cargo run&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;release&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;   &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Compiling&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; enum_size v0.1.0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Finished&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; release &lt;span class=&quot;z-keyword z-control z-regexp z-set z-begin z-shell&quot;&gt;[&lt;&#x2F;span&gt;optimized&lt;span class=&quot;z-keyword z-control z-regexp z-set z-end z-shell&quot;&gt;]&lt;&#x2F;span&gt; target(s&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0.09s&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;     &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Running&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-command z-backticks z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-shell&quot;&gt;`&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;target&#x2F;release&#x2F;enum_size&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-shell&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Size&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; of Thing: 1 byte&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, contrary to Julia, Rust compiler automatically detects the enum’s
variant space size and adjust accordingly.
So, no need of overrides.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Zero-cost abstractions are a joy to have in a programming language.
It enables you, as a programmer, to just focus on what’s important:
write expressive code that is easy to read, maintain, debug, and build upon.&lt;&#x2F;p&gt;
&lt;p&gt;It is no wonder that zero-cost abstractions is a pervasive feature
of two of my top-favorite languages:
&lt;a href=&quot;https:&#x2F;&#x2F;julialang.org&quot;&gt;Julia&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.org&quot;&gt;Rust&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Lindley&#x27;s paradox, or the consistency of Bayesian thinking</title>
        <published>2023-11-22T07:06:59+00:00</published>
        <updated>2023-11-22T07:06:59+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/lindley-paradox/" type="text/html"/>
        <id>https://storopoli.com/blog/lindley-paradox/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;lindley-paradox&#x2F;lindley.jpg&quot; alt=&quot;Dennis Lindley&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dennis_Lindley&quot;&gt;Dennis Lindley&lt;&#x2F;a&gt;,
one of my many heroes,
was an English statistician,
decision theorist and leading advocate of Bayesian statistics.
He published a pivotal book,
&lt;a href=&quot;https:&#x2F;&#x2F;onlinelibrary.wiley.com&#x2F;doi&#x2F;book&#x2F;10.1002&#x2F;9781118650158&quot;&gt;Understanding Uncertainty&lt;&#x2F;a&gt;,
that changed my view on what is and how to handle uncertainty in a
coherent way.
He is responsible for one of my favorites quotes:
“Inside every non-Bayesian there is a Bayesian struggling to get out”;
and one of my favorite heuristics around prior probabilities:
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cromwell%27s_rule&quot;&gt;Cromwell’s Rule&lt;&#x2F;a&gt;.
Lindley predicted in 1975 that “Bayesian methods will indeed become pervasive,
enabled by the development of powerful computing facilities” (Lindley, 1975).
You can find more about all of Lindley’s achievements in his &lt;a href=&quot;https:&#x2F;&#x2F;www.theguardian.com&#x2F;science&#x2F;2014&#x2F;mar&#x2F;16&#x2F;dennis-lindley&quot;&gt;obituary&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lindley-s-paradox&quot;&gt;Lindley’s Paradox&lt;&#x2F;h2&gt;
&lt;p&gt;Lindley’s paradox is a counterintuitive situation in statistics
in which the Bayesian and frequentist approaches to a hypothesis testing problem
give different results for certain choices of the prior distribution.&lt;&#x2F;p&gt;
&lt;p&gt;More formally, the paradox is as follows.
We have some parameter $\theta$ that we are interested in.
Then, we proceed with an experiment to test two competing hypotheses:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$H_0$ (also known as &lt;em&gt;null hypothesis&lt;&#x2F;em&gt;):
there is no “effect”, or, more specifically,
$\theta = 0$.&lt;&#x2F;li&gt;
&lt;li&gt;$H_a$ (also known as &lt;em&gt;alternative hypothesis&lt;&#x2F;em&gt;):
there is an “effect”, or, more specifically,
$\theta \ne 0$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The paradox occurs when two conditions are met:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The result of the experiment is &lt;em&gt;significant&lt;&#x2F;em&gt; by a frequentist test of $H_0$,
which indicates sufficient evidence to reject $H_0$, at a certain threshold of
probability.&lt;&#x2F;li&gt;
&lt;li&gt;The posterior probability (Bayesian approach) of $H_0 \mid \theta$
(null hypothesis given $\theta$) is high,
which indicates strong evidence that $H_0$ should be favored over $H_a$,
that is, to &lt;em&gt;not&lt;&#x2F;em&gt; reject $H_0$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;These results can occur at the same time when $H_0$ is very specific,
$H_a$ more diffuse,
and the prior distribution does not strongly favor one or the other.
These conditions are pervasive across science
and common in traditional null-hypothesis significance testing approaches.&lt;&#x2F;p&gt;
&lt;p&gt;This is a duel of frequentist versus Bayesian approaches,
and one of the many in which Bayesian emerges as the most coherent.
Let’s give a example and go over the analytical result with a ton of math,
but also a computational result with &lt;a href=&quot;https:&#x2F;&#x2F;julialang.org&quot;&gt;Julia&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example&quot;&gt;Example&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s the setup for the example.
In a certain city 49,581 boys and 48,870 girls have been
born over a certain time period.
The observed proportion of male births is thus
$\frac{49,581}{98,451} \approx 0.5036$.&lt;&#x2F;p&gt;
&lt;p&gt;We assume that the birth of a child is independent with a certain probability
$\theta$.
Since our data is a sequence of $n$ independent &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bernoulli_trial&quot;&gt;Bernoulli trials&lt;&#x2F;a&gt;,
i.e., $n$ independent random experiments with exactly two possible outcomes:
“success” and “failure”,
in which the probability of success is the same every time the
experiment is conducted.
We can safely assume that it follows a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Binomial_distribution&quot;&gt;binomial distribution&lt;&#x2F;a&gt;
with parameters:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$n$: the number of “trials” (or the total number of births).&lt;&#x2F;li&gt;
&lt;li&gt;$\theta$: the probability of male births.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We then set up our two competing hypotheses:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$H_0$: $\theta = 0.5$.&lt;&#x2F;li&gt;
&lt;li&gt;$H_a$: $\theta \ne 0.5$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;analytical-solution&quot;&gt;Analytical Solution&lt;&#x2F;h3&gt;
&lt;p&gt;This is a toy-problem and, like most toy problems,
we can solve it analytically for both the frequentist and the Bayesian approaches.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;analytical-solutions-frequentist-approach&quot;&gt;Analytical Solutions – Frequentist Approach&lt;&#x2F;h4&gt;
&lt;p&gt;The frequentist approach to testing $H_0$ is to compute a $p$-value,
the probability of observing births of boys at least as large as 49,581
assuming $H_0$ is true.
Because the number of births is very large,
we can use a normal approximation for the
binomial-distributed number of male births.
Let’s define $X$ as the total number of male births,
then $X$ follows a normal distribution:&lt;&#x2F;p&gt;
&lt;p&gt;$$X \sim \text{Normal}(\mu, \sigma)$$&lt;&#x2F;p&gt;
&lt;p&gt;where $\mu$ is the mean parameter,
$n \theta$ in our case,
and $\sigma$ is the standard deviation parameter,
$\sqrt{n \theta (1 - \theta)}$.
We need to calculate the conditional probability of
$X \geq \frac{49,581}{98,451} \approx 0.5036$
given $\mu = n \theta = 98,451 \cdot \frac{1}{2} = 49,225.5$
and&lt;&#x2F;p&gt;
&lt;p&gt;$\sigma = \sqrt{n \theta (1 - \theta)} =
\sqrt{98,451 \cdot \frac{1}{2} \cdot (1 - \frac{1}{2})}$:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(X \ge 0.5036 \mid \mu = 49,225.5, \sigma = \sqrt{24.612.75})$$&lt;&#x2F;p&gt;
&lt;p&gt;This is basically a
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cumulative_distribution_function&quot;&gt;cumulative distribution function (CDF)&lt;&#x2F;a&gt;
of $X$ on the interval $[49,225.5; 98,451]$:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\int_{49,225.5}^{98,451} \frac{1}{\sqrt{2 \pi \sigma^2}}
e^{- \frac{\left( \frac{x - \mu}{\sigma} \right)^2}{2}} dx
$$&lt;&#x2F;p&gt;
&lt;p&gt;After inserting the values and doing some arithmetic,
our answer is approximately $0.0117$.
Note that this is a one-sided test,
since it is symmetrical,
the two-sided test would be
$0.0117 \cdot 2 = 0.0235$.
Since we don’t deviate from the Fisher’s canon,
this is well below the 5% threshold.
Hooray! We rejected the null hypothesis!
Quick! Grab a frequentist celebratory cigar!
But, wait. Let’s check the Bayesian approach.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;analytical-solutions-bayesian-approach&quot;&gt;Analytical Solutions – Bayesian Approach&lt;&#x2F;h4&gt;
&lt;p&gt;For the Bayesian approach, we need to set prior probabilities on both hypotheses.
Since we do not favor one from another, let’s set equal prior probabilities:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(H_0) = P(H_a) = \frac{1}{2}$$&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, all parameters of interest need a prior distribution.
So, let’s put a prior distribution on $\theta$.
We could be fancy here, but let’s not.
We’ll use a uniform distribution on $[0, 1]$.&lt;&#x2F;p&gt;
&lt;p&gt;We have everything we need to compute the posterior probability of $H_0$ given
$\theta$.
For this, we’ll use &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bayes%27_theorem&quot;&gt;Bayes theorem&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(A \mid B) = \frac{P(B \mid A) P(A)}{P(B)}$$&lt;&#x2F;p&gt;
&lt;p&gt;Now again let’s plug in all the values:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(H_0 \mid \theta) = \frac{P(\theta \mid H_0) P(H_0)}{P(\theta)}$$&lt;&#x2F;p&gt;
&lt;p&gt;Note that by the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Probability_axioms&quot;&gt;axioms of probability&lt;&#x2F;a&gt;
and by the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Chain_rule_(probability)&quot;&gt;product rule of probability&lt;&#x2F;a&gt;
we can decompose $P(\theta)$ into:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(\theta) = P(\theta \mid H_0) P(H_0) + P(\theta \mid H_a) P(H_a)$$&lt;&#x2F;p&gt;
&lt;p&gt;Again, we’ll use the normal approximation:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
&amp;amp;P \left( \theta = 0.5 \mid \mu = 49,225.5, \sigma = \sqrt{24.612.75} \right) \\
&amp;amp;= \frac{
\frac{1}{
\sqrt{2 \pi \sigma^2}
}
e^{- \left( \frac{(\mu - \mu \cdot 0.5)}{2 \sigma} \right)^2} \cdot 0.5
}
{
\frac{1}{\sqrt{2 \pi \sigma^2}}
e^{ \left( -\frac{(\mu - \mu \cdot 0.5)}{2 \sigma} \right)^2} \cdot 0.5 +
\int_0^1 \frac {1}{\sqrt{2 \pi \sigma^2} }
e^{- \left( \frac{\mu - \mu \cdot \theta)}{2 \sigma} \right)^2}
d \theta \cdot 0.5
} \\
&amp;amp;= 0.9505
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;The likelihood of the alternative hypothesis,
$P(\theta \mid H_a)$,
is just the CDF of all possible values of $\theta \ne 0.5$.&lt;&#x2F;p&gt;
&lt;p&gt;$$
P(H_0 \mid \text{data}) = P \left( \theta = 0.5 \mid \mu = 49,225.5,
sigma = \sqrt{24.612.75} \right) &amp;gt; 0.95
$$&lt;&#x2F;p&gt;
&lt;p&gt;And we fail to reject the null hypothesis, in frequentist terms.
However, we can also say in Bayesian terms, that we strongly favor $H_0$
over $H_a$.&lt;&#x2F;p&gt;
&lt;p&gt;Quick! Grab the Bayesian celebratory cigar!
The null is back on the game!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;computational-solutional&quot;&gt;Computational Solutional&lt;&#x2F;h3&gt;
&lt;p&gt;For the computational solution, we’ll use &lt;a href=&quot;https:&#x2F;&#x2F;julialang.org&quot;&gt;Julia&lt;&#x2F;a&gt;
and the following packages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JuliaStats&#x2F;HypothesisTests.jl&quot;&gt;&lt;code&gt;HypothesisTest.jl&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;turinglang.org&#x2F;&quot;&gt;&lt;code&gt;Turing.jl&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;computational-solutions-frequentist-approach&quot;&gt;Computational Solutions – Frequentist Approach&lt;&#x2F;h4&gt;
&lt;p&gt;We can perform a &lt;a href=&quot;https:&#x2F;&#x2F;juliastats.org&#x2F;HypothesisTests.jl&#x2F;stable&#x2F;nonparametric&#x2F;#Binomial-test&quot;&gt;&lt;code&gt;BinomialTest&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
with &lt;code&gt;HypothesisTest.jl&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-julia&quot;&gt;using&lt;&#x2F;span&gt; HypothesisTests
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; BinomialTest&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;49_225&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;98_451&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.5036&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Binomial test
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Population details&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    parameter of interest&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;   Probability of success
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    value under h_&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;:&lt;&#x2F;span&gt;         &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.5036&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    point estimate&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;          &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.499995&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;95&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt; confidence interval&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.4969&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.5031&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Test summary&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    outcome with &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;95&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt; confidence&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt; reject h_&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    two&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;sided p&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;value&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;           &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.0239&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Details&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    number of observations&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;98451&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;    number of successes&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;49225&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is the two-sided test,
and I had to round $49,225.5$ to $49,225$
since &lt;code&gt;BinomialTest&lt;&#x2F;code&gt; do not support real numbers.
But the results match with the analytical solution,
we still reject the null.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;computational-solutions-bayesian-approach&quot;&gt;Computational Solutions – Bayesian Approach&lt;&#x2F;h4&gt;
&lt;p&gt;Now, for the Bayesian computational approach,
I’m going to use a generative modeling approach,
and one of my favorites probabilistic programming languages,
&lt;code&gt;Turing.jl&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-julia&quot;&gt;using&lt;&#x2F;span&gt; Turing
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-macro z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-macro z-julia&quot;&gt;@&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-macro z-julia&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-julia&quot;&gt;model&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-julia&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-function z-julia&quot;&gt;function&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-julia&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-julia&quot;&gt;birth_rate&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;           θ &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;~&lt;&#x2F;span&gt; Uniform&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;           total_births &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;98_451&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;           male_births &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;~&lt;&#x2F;span&gt; Binomial&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;total_births, θ&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-meta z-function z-julia&quot;&gt;       &lt;span class=&quot;z-keyword z-other z-julia&quot;&gt;end&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; model &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; birth_rate&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;; male_births &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;49_225&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; chain &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; sample&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;model, NUTS&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1_000&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, MCMCThreads&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1_000&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Chains MCMC chain &lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;×&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;13&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;×&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;4&lt;&#x2F;span&gt; Array{Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;3&lt;&#x2F;span&gt;}&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Iterations        &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1001&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;2000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Number of chains  &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;4&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Samples per chain &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Wall duration     &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.2&lt;&#x2F;span&gt; seconds
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Compute duration  &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.19&lt;&#x2F;span&gt; seconds
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;parameters        &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; θ
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;internals         &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Summary Statistics
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;  parameters      mean       std      mcse    ess_bulk    ess_tail      rhat   ess_per_sec
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;      Symbol   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;     Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;     Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;       Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;           θ    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.4999&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.0016&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.0000&lt;&#x2F;span&gt;   &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1422.2028&lt;&#x2F;span&gt;   &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;2198.1987&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1.0057&lt;&#x2F;span&gt;     &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;7368.9267&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Quantiles
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;  parameters      &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;2.5&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt;     &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;25.0&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt;     &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;50.0&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt;     &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;75.0&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt;     &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;97.5&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;%&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;      Symbol   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;           θ    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.4969&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.4988&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.4999&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.5011&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.5031&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see from the output of the quantiles that the 95% quantile for $\theta$ is
the interval $(0.4969, 0.5031)$.
Although it overlaps zero, that is not the equivalent of a hypothesis test.
For that, we’ll use the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;highest_posterior_density_interval&quot;&gt;highest posterior density interval (HPDI)&lt;&#x2F;a&gt;,
which is defined as “choosing the narrowest interval” that
captures a certain posterior density threshold value.
In this case, we’ll use a threshold interval of 95%,
i.e. an $\alpha = 0.05$:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; hpd&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;chain; alpha&lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;HPD
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;  parameters     lower     upper
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;      Symbol   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;   Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;64&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;           θ    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.4970&lt;&#x2F;span&gt;    &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.5031&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We see that we fail to reject the null,
$\theta = 0.5$ at $\alpha = 0.05$ which is in accordance with the analytical
solution.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-the-frequentist-and-bayesian-approaches-disagree&quot;&gt;Why the Frequentist and Bayesian Approaches Disagree&lt;&#x2F;h2&gt;
&lt;p&gt;Why do the approaches disagree?
What is going on under the hood?&lt;&#x2F;p&gt;
&lt;p&gt;The answer is disappointing.
The main problem is that the frequentist approach only allows fixed significance
levels with respect to sample size.
Whereas the Bayesian approach is consistent and robust to sample size variations.&lt;&#x2F;p&gt;
&lt;p&gt;Taken to extreme, in some cases, due to huge sample sizes,
the $p$-value is pretty much a &lt;em&gt;proxy&lt;&#x2F;em&gt; for sample size
and have little to no utility on hypothesis testing.
This is known as $p$-hacking.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;div class=&quot;references&quot;&gt;
    &lt;p&gt;Lindley, Dennis V. “The future of statistics: A Bayesian 21st century”.
&lt;em&gt;Advances in Applied Probability&lt;&#x2F;em&gt; 7 (1975): 106-115.&lt;&#x2F;p&gt;

&lt;&#x2F;div&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Word embeddings</title>
        <published>2023-11-19T22:49:51+00:00</published>
        <updated>2023-11-19T22:49:51+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/word-embeddings/" type="text/html"/>
        <id>https://storopoli.com/blog/word-embeddings/</id>
        
            <content type="html">&lt;noscript&gt;
    &lt;div class=&quot;admonition warning&quot;&gt;
        &lt;div class=&quot;admonition-icon admonition-icon-warning&quot;&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;admonition-content&quot;&gt;
            &lt;strong class=&quot;admonition-title&quot;&gt;
                Evil JavaScript
            &lt;&#x2F;strong&gt;
            &lt;p&gt;
                This post uses &lt;a href=&quot;https:&#x2F;&#x2F;katex.org&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; to render mathematical expressions.
            &lt;&#x2F;p&gt;
            &lt;p&gt;
                To see the rendered mathematical expressions, you’ll need to enable JavaScript.
            &lt;&#x2F;p&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;word-embeddings&#x2F;euclid.jpg&quot; alt=&quot;Euclid of Alexandria&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I wish I could go back in time and tell my younger self
that you can make a machine understand human language with trigonometry.
That would definitely have made me more aware and interested in the
subject during my school years.
I would have looked at triangles, circles, sines, cosines, and tangents
in a whole different way.
Alas, better late than never.&lt;&#x2F;p&gt;
&lt;p&gt;In this post, we’ll learn how to represent words using word embeddings,
and how to use basic trigonometry to play around with them.
Of course, we’ll use &lt;a href=&quot;https:&#x2F;&#x2F;julialang.org&quot;&gt;Julia&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;word-embeddings&quot;&gt;Word Embeddings&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Word_embedding&quot;&gt;Word embeddings&lt;&#x2F;a&gt; is a way to
represent words as a real-valued vector that encodes the meaning of the word
in such a way that words that are closer in the vector space are expected
to be similar in meaning&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ok, let’s unwrap the above definition.
First, a &lt;strong&gt;real-valued vector&lt;&#x2F;strong&gt; is any vector which its elements belong to the real
numbers.
Generally we denote vectors with a bold lower-case letter,
and we denote its elements (also called components) using square brackets.
Hence, a vector $\bold{v}$ that has 3 elements, $1$, $2$, and $3$,
can be written as&lt;&#x2F;p&gt;
&lt;p&gt;$$\bold{v} = \begin{bmatrix} 1 \\ 2 \\ 3 \end{bmatrix}$$&lt;&#x2F;p&gt;
&lt;p&gt;Next, what “close” means for vectors?
We can use distance functions to get a measurable value.
The most famous and commonly used distance function is the &lt;strong&gt;Euclidean distance&lt;&#x2F;strong&gt;,
in honor of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Euclid&quot;&gt;Euclid&lt;&#x2F;a&gt;, the “father of geometry”,
and the guy pictured in the image at the top of this post.
The Euclidean distance is defined in trigonometry for 2-D and 3-D spaces.
However, it can be generalized to any dimension $n &amp;gt; 1$ by using vectors.&lt;&#x2F;p&gt;
&lt;p&gt;Since every word is represented by an $n$-dimensional vector,
we can use distances to compute a metric that represent similarity between vectors.
And, more interesting, we can add and subtract words
(or any other linear combination of one or more words) to generate new words.&lt;&#x2F;p&gt;
&lt;p&gt;Before we jump to code and examples, a quick note about how word embeddings
are constructed.
They are trained like a regular machine learning algorithm,
where the cost function measures the difference between
some vector distance between the vectors and a “semantic distance”.
The goal is to iteratively find good vector values that minimize the cost.
So, if a vector is close to another vector measured by a distance function,
but far apart measured by some semantic distance on the words that these
vectors represent, then the cost function will be higher.
The algorithm cannot change the semantic distance, it is treated as a fixed value.
However, it can change the vector elements’ values so that the vector distance function
closely resembles the semantic distance function.
Lastly, generally the dimensionality of the vectors used in word embeddings
are high, $n &amp;gt; 50$, since it needs a proper amount of dimensions in order to
represent all the semantic information of words with vectors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pre-trained-word-embeddings&quot;&gt;Pre-Trained Word Embeddings&lt;&#x2F;h2&gt;
&lt;p&gt;Generally we don’t train our own word embeddings from scratch,
we use pre-trained ones.
Here is a list of some of the most popular ones:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code.google.com&#x2F;archive&#x2F;p&#x2F;word2vec&#x2F;&quot;&gt;Word2Vec&lt;&#x2F;a&gt;:
One of the first public available word embeddings,
made by Google in 2013.
Only supports English.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nlp.stanford.edu&#x2F;projects&#x2F;glove&#x2F;&quot;&gt;GloVe&lt;&#x2F;a&gt;:
made by Stanford in 2014.
Only supports English.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fasttext.cc&#x2F;&quot;&gt;FastText&lt;&#x2F;a&gt;:
From Facebook, released in 2016.
Supports hundreds of languages.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;julia-code&quot;&gt;Julia Code&lt;&#x2F;h2&gt;
&lt;p&gt;We will use the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JuliaText&#x2F;Embeddings.jl&quot;&gt;&lt;code&gt;Embeddings.jl&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
package to easily load word embeddings as vectors,
and the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JuliaStats&#x2F;Distances.jl&quot;&gt;&lt;code&gt;Distances.jl&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
package for the convenience of several distance functions.
This is a nice example of the Julia package ecosystem composability,
where one package can define types, another can define functions,
and another can define custom behavior of these functions on types that
are defined in other packages.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-julia&quot;&gt;using&lt;&#x2F;span&gt; Embeddings
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-julia&quot;&gt;using&lt;&#x2F;span&gt; Distances
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s load the &lt;a href=&quot;https:&#x2F;&#x2F;nlp.stanford.edu&#x2F;projects&#x2F;glove&#x2F;&quot;&gt;GloVe&lt;&#x2F;a&gt;
word embeddings.
First, let’s check what we have in store to choose from
GloVe’s English language embeddings:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; language_files&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;GloVe{&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-julia&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-julia&quot;&gt;en&lt;&#x2F;span&gt;}&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;20&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;element Vector{String}&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.50d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.100d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.200d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.300d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.42B.300d&#x2F;glove.42B.300d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.840B.300d&#x2F;glove.840B.300d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.25d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.50d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.100d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.200d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.50d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.100d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.200d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.6B&#x2F;glove.6B.300d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.42B.300d&#x2F;glove.42B.300d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.840B.300d&#x2F;glove.840B.300d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.25d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.50d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.100d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;glove.twitter.27B&#x2F;glove.twitter.27B.200d.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’ll use the &lt;code&gt;&quot;glove.6B&#x2F;glove.6B.50d.txt&quot;&lt;&#x2F;code&gt;.
This means that it was trained with 6 billion tokens,
and it provides embeddings with 50-dimensional vectors.
The &lt;code&gt;load_embeddings&lt;&#x2F;code&gt; function takes an optional second positional
argument as an &lt;code&gt;Int&lt;&#x2F;code&gt; to choose from which index of the &lt;code&gt;language_files&lt;&#x2F;code&gt; to use.
Finally, I just want the words “king”, “queen”, “man”, “woman”;
so I am passing these words as a &lt;code&gt;Set&lt;&#x2F;code&gt; to the &lt;code&gt;keep_words&lt;&#x2F;code&gt; keyword argument:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-julia&quot;&gt;const&lt;&#x2F;span&gt; glove &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; load_embeddings&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;GloVe{&lt;span class=&quot;z-keyword z-operator z-colon z-julia&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-julia&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-julia&quot;&gt;en&lt;&#x2F;span&gt;}, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1&lt;&#x2F;span&gt;; keep_words&lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt;Set&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-sequence z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-julia&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;king&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;queen&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;man&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;woman&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-julia&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;Embeddings.EmbeddingTable{Matrix{Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;32&lt;&#x2F;span&gt;}, Vector{String}}&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;32&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-sequence z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-julia&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.094386&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.50451&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.18153&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.37854&lt;&#x2F;span&gt;; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.43007&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.68607&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.64827&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1.8233&lt;&#x2F;span&gt;; … ; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.53135&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.64426&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.48764&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.0092753&lt;&#x2F;span&gt;; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.11725&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.51042&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.10467&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.60284&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-julia&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-sequence z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-julia&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;man&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;king&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;woman&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-julia&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-julia&quot;&gt;queen&lt;span class=&quot;z-punctuation z-definition z-string z-end z-julia&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-julia&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Watch out with the order that we get back.
If you see the output of &lt;code&gt;load_embeddings&lt;&#x2F;code&gt;,
the order is &lt;code&gt;&quot;man&quot;, &quot;king&quot;, &quot;woman&quot;, &quot;queen&quot;]&lt;&#x2F;code&gt;
Let’s see how a word is represented:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; queen &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; glove.embeddings&lt;span class=&quot;z-meta z-sequence z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-julia&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-julia&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;50&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;element Vector{Float&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;32&lt;&#x2F;span&gt;}&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;  &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.37854&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;  &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1.8233&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1.2648&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;  ⋮
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;2.2839&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;  &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.0092753&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt; &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.60284&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;They are 50-dimensional vectors of &lt;code&gt;Float32&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now, here’s the fun part:
let’s add words and check the similarity between the
result and some other word.
A classical example is to start with the word “king”,
subtract the word “men”,
add the word “woman”,
and check the distance of the result to the word “queen”:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; man &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; glove.embeddings&lt;span class=&quot;z-meta z-sequence z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-julia&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-julia&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; king &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; glove.embeddings&lt;span class=&quot;z-meta z-sequence z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-julia&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-julia&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; woman &lt;span class=&quot;z-keyword z-operator z-assignment z-julia&quot;&gt;=&lt;&#x2F;span&gt; glove.embeddings&lt;span class=&quot;z-meta z-sequence z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-julia&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;:&lt;&#x2F;span&gt;, &lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-julia&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; cosine_dist&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;king &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt; man &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;+&lt;&#x2F;span&gt; woman, queen&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.13904202&lt;&#x2F;span&gt;f&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is less than 1&#x2F;4 of the distance of “woman” to “king”:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;julia&lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; cosine_dist&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;woman, king&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0.58866215&lt;&#x2F;span&gt;f&lt;span class=&quot;z-constant z-numeric z-julia&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Feel free to play around with others words.
If you want suggestions, another classical example is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; class=&quot;language-julia z-code&quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span class=&quot;z-source z-julia&quot;&gt;cosine_dist&lt;span class=&quot;z-meta z-group z-julia&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-julia&quot;&gt;(&lt;&#x2F;span&gt;Madrid &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;-&lt;&#x2F;span&gt; Spain &lt;span class=&quot;z-keyword z-operator z-julia&quot;&gt;+&lt;&#x2F;span&gt; France, Paris&lt;span class=&quot;z-punctuation z-section z-group z-end z-julia&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I think that by allying interesting applications to abstract math topics
like trigonometry is the vital missing piece in STEM education.
I wish every new kid that is learning math could have the opportunity to contemplate
how new and exciting technologies have some amazing simple math under the hood.
If you liked this post, you would probably like &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Linear_algebra&quot;&gt;linear algebra&lt;&#x2F;a&gt;.
I would highly recommend &lt;a href=&quot;https:&#x2F;&#x2F;math.mit.edu&#x2F;~gs&#x2F;&quot;&gt;Gilbert Strang’s books&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&quot;&gt;3blue1brown series on linear algebra&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>What is soydev? And why do I hate it</title>
        <published>2023-11-13T07:06:59+00:00</published>
        <updated>2023-11-13T07:06:59+00:00</updated>
        <author>
            <name>Jose Storopoli, PhD</name>
        </author>
        <link rel="alternate" href="https://storopoli.com/blog/soydev/" type="text/html"/>
        <id>https://storopoli.com/blog/soydev/</id>
        
            <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;storopoli.com&#x2F;blog&#x2F;soydev&#x2F;soydev.jpg&quot; alt=&quot;Soydev meme&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let’s dive into the &lt;strong&gt;concept of “soydev”&lt;&#x2F;strong&gt;,
a term often used pejoratively to describe developers with
a superficial understanding of technology.
I provide my definition of what soydev is,
why is bad, and how it came to be.
To counteract soydev inclinations,
I propose an abstract approach centered on timeless concepts, protocols,
and first principles, fostering a mindset of exploration,
resilience in the face of failure, and an insatiable hunger for knowledge.&lt;&#x2F;p&gt;
&lt;p&gt;While we’ll start with a look at the soydev stereotype,
our journey will lead us to a wider reflection on the importance of depth in
technological understanding.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;definition&quot;&gt;Definition&lt;&#x2F;h2&gt;
&lt;p&gt;First, let’s tackle the definition of &lt;em&gt;soydev&lt;&#x2F;em&gt;.
&lt;a href=&quot;https:&#x2F;&#x2F;www.urbandictionary.com&#x2F;define.php?term=Soydev&quot;&gt;Urban Dictionary&lt;&#x2F;a&gt;
provides two interesting definitions:&lt;&#x2F;p&gt;
&lt;p&gt;Urban Dictionary definition 1:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Soydev is a “programmer” that works at a bigh tech company and
only knows JavaScript and HTML.
They love IDEs like Visual Studio Code and inefficient frameworks
that slow their code down.
They represent the majority of “programmers” today and
if their numbers continue growing,
not one person on earth will know how a computer works by the year 2050
when all the gigachad 1980s C and Unix programmers are gone.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Urban Dictionary definition 2:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Soydev is a type of most abundant Software Developer.
The Software he&#x2F;she makes is always inefficient and
uses more CPU and RAM than it should.
This person always prefers hard work to smart work,
Has little or no knowledge of existing solutions of a problem,
Comes up with very complex solution for a simple problem and
has fear of native and fast programming languages like C, C++ and Rust&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;These definitions give a glimpse of what a soydev is.
However, they are loaded with pejorative language,
and also are based on non-timeless technologies and tools.
I, much prefer to rely on concepts and principles that are timeless.
Hence, I will provide my own definition of soydev:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Soydev is someone who only has a superficial conception of technology
and computers that is restricted to repeating patterns learned
from popular workflows on the internet;
but who doesn’t dedicate time or effort to learning concepts in a deeper way.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Although soydev is a term with specific connotations,
it opens the door to a larger conversation about the depth of our engagement
with technology.
This superficiality is not unique to soydevs
but is a symptom of a broader trend in our relationship with technology.&lt;&#x2F;p&gt;
&lt;p&gt;Most of us start our journey in a skill by having the superficial conception of it.
However, some are not satisfied with this superficial conception,
and strive to understand what lies beyond the surface.&lt;&#x2F;p&gt;
&lt;p&gt;Understanding concepts from first principles allows us to achieve a deep graceful
kind of mastery that when seems almost effortless to others.
Deep down lies a lot of effort and time spent in learning and practicing.
Innumerable hours of deep thinking and reflecting on
why things are the way they are, and how they could be different if you
tried to implement them from scratch yourself.&lt;&#x2F;p&gt;
&lt;p&gt;There is also an inherently rare mixture of curiosity and creativity in the
process of profoundly learning and understanding concepts in this way.
You start not only to ask the “Why?” questions but also the “What if?” questions.
I feel that this posture on understanding concepts paves the way for joyful mastery.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Richard_Feynman&quot;&gt;Richard Feynman&lt;&#x2F;a&gt;
once said “What I cannot create, I do not understand”.
You cannot create anything that you don’t know the underlying concepts.
Therefore, by allying creativity and discovery with deep knowledge,
Feynman’s argument was that in order for you truly master something,
you’ll need to be able to recreate it from scratch.&lt;&#x2F;p&gt;
&lt;p&gt;If you are struggling with my abstractions, I can provide some concrete examples.
A soydev might be someone who:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Instead of using a simple text editor like vim&#x2F;emacs&#x2F;nano,
prefers a totally bloated IDE like VSCode to write even basic things in plaintext.
Or cannot SSH into a remote server without a GUI.&lt;&#x2F;li&gt;
&lt;li&gt;Instead of choosing a native solution like HTML for a simple web page section,
prefers to overengineer with a JavaScript framework that has a lot of dependencies,
and takes 3 seconds to render in the browser.&lt;&#x2F;li&gt;
&lt;li&gt;Prefers to use black box abstractions instead of learning about basic tech
primitives and protocols that would get the job done.&lt;&#x2F;li&gt;
&lt;li&gt;Has no idea what about most concepts that are at the core of computing like
bit, byte, heap, stack, garbage collector, async, parallel, CPU cycles,
cache miss, L1&#x2F;L2&#x2F;L3 cache etc.&lt;&#x2F;li&gt;
&lt;li&gt;Don’t understand the math, or what is going on under the hood when
using machine learning libraries.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;why-soydev-is-bad&quot;&gt;Why soydev is bad&lt;&#x2F;h2&gt;
&lt;p&gt;First, let’s understand that being a soydev is not necessarily bad,
but is highly limited on his ability and curiosity.
A soydev will never be able to achieve the same level of mastery
as someone who is willing to go deep and learn concepts from first principles.&lt;&#x2F;p&gt;
&lt;p&gt;Now, on the other hand,
soydev is bad because it perpetuates a mindset of superficiality.
The path of technology innovation is guided by curiosity and creativity.
And paved with hard work and deep understanding.
Imagine if all the great minds in technology took the easy path of mindless
tooling and problem-solving?
We would be in a stagnant and infertile scenario,
where everyone would use the same technology and tools without
questioning or thinking about the problems that they are trying to solve.&lt;&#x2F;p&gt;
&lt;p&gt;Hence, the culture of soydev is bad for the future of technology,
where most new developers will be highly limited in their ability to innovate.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-soydev-is-on-the-rise&quot;&gt;Why soydev is on the rise&lt;&#x2F;h2&gt;
&lt;p&gt;I think that soydev culture is highly correlated with
the increase of technology and
decrease of barriers to access such technology.
We live in an age that not only technology is everywhere,
but also to interact with it is quite effortless.&lt;&#x2F;p&gt;
&lt;p&gt;My computational statistician mind is always aware of cognitive
and statistical bias.
Whenever I see a correlation across time,
I always take a step back and try to think about the assumptions
and conceptual models behind it.&lt;&#x2F;p&gt;
&lt;p&gt;Does the increase in technology usage and importance in daily life
results in more people using technology from a professional point-of-view?
Yes.
Does the increase in people professionally using technology
results in an increase of tooling and conceptual abstractions
that allows superficial interactions without need to deeply understand
the concepts behind such technology?
I do think that this is true as well.&lt;&#x2F;p&gt;
&lt;p&gt;These assumptions cover the constituents of the rise of soydev
from a “demand” viewpoint.
Nevertheless, there is also the analogous “supply” viewpoint.
If these trends in demand are not met by trends in supply,
we would not see the establishment of the soydev phenomenon.
There is an emerging trend to standardize all the available tech
into commodities.&lt;&#x2F;p&gt;
&lt;p&gt;While commoditization of technological solutions has inherent advantages,
such as scalability and lower opportunity costs,
it has some disadvantages.
The main disadvantage is the abrupt decrease of technological innovations.
If we have strong standardization that are enforced by market and social forces,
then why care to innovate?
Why bring new solutions or new ways to solve problems if it will not be adopted
and are doomed to oblivion?
Why decide to try to do things different if there is such a high maintenance
cost, especially when training and expanding human resources capable of
dealing with such non-standard solutions?&lt;&#x2F;p&gt;
&lt;p&gt;In this context, technological innovation can only be undertaken
by big corporations that, not only have big budgets,
but also big influence to push its innovations as industry standards.&lt;&#x2F;p&gt;
&lt;p&gt;Don’t get me wrong: I do think that industry standards are important.
However, I much prefer a protocol standard than product standards.
First, protocol standards are generally not tied to a single company or brand.
Second, protocol standards have a higher propensity to expose its underlying
concepts to developers.
Think about TCP&#x2F;IP versus your favorite front-end framework:
Which one would result in deeper understanding of the underlying concepts?&lt;&#x2F;p&gt;
&lt;p&gt;The rise of soydevs mirrors a societal shift towards immediate gratification and
away from the pursuit of deep knowledge.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-stop-being-a-soydev&quot;&gt;How to stop being a soydev&lt;&#x2F;h2&gt;
&lt;p&gt;Despite these unstoppable trends I do think that it is possible to use
tools and shallow abstractions without being a soydev.
Or, to stop being a soydev and advance towards deep understanding
of what constitutes your craft.
Moving beyond the ‘soydev’ mindset is about embracing the richness that
comes from a deep understanding of technology.
Here is a short, not by any means exhaustive list of things that you can start doing:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Stop thinking about what is latest and greatest&lt;&#x2F;strong&gt;.
The tools are not important as the problems they are solving.
Understand what is the need that the tool tries to address,
and the major concepts on how it works.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Focus on concepts, protocols and first principles&lt;&#x2F;strong&gt;.
Forget about frameworks, languages, editors, apps, etc.
Focus on what probably won’t change in the next decade in technology.
It is easy (and less uncertain) to think concepts and problems,
than in tools and solutions.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Set aside some weekly time to explore new ideas&lt;&#x2F;strong&gt;.
Time block it, make it a calendar event.
Try to find a time slot that you can be free of distraction and worries.
Free all of your working memory when you are starting a “new idea” session.
Think about what problem is this idea trying to solve.
Also don’t be stuck to just using the “problem-solving” lens.
Most concepts that are worth knowing in computer science and programming
don’t have a clear problem tied to them.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Tinker. Play around&lt;&#x2F;strong&gt;. Break something down and see if you can build from scratch.
Remember Feynman’s “What I cannot create, I do not understand”.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Failure is almost certain&lt;&#x2F;strong&gt;. Yes, you will definitely fail.
I say to a lot of junior devs, interns, and students that the only advantage
that I have compared to them is that I’ve failed more times that they have tried.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Stay curious and hungry for knowledge&lt;&#x2F;strong&gt;.
I am always impressed on how children are so curious.
I feel sad that almost no one retains their childhood curiosity as an adult
(Maybe that’s why I love to interact with children).
Also, I am amazed by how deprived of will to learn some are.
That is an idea that for me, it is hard to grasp,
since I feel the exactly opposite.
Often I have to hold myself not diving into certain areas, ideas or concepts
because I cannot afford the time to learn them.
However, I am always tempted by them.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        </entry>
</feed>
